*** bsd.c	Thu Aug  1 23:29:29 2002
--- ../../temp2/src/bsd.c	Fri Aug  2 00:09:24 2002
***************
*** 82,88 ****
      struct sockaddr_in server;
  
  #endif
!     DPUSH;
  
  #ifdef TLI
      s = t_open(TLI_TCP, (O_RDWR | O_NDELAY), NULL);
--- 83,89 ----
      struct sockaddr_in server;
  
  #endif
!     DPUSH; /* #1 */
  
  #ifdef TLI
      s = t_open(TLI_TCP, (O_RDWR | O_NDELAY), NULL);
***************
*** 91,97 ****
  #endif
      if (s < 0) {
  	log_perror("NET", "FAIL", NULL, "creating master socket");
!         DPOP;
  	exit(3);
      }
  #ifdef TLI
--- 92,98 ----
  #endif
      if (s < 0) {
  	log_perror("NET", "FAIL", NULL, "creating master socket");
!         DPOP; /* #1 */
  	exit(3);
      }
  #ifdef TLI
***************
*** 99,112 ****
      if (!bindreq) {
  	log_perror("NET", "FAIL", NULL, "t_alloc(req)");
  	close(s);
!         DPOP;
  	exit(4);
      }
      bindret = (struct t_bind *) t_alloc(s, T_BIND, T_ALL);
      if (!bindret) {
  	log_perror("NET", "FAIL", NULL, "t_alloc(ret)");
  	close(s);
!         DPOP;
  	exit(4);
      }
      serverreq = (struct sockaddr_in *) bindreq->addr.buf;
--- 100,113 ----
      if (!bindreq) {
  	log_perror("NET", "FAIL", NULL, "t_alloc(req)");
  	close(s);
!         DPOP; /* #1 */
  	exit(4);
      }
      bindret = (struct t_bind *) t_alloc(s, T_BIND, T_ALL);
      if (!bindret) {
  	log_perror("NET", "FAIL", NULL, "t_alloc(ret)");
  	close(s);
!         DPOP; /* #1 */
  	exit(4);
      }
      serverreq = (struct sockaddr_in *) bindreq->addr.buf;
***************
*** 121,134 ****
      if (t_bind(s, bindreq, bindret) < 0) {
  	log_perror("NET", "FAIL", NULL, "t_bind");
  	close(s);
!         DPOP;
  	exit(5);
      }
      serverret = (struct sockaddr_in *) bindret->addr.buf;
      if (serverreq->sin_port != serverret->sin_port) {
  	log_perror("NET", "FAIL", NULL, "t_bind(portinuse)");
  	close(s);
!         DPOP;
  	exit(6);
      }
  #else
--- 122,135 ----
      if (t_bind(s, bindreq, bindret) < 0) {
  	log_perror("NET", "FAIL", NULL, "t_bind");
  	close(s);
!         DPOP; /* #1 */
  	exit(5);
      }
      serverret = (struct sockaddr_in *) bindret->addr.buf;
      if (serverreq->sin_port != serverret->sin_port) {
  	log_perror("NET", "FAIL", NULL, "t_bind(portinuse)");
  	close(s);
!         DPOP; /* #1 */
  	exit(6);
      }
  #else
***************
*** 143,155 ****
      if (bind(s, (struct sockaddr *) &server, sizeof(server))) {
  	log_perror("NET", "FAIL", NULL, "bind");
  	close(s);
!         DPOP;
  	exit(4);
      }
      listen(s, 5);
  #endif
!     DPOP;
!     return s;
  }
  
  #ifndef HAVE_GETTIMEOFDAY
--- 144,155 ----
      if (bind(s, (struct sockaddr *) &server, sizeof(server))) {
  	log_perror("NET", "FAIL", NULL, "bind");
  	close(s);
!         DPOP; /* #1 */
  	exit(4);
      }
      listen(s, 5);
  #endif
!     RETURN(s); /* #1 */
  }
  
  #ifndef HAVE_GETTIMEOFDAY
***************
*** 210,216 ****
  #define CheckOutput(x)	FD_ISSET(x, &output_set)
  #endif
  
!     DPUSH;
      mudstate.debug_cmd = (char *) "< shovechars >";
      sock = make_socket(port);
      maxd = sock + 1;
--- 210,216 ----
  #define CheckOutput(x)	FD_ISSET(x, &output_set)
  #endif
  
!     DPUSH; /* #2 */
      mudstate.debug_cmd = (char *) "< shovechars >";
      sock = make_socket(port);
      maxd = sock + 1;
***************
*** 543,549 ****
  	    }
  	}
      }
!     DPOPCONDITIONAL;
  }
  
  const char *
--- 543,549 ----
  	    }
  	}
      }
!     DPOPCONDITIONAL; /* #2 */
  }
  
  const char *
***************
*** 553,559 ****
      char *retval;
      char *logbuff;
  
!     DPUSH;
  
      if (mudconf.use_hostname) {
  	struct hostent *he;
--- 553,559 ----
      char *retval;
      char *logbuff;
  
!     DPUSH; /* #3 */
  
      if (mudconf.use_hostname) {
  	struct hostent *he;
***************
*** 561,568 ****
          /* check the nodns_site list */
          if( site_check(a, mudstate.special_list, 1) & H_NODNS ) {
            retval = inet_ntoa(a);
!           DPOP;
!           return retval;
          }
  
  	he = gethostbyaddr((char *) &a.s_addr, sizeof(a.s_addr), AF_INET);
--- 561,567 ----
          /* check the nodns_site list */
          if( site_check(a, mudstate.special_list, 1) & H_NODNS ) {
            retval = inet_ntoa(a);
!           RETURN(retval); /* #3 */
          }
  
  	he = gethostbyaddr((char *) &a.s_addr, sizeof(a.s_addr), AF_INET);
***************
*** 576,593 ****
                   free_lbuf(logbuff);
                 ENDLOG
              }
!             DPOP;
! 	    return retval;
          }
  	else {
              retval = inet_ntoa(a);
!             DPOP;
! 	    return retval;
          }
      } 
      retval = inet_ntoa(a);
!     DPOP;
!     return retval;
  }
  
  #ifdef TLI
--- 575,589 ----
                   free_lbuf(logbuff);
                 ENDLOG
              }
! 	    RETURN(retval); /* #3 */
          }
  	else {
              retval = inet_ntoa(a);
! 	    RETURN(retval); /* 3 */
          }
      } 
      retval = inet_ntoa(a);
!     RETURN(retval); /* 3 */
  }
  
  #ifdef TLI
***************
*** 597,603 ****
  {
      char *buff;
  
!     DPUSH;
  
      STARTLOG(LOG_NET, "NET", "BIND")
  	buff = alloc_mbuf("log_tli_error");
--- 593,599 ----
  {
      char *buff;
  
!     DPUSH; /* #4 */
  
      STARTLOG(LOG_NET, "NET", "BIND")
  	buff = alloc_mbuf("log_tli_error");
***************
*** 607,613 ****
      log_text(buff);
      free_mbuf(buff);
      ENDLOG
!     DPOP;
  }
  
  #endif
--- 603,609 ----
      log_text(buff);
      free_mbuf(buff);
      ENDLOG
!     DPOP; /* #4 */
  }
  
  #endif
***************
*** 636,642 ****
  
  #endif
  
!     DPUSH;
  
      cur_port = 0;
      cmdsave = mudstate.debug_cmd;
--- 632,638 ----
  
  #endif
  
!     DPUSH; /* #5 */
  
      cur_port = 0;
      cmdsave = mudstate.debug_cmd;
***************
*** 645,657 ****
      if (!nc_call) {
  	nc_call = (struct t_call *) t_alloc(sock, T_CALL, T_ALL);
  	if (!nc_call) {
!             DPOP;
! 	    return 0;
          }
      }
      if (t_listen(sock, nc_call) < 0) {
!         DPOP;
! 	return 0;
      }
  
      sighold(SIGALRM);
--- 641,651 ----
      if (!nc_call) {
  	nc_call = (struct t_call *) t_alloc(sock, T_CALL, T_ALL);
  	if (!nc_call) {
! 	    RETURN(0); /* #5 */
          }
      }
      if (t_listen(sock, nc_call) < 0) {
!        RETURN(0); /* #5 */
      }
  
      sighold(SIGALRM);
***************
*** 660,667 ****
  
      if (newsock < 0) {
  	log_tli_error("RES", "t_open", errno, t_errno);
!         DPOP;
! 	return (0);
      }
      sighold(SIGALRM);
      ret = t_bind(newsock, NULL, NULL);
--- 654,660 ----
  
      if (newsock < 0) {
  	log_tli_error("RES", "t_open", errno, t_errno);
! 	RETURN(0); /* #5 */
      }
      sighold(SIGALRM);
      ret = t_bind(newsock, NULL, NULL);
***************
*** 670,677 ****
      if (ret < 0) {
  	log_tli_error("BIND", "t_bind", errno, t_errno);
  	t_close(newsock);
!         DPOP;
! 	return (0);
      }
      sighold(SIGALRM);
      ret = t_accept(sock, newsock, nc_call);
--- 663,669 ----
      if (ret < 0) {
  	log_tli_error("BIND", "t_bind", errno, t_errno);
  	t_close(newsock);
! 	RETURN(0); /* #5 */
      }
      sighold(SIGALRM);
      ret = t_accept(sock, newsock, nc_call);
***************
*** 680,687 ****
      if (ret < 0) {
  	log_tli_error("RES", "t_accept", errno, t_errno);
  	t_close(newsock);
!         DPOP;
! 	return (0);
      }
      /* push the read/write support module on the stream */
  
--- 672,678 ----
      if (ret < 0) {
  	log_tli_error("RES", "t_accept", errno, t_errno);
  	t_close(newsock);
! 	RETURN(0); /* #5 */
      }
      /* push the read/write support module on the stream */
  
***************
*** 692,699 ****
      if (ret < 0) {
  	log_tli_error("STRM", "ioctl I_PUSH", errno, t_errno);
  	t_close(newsock);
!         DPOP;
! 	return 0;
      }
      bcopy(nc_call->addr.buf, &addr, sizeof(struct sockaddr_in));
  
--- 683,689 ----
      if (ret < 0) {
  	log_tli_error("STRM", "ioctl I_PUSH", errno, t_errno);
  	t_close(newsock);
! 	RETURN(0); /* #5 */
      }
      bcopy(nc_call->addr.buf, &addr, sizeof(struct sockaddr_in));
  
***************
*** 728,735 ****
  	        free_mbuf(logbuff);
  	  ENDLOG
          }
!         DPOP;
! 	return 0;
      }
  #endif /* TLI */
  
--- 718,724 ----
  	        free_mbuf(logbuff);
  	  ENDLOG
          }
! 	RETURN(0); /* #5 */
      }
  #endif /* TLI */
  
***************
*** 860,867 ****
      }
      mudstate.debug_cmd = cmdsave;
  
!     DPOP;
!     return (d);
  }
  
  /* Disconnect reasons that get written to the logfile */
--- 849,855 ----
      }
      mudstate.debug_cmd = cmdsave;
  
!     RETURN(d); /* #5 */
  }
  
  /* Disconnect reasons that get written to the logfile */
***************
*** 910,916 ****
      int temp1, temp2, sitecntr;
      struct SNOOPLISTNODE *temp;
  
!     DPUSH;
  
      if ((reason == R_LOGOUT) &&
      (site_check((d->address).sin_addr, mudstate.access_list, 1) == H_FORBIDDEN))
--- 898,904 ----
      int temp1, temp2, sitecntr;
      struct SNOOPLISTNODE *temp;
  
!     DPUSH; /* #6 */
  
      if ((reason == R_LOGOUT) &&
      (site_check((d->address).sin_addr, mudstate.access_list, 1) == H_FORBIDDEN))
***************
*** 1090,1096 ****
  	free_desc(d);
  	ndescriptors--;
      }
!     DPOP;
  }
  
  void 
--- 1078,1084 ----
  	free_desc(d);
  	ndescriptors--;
      }
!     DPOP; /* #6 */
  }
  
  void 
***************
*** 1101,1107 ****
      struct linger ling;
  
  #endif /* HAVE_LINGER */
!     DPUSH;
  
  #ifdef FNDELAY
      if (fcntl(s, F_SETFL, FNDELAY) == -1) {
--- 1089,1095 ----
      struct linger ling;
  
  #endif /* HAVE_LINGER */
!     DPUSH; /* #7 */
  
  #ifdef FNDELAY
      if (fcntl(s, F_SETFL, FNDELAY) == -1) {
***************
*** 1120,1126 ****
  	log_perror("NET", "FAIL", "linger", "setsockopt");
      }
  #endif /* HAVE_LINGER */
!     DPOP;
  #endif /* not TLI */
  }
  
--- 1108,1114 ----
  	log_perror("NET", "FAIL", "linger", "setsockopt");
      }
  #endif /* HAVE_LINGER */
!     DPOP; /* #7 */
  #endif /* not TLI */
  }
  
***************
*** 1132,1142 ****
      char* logbuff;
      struct sockaddr_in sin;
  
!     DPUSH;
      if( !mudconf.authenticate ) {
        d->flags &= ~DS_AUTH_IN_PROGRESS;
!       DPOP;
!       return;
      }
  
      /* check the noauth_site list */
--- 1120,1129 ----
      char* logbuff;
      struct sockaddr_in sin;
  
!     DPUSH; /* #8 */
      if( !mudconf.authenticate ) {
        d->flags &= ~DS_AUTH_IN_PROGRESS;
!       VOIDRETURN; /* #8 */
      }
  
      /* check the noauth_site list */
***************
*** 1149,1156 ****
          free_lbuf(logbuff);
        ENDLOG
        d->flags &= ~DS_AUTH_IN_PROGRESS;
!       DPOP;
!       return;
      }
  
      bzero((char *) &sin, sizeof(sin));
--- 1136,1142 ----
          free_lbuf(logbuff);
        ENDLOG
        d->flags &= ~DS_AUTH_IN_PROGRESS;
!       VOIDRETURN; /* #8 */
      }
  
      bzero((char *) &sin, sizeof(sin));
***************
*** 1158,1165 ****
      if ((d->authdescriptor = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  	log_perror("NET", "FAIL", "creating auth sock", "socket");
  	d->flags &= ~DS_AUTH_IN_PROGRESS;
!         DPOP;
! 	return;
      }
  
      /* now make the socket non-blocking */
--- 1144,1150 ----
      if ((d->authdescriptor = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  	log_perror("NET", "FAIL", "creating auth sock", "socket");
  	d->flags &= ~DS_AUTH_IN_PROGRESS;
! 	VOIDRETURN; /* #8 */
      }
  
      /* now make the socket non-blocking */
***************
*** 1201,1208 ****
            }
  	  shutdown(d->authdescriptor, 2);
  	  close(d->authdescriptor);
!           DPOP;
! 	  return;
          }
      }
  
--- 1186,1192 ----
            }
  	  shutdown(d->authdescriptor, 2);
  	  close(d->authdescriptor);
! 	  VOIDRETURN; /* #8 */
          }
      }
  
***************
*** 1212,1218 ****
      alarm(next_timer());
  
      d->flags |= DS_AUTH_CONNECTING;
!     DPOP;
  }
  
  void
--- 1196,1202 ----
      alarm(next_timer());
  
      d->flags |= DS_AUTH_CONNECTING;
!     DPOP; /* #8 */
  }
  
  void
***************
*** 1256,1262 ****
      char *logbuff;
      int netfail = 0;
  
!     DPUSH;
  
      buff = alloc_mbuf("auth");
  
--- 1240,1246 ----
      char *logbuff;
      int netfail = 0;
  
!     DPUSH; /* #9 */
  
      buff = alloc_mbuf("auth");
  
***************
*** 1265,1272 ****
      if (write(d->authdescriptor, buff, strlen(buff)) < 0) {
  	free_mbuf(buff);
  	if (errno == EINTR) {
!             DPOP;
! 	    return;
  	}
  	if (errno != EINPROGRESS) {
              STARTLOG(LOG_NET, "NET", "AUTH")
--- 1249,1256 ----
      if (write(d->authdescriptor, buff, strlen(buff)) < 0) {
  	free_mbuf(buff);
  	if (errno == EINTR) {
! 
! 	    VOIDRETURN; /* #9 */
  	}
  	if (errno != EINPROGRESS) {
              STARTLOG(LOG_NET, "NET", "AUTH")
***************
*** 1287,1293 ****
      }
      d->flags &= ~DS_NEED_AUTH_WRITE;
      shutdown(d->authdescriptor, 1);	/* close write */
!     DPOP;
  }
  
  void 
--- 1271,1277 ----
      }
      d->flags &= ~DS_NEED_AUTH_WRITE;
      shutdown(d->authdescriptor, 1);	/* close write */
!     VOIDRETURN; /* #9 */
  }
  
  void 
***************
*** 1301,1307 ****
      char *resp3;
      char *useridptr;
  
!     DPUSH;
  
      buff = alloc_mbuf("check_auth_rec_buffer");
  
--- 1285,1291 ----
      char *resp3;
      char *useridptr;
  
!     DPUSH; /* #10 */
  
      buff = alloc_mbuf("check_auth_rec_buffer");
  
***************
*** 1318,1325 ****
  	shutdown(d->authdescriptor, 2);
  	close(d->authdescriptor);
          free_mbuf(buff);
!         DPOP;
! 	return;
      }
      buff[numread] = '\0';
  
--- 1302,1308 ----
  	shutdown(d->authdescriptor, 2);
  	close(d->authdescriptor);
          free_mbuf(buff);
! 	VOIDRETURN; /* #10 */
      }
      buff[numread] = '\0';
  
***************
*** 1374,1380 ****
          free_mbuf(resp3);
          free_mbuf(buff2);
      } 
!     DPOP;
  }
  
  
--- 1357,1363 ----
          free_mbuf(resp3);
          free_mbuf(buff2);
      } 
!     DPOP; /* #10 */
  }
  
  
***************
*** 1384,1390 ****
      DESC *d;
      char tchbuff[1000];
  
!     DPUSH;
  
      ndescriptors++;
      d = alloc_desc("init_sock");
--- 1367,1373 ----
      DESC *d;
      char tchbuff[1000];
  
!     DPUSH; /* #11 */
  
      ndescriptors++;
      d = alloc_desc("init_sock");
***************
*** 1460,1467 ****
      descriptor_list = d;
      welcome_user(d);
      start_auth(d);
!     DPOP;
!     return d;
  }
  
  int 
--- 1443,1449 ----
      descriptor_list = d;
      welcome_user(d);
      start_auth(d);
!     RETURN(d); /* #11 */
  }
  
  int 
***************
*** 1471,1477 ****
      int cnt;
      char *cmdsave;
  
!     DPUSH;
  
      cmdsave = mudstate.debug_cmd;
      mudstate.debug_cmd = (char *) "< process_output >";
--- 1453,1459 ----
      int cnt;
      char *cmdsave;
  
!     DPUSH; /* #12 */
  
      cmdsave = mudstate.debug_cmd;
      mudstate.debug_cmd = (char *) "< process_output >";
***************
*** 1485,1495 ****
  	    if (cnt < 0) {
  		mudstate.debug_cmd = cmdsave;
  		if (errno == EWOULDBLOCK) {
!                     DPOP;
! 		    return 1;
                  }
!                 DPOP;
! 		return 0;
  	    }
  	    d->output_size -= cnt;
  	    tb->hdr.nchars -= cnt;
--- 1467,1475 ----
  	    if (cnt < 0) {
  		mudstate.debug_cmd = cmdsave;
  		if (errno == EWOULDBLOCK) {
! 		    RETURN(1); /* #12 */
                  }
! 		RETURN(0); /* #12 */
  	    }
  	    d->output_size -= cnt;
  	    tb->hdr.nchars -= cnt;
***************
*** 1503,1510 ****
  	    d->output_tail = NULL;
      }
      mudstate.debug_cmd = cmdsave;
!     DPOP;
!     return 1;
  }
  
  int 
--- 1483,1489 ----
  	    d->output_tail = NULL;
      }
      mudstate.debug_cmd = cmdsave;
!     RETURN(1); /* #12 */
  }
  
  int 
***************
*** 1513,1519 ****
      TBLOCK *tb, *save;
      int cnt;
  
!     DPUSH;
  
      tb = d->door_output_head;
      while (tb != NULL) {
--- 1492,1498 ----
      TBLOCK *tb, *save;
      int cnt;
  
!     DPUSH; /* #13 */
  
      tb = d->door_output_head;
      while (tb != NULL) {
***************
*** 1523,1533 ****
  			tb->hdr.nchars);
  	    if (cnt < 0) {
  		if (errno == EWOULDBLOCK) {
!                     DPOP;
! 		    return 1;
                  }
!                 DPOP;
! 		return 0;
  	    }
  	    d->door_output_size -= cnt;
  	    tb->hdr.nchars -= cnt;
--- 1502,1510 ----
  			tb->hdr.nchars);
  	    if (cnt < 0) {
  		if (errno == EWOULDBLOCK) {
! 		    RETURN(1); /* #13 */
                  }
! 		RETURN(0); /* #13 */
  	    }
  	    d->door_output_size -= cnt;
  	    tb->hdr.nchars -= cnt;
***************
*** 1540,1554 ****
  	if (tb == NULL)
  	    d->door_output_tail = NULL;
      }
!     DPOP;
!     return 1;
  }
  
  void save_door(DESC *d, char *info)
  {
    CBLK *qpt;
  
!   DPUSH;
    qpt = (CBLK *) alloc_lbuf("process_door_input");
    strcpy(qpt->cmd, info);
    qpt->hdr.nxt = NULL;
--- 1517,1530 ----
  	if (tb == NULL)
  	    d->door_output_tail = NULL;
      }
!     RETURN(1); /* #13 */
  }
  
  void save_door(DESC *d, char *info)
  {
    CBLK *qpt;
  
!   DPUSH; /* #14 */
    qpt = (CBLK *) alloc_lbuf("process_door_input");
    strcpy(qpt->cmd, info);
    qpt->hdr.nxt = NULL;
***************
*** 1557,1563 ****
    else
      d->door_input_tail->hdr.nxt = qpt;
    d->door_input_tail = qpt;
!   DPOP;
  }
  
  int process_door_input(DESC * d)
--- 1533,1539 ----
    else
      d->door_input_tail->hdr.nxt = qpt;
    d->door_input_tail = qpt;
!   DPOP; /* #14 */
  }
  
  int process_door_input(DESC * d)
***************
*** 1567,1577 ****
    int got;
    CBLK *qpt;
  
!   DPUSH;
    got = READ(d->door_desc, buf, sizeof(buf) - 1);
    if (got <= 0) {
!     DPOP;
!     return 0;
    }
    *(buf + got) = '\0';
    if (d->door_raw != NULL) {
--- 1543,1552 ----
    int got;
    CBLK *qpt;
  
!   DPUSH; /* #15 */
    got = READ(d->door_desc, buf, sizeof(buf) - 1);
    if (got <= 0) {
!     RETURN(0); /* #15 */
    }
    *(buf + got) = '\0';
    if (d->door_raw != NULL) {
***************
*** 1579,1591 ****
      if (pt == NULL) {
        if ((strlen(d->door_raw) + strlen(buf)) < LBUF_SIZE -1) {
  	strcat(d->door_raw,buf);
! 	DPOP;
! 	return 1;
        }
        else {
  	queue_string(d,"Output overflow from door.\r\n");
! 	DPOP;
! 	return 0;
        }
      }
      else {
--- 1554,1564 ----
      if (pt == NULL) {
        if ((strlen(d->door_raw) + strlen(buf)) < LBUF_SIZE -1) {
  	strcat(d->door_raw,buf);
! 	RETURN(1); /* #15 */
        }
        else {
  	queue_string(d,"Output overflow from door.\r\n");
! 	RETURN(0); /* #15 */
        }
      }
      else {
***************
*** 1597,1604 ****
  	if (*(pt+1) == '\0') {
  	  free_lbuf(d->door_raw);
  	  d->door_raw = NULL;
! 	  DPOP;
! 	  return 1;
  	}
  	else {
  	  strcpy(d->door_raw,pt+1);
--- 1570,1576 ----
  	if (*(pt+1) == '\0') {
  	  free_lbuf(d->door_raw);
  	  d->door_raw = NULL;
! 	  RETURN(1); /* #15 */
  	}
  	else {
  	  strcpy(d->door_raw,pt+1);
***************
*** 1609,1616 ****
        }
        else {
  	queue_string(d,"Output overflow from door.\r\n");
! 	DPOP;
! 	return 0;
        }
      }
    }
--- 1581,1587 ----
        }
        else {
  	queue_string(d,"Output overflow from door.\r\n");
! 	RETURN(0); /* #15 */
        }
      }
    }
***************
*** 1628,1649 ****
        *pt = save;
        d->door_raw = alloc_lbuf("empire_raw");
        if (d->door_raw == NULL) {
! 	DPOP;
! 	return 0;
        }
        strcpy(d->door_raw,pt);
      }
      else {
        d->door_raw = alloc_lbuf("empire_raw");
        if (d->door_raw == NULL) {
! 	DPOP;
! 	return 0;
        }
        strcpy(d->door_raw,buf);
      }
    }
!   DPOP;
!   return 1;
  }
  
  int 
--- 1599,1617 ----
        *pt = save;
        d->door_raw = alloc_lbuf("empire_raw");
        if (d->door_raw == NULL) {
! 	RETURN(0); /* #15 */
        }
        strcpy(d->door_raw,pt);
      }
      else {
        d->door_raw = alloc_lbuf("empire_raw");
        if (d->door_raw == NULL) {
! 	RETURN(0); /* #15 */
        }
        strcpy(d->door_raw,buf);
      }
    }
!   RETURN(1); /* #15 */
  }
  
  int 
***************
*** 1654,1668 ****
      char *p, *pend, *q, *qend;
      char *cmdsave;
  
!     DPUSH;
      cmdsave = mudstate.debug_cmd;
      mudstate.debug_cmd = (char *) "< process_input >";
  
      got = in = READ(d->descriptor, buf, sizeof buf);
      if (got <= 0) {
  	mudstate.debug_cmd = cmdsave;
!         DPOP;
! 	return 0;
      }
      if (!d->raw_input) {
  	d->raw_input = (CBLK *) alloc_lbuf("process_input.raw");
--- 1622,1635 ----
      char *p, *pend, *q, *qend;
      char *cmdsave;
  
!     DPUSH; /* #16 */
      cmdsave = mudstate.debug_cmd;
      mudstate.debug_cmd = (char *) "< process_input >";
  
      got = in = READ(d->descriptor, buf, sizeof buf);
      if (got <= 0) {
  	mudstate.debug_cmd = cmdsave;
! 	RETURN(0); /* #16 */
      }
      if (!d->raw_input) {
  	d->raw_input = (CBLK *) alloc_lbuf("process_input.raw");
***************
*** 1715,1722 ****
      if ( lost > 0 )
         d->input_lost += lost;
      mudstate.debug_cmd = cmdsave;
!     DPOP;
!     return 1;
  }
  
  void 
--- 1682,1688 ----
      if ( lost > 0 )
         d->input_lost += lost;
      mudstate.debug_cmd = cmdsave;
!     RETURN(1); /* #16 */
  }
  
  void 
***************
*** 1724,1730 ****
  {
      DESC *d, *dnext;
  
!     DPUSH;
      do_rwho(NOTHING, NOTHING, RWHO_STOP);
      DESC_SAFEITER_ALL(d, dnext) {
  	if (emergency) {
--- 1690,1696 ----
  {
      DESC *d, *dnext;
  
!     DPUSH; /* #17 */
      do_rwho(NOTHING, NOTHING, RWHO_STOP);
      DESC_SAFEITER_ALL(d, dnext) {
  	if (emergency) {
***************
*** 1745,1751 ****
  	}
      }
      close(sock);
!     DPOP;
  }
    
  void close_main_socket( void )
--- 1711,1717 ----
  	}
      }
      close(sock);
!     DPOP; /* #17 */
  }
    
  void close_main_socket( void )
***************
*** 1756,1764 ****
  void 
  emergency_shutdown(void)
  {
!     DPUSH;
      close_sockets(1, (char *) "Going down - Bye");
!     DPOP;
  }
  
  
--- 1722,1730 ----
  void 
  emergency_shutdown(void)
  {
!     DPUSH; /* #18 */
      close_sockets(1, (char *) "Going down - Bye");
!     DPOP; /* #18 */
  }
  
  
***************
*** 1782,1788 ****
  void 
  set_signals(void)
  {
!     DPUSH;
      signal(SIGALRM, sighandler);
      signal(SIGCHLD, sighandler);
      signal(SIGHUP, sighandler);
--- 1748,1754 ----
  void 
  set_signals(void)
  {
!     DPUSH; /* #19 */
      signal(SIGALRM, sighandler);
      signal(SIGCHLD, sighandler);
      signal(SIGHUP, sighandler);
***************
*** 1815,1833 ****
  	signal(SIGSYS, sighandler);
  #endif
      }
!     DPOP;
  }
  
  static void 
  unset_signals()
  {
      int i;
!     DPUSH;
  
      for (i = 0; i < NSIG; i++)
  	signal(i, SIG_DFL);
      abort();
!     DPOP;
  }
  
  static void 
--- 1781,1799 ----
  	signal(SIGSYS, sighandler);
  #endif
      }
!     DPOP; /* #19 */
  }
  
  static void 
  unset_signals()
  {
      int i;
!     DPUSH; /* #20 */
  
      for (i = 0; i < NSIG; i++)
  	signal(i, SIG_DFL);
      abort();
!     DPOP; /* #20 */
  }
  
  static void 
***************
*** 1835,1841 ****
  {
      int i;
  
!     DPUSH;
  
      /* If we are panicking, turn off signal catching and resignal */
  
--- 1801,1807 ----
  {
      int i;
  
!     DPUSH; /* #21 */
  
      /* If we are panicking, turn off signal catching and resignal */
  
***************
*** 1845,1862 ****
  	kill(getpid(), sig);
      }
      mudstate.panicking = 1;
!     DPOP;
  }
  
  void 
  log_signal(const char *signame)
  {
!     DPUSH;
      STARTLOG(LOG_PROBLEMS, "SIG", "CATCH")
  	log_text((char *) "Caught signal ");
      log_text((char *) signame);
      ENDLOG
!     DPOP;
  }
  
  #ifdef HAVE_STRUCT_SIGCONTEXT
--- 1811,1828 ----
  	kill(getpid(), sig);
      }
      mudstate.panicking = 1;
!     DPOP; /* #21 */
  }
  
  void 
  log_signal(const char *signame)
  {
!     DPUSH; /* #22 */
      STARTLOG(LOG_PROBLEMS, "SIG", "CATCH")
  	log_text((char *) "Caught signal ");
      log_text((char *) signame);
      ENDLOG
!     DPOP; /* #22 */
  }
  
  #ifdef HAVE_STRUCT_SIGCONTEXT
***************
*** 1906,1912 ****
  
  #endif
  
!     DPUSH;
  
      switch (sig) {
      case SIGALRM:		/* Timer */
--- 1872,1878 ----
  
  #endif
  
!     DPUSH; /* #23 */
  
      switch (sig) {
      case SIGALRM:		/* Timer */
***************
*** 1975,1984 ****
  	if (mudconf.sig_action == SA_RESIG)
  	    signal(sig, SIG_DFL);
  	else {
!             DPOP;
! 	    return;
          }
!         DPOP;
  	exit(1);
  
      case SIGABRT:		/* Coredump. */
--- 1941,1949 ----
  	if (mudconf.sig_action == SA_RESIG)
  	    signal(sig, SIG_DFL);
  	else {
! 	    VOIDRETURN; /* #23 */
          }
!         DPOP; /* #23 */
  	exit(1);
  
      case SIGABRT:		/* Coredump. */
***************
*** 1990,2009 ****
  	if (mudconf.sig_action == SA_RESIG)
  	    signal(sig, SIG_DFL);
  	else {
!             DPOP;
! 	    return;
          }
! 	DPOP;
  	exit(1);
  
      }
      signal(sig, sighandler);
      mudstate.panicking = 0;
-     DPOP;
  #ifdef VMS
!     return 1;
  #else
!     return;
  #endif
  }
  
--- 1955,1972 ----
  	if (mudconf.sig_action == SA_RESIG)
  	    signal(sig, SIG_DFL);
  	else {
! 	    VOIDRETURN; /* #23 */
          }
! 	DPOP; /* #23 */
  	exit(1);
  
      }
      signal(sig, sighandler);
      mudstate.panicking = 0;
  #ifdef VMS
!     RETURN(1); /* #23 */
  #else
!     VOIDRETURN; /* #23 */
  #endif
  }
  
***************
*** 2016,2027 ****
      char *rbuf, *p, *srv;
      int fd, red;
  
!     DPUSH;
  
      if (!(mudconf.control_flags & CF_ALLOW_RWHO)) {
  	queue_string(call_by, "RWHO is not available now.\r\n");
!         DPOP;
! 	return;
      }
      p = srv = mudconf.rwho_host;
      while ((*p != '\0') && ((*p == '.') || isdigit(*p)))
--- 1979,1989 ----
      char *rbuf, *p, *srv;
      int fd, red;
  
!     DPUSH; /* #24 */
  
      if (!(mudconf.control_flags & CF_ALLOW_RWHO)) {
  	queue_string(call_by, "RWHO is not available now.\r\n");
! 	VOIDRETURN; /* #24 */
      }
      p = srv = mudconf.rwho_host;
      while ((*p != '\0') && ((*p == '.') || isdigit(*p)))
***************
*** 2030,2037 ****
      if (*p != '\0') {
  	if ((hp = gethostbyname(srv)) == (struct hostent *) NULL) {
  	    queue_string(call_by, "Error connecting to rwho.\r\n");
!             DPOP;
! 	    return;
  	}
  	(void) bcopy(hp->h_addr, (char *) &addr.sin_addr, hp->h_length);
      } else {
--- 1992,1998 ----
      if (*p != '\0') {
  	if ((hp = gethostbyname(srv)) == (struct hostent *) NULL) {
  	    queue_string(call_by, "Error connecting to rwho.\r\n");
! 	    VOIDRETURN; /* #24 */
  	}
  	(void) bcopy(hp->h_addr, (char *) &addr.sin_addr, hp->h_length);
      } else {
***************
*** 2039,2046 ****
  
  	if ((f = inet_addr(srv)) == -1L) {
  	    queue_string(call_by, "Error connecting to rwho.\r\n");
!             DPOP;
! 	    return;
  	}
  	(void) bcopy((char *) &f, (char *) &addr.sin_addr, sizeof(f));
      }
--- 2000,2006 ----
  
  	if ((f = inet_addr(srv)) == -1L) {
  	    queue_string(call_by, "Error connecting to rwho.\r\n");
! 	    VOIDRETURN; /* #24 */
  	}
  	(void) bcopy((char *) &f, (char *) &addr.sin_addr, sizeof(f));
      }
***************
*** 2051,2071 ****
      fd = tf_topen(TLI_TCP, O_RDWR);
      if (fd = <0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
!         DPOP;
! 	return;
      }
      if (t_bind(fd, NULL, NULL) < 0) {
  	tf_close(fd);
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
!         DPOP;
! 	return;
      }
      call = (struct t_call *) t_alloc(fd, T_CALL, T_ALL);
      if (call == NULL) {
  	tf_close(fd);
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
!         DPOP;
! 	return;
      }
      bcopy(addr, pbuf->addr.buf, sizeof(struct sockaddr_in));
      call->addr.len = sizeof(struct sockaddr_in);
--- 2011,2028 ----
      fd = tf_topen(TLI_TCP, O_RDWR);
      if (fd = <0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
! 	VOIDRETURN; /* #24 */
      }
      if (t_bind(fd, NULL, NULL) < 0) {
  	tf_close(fd);
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
! 	VOIDRETURN; /* #24 */
      }
      call = (struct t_call *) t_alloc(fd, T_CALL, T_ALL);
      if (call == NULL) {
  	tf_close(fd);
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
! 	VOIDRETURN; /* #24 */
      }
      bcopy(addr, pbuf->addr.buf, sizeof(struct sockaddr_in));
      call->addr.len = sizeof(struct sockaddr_in);
***************
*** 2074,2081 ****
      fd = tf_socket(AF_INET, SOCK_STREAM);
      if (fd < 0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
!         DPOP;
! 	return;
      }
  #endif
  
--- 2031,2037 ----
      fd = tf_socket(AF_INET, SOCK_STREAM);
      if (fd < 0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
! 	VOIDRETURN; /* #24 */
      }
  #endif
  
***************
*** 2083,2104 ****
      if (t_connect(fd, call, NULL) < 0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
          tf_close(fd);
!         DPOP;
!         return;
      }
  
      if (ioctl(fd, I_PUSH, "tirdwr") < 0) {
          queue_string(call_by, "Error in connecting to rwhod.\r\n");
          tf_close(fd);
!         DPOP;
!         return;
      }
  #else
      if (connect(fd, &addr, sizeof(addr)) < 0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
  	tf_close(fd);
!         DPOP;
! 	return;
      }
  #endif
      rbuf = alloc_lbuf("dump_rusers");
--- 2039,2057 ----
      if (t_connect(fd, call, NULL) < 0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
          tf_close(fd);
!         VOIDRETURN; /* #24 */
      }
  
      if (ioctl(fd, I_PUSH, "tirdwr") < 0) {
          queue_string(call_by, "Error in connecting to rwhod.\r\n");
          tf_close(fd);
!         VOIDRETURN; /* #24 */
      }
  #else
      if (connect(fd, &addr, sizeof(addr)) < 0) {
  	queue_string(call_by, "Error in connecting to rwhod.\r\n");
  	tf_close(fd);
! 	VOIDRETURN; /* #24 */
      }
  #endif
      rbuf = alloc_lbuf("dump_rusers");
***************
*** 2110,2116 ****
  
      free_lbuf(rbuf);
      tf_close(fd);
!     DPOP;
  }
  #endif /* LOCAL_RWHO_SERVER */
  
--- 2063,2069 ----
  
      free_lbuf(rbuf);
      tf_close(fd);
!     VOIDRETURN; /* #24 */
  }
  #endif /* LOCAL_RWHO_SERVER */
  
***************
*** 2189,2193 ****
        }
      }
    }
!   return (new_port);
  }
--- 2142,2146 ----
        }
      }
    }
!   return new_port;
  }
