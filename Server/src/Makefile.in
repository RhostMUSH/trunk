# Makefile for RhostMUSH 3.2.0
#
# Search for the text 'CONFIGURATION SECTION' and make any changes needed
# there.

SHELL=/bin/sh
srcdir = .
VPATH = .
CC = @CC@
# CPP = @CPP@	# This is broken in autoconf.  Sigh.
CPP = $(CC) -E
LIBS = @LIBS@
LIBOBJS = @LIBOBJS@

# If you wish to debug the code, run under this
#OPTIM = -g -O
# Without debug information run this
OPTIM = -O

# UnterMUD database layer.
UDBA_SRC = udb_acache.c udb_achunk.c udb_attr.c
UDBA_OBJ = udb_acache.o udb_achunk.o udb_attr.o
UDBA_FLG = -DCACHE_ATTRS

UDBO_SRC = udb_ocache.c udb_ochunk.c udb_obj.c
UDBO_OBJ = udb_ocache.o udb_ochunk.o udb_obj.o
UDBO_FLG = -DCACHE_OBJS

UDB_SRC = udb_misc.c
UDB_OBJ = udb_misc.o
UDB_INC	= udb.h udb_defs.h

# Source common to netmush and standalone code
COM_SRC	=
COM_OBJ	=

# Everything needed to use the database in standalone mode.
SA_SRC	= sa-db.c sa-db_rw.c sa-boolexp.c sa-unparse.c sa-compress.c \
	  sa-pred.c sa-stringu.c sa-conf.c sa-log.c sa-object.c \
	  sa-vattr.c sa-htab.c sa-player_c.c sa-flags.c debug.c
SA_OBJ	= sa-db.o sa-db_rw.o sa-boolexp.o sa-unparse.o sa-compress.o \
	  sa-pred.o sa-stringu.o sa-conf.o sa-log.o sa-object.o \
	  sa-vattr.o sa-htab.o sa-player_c.o sa-flags.o debug.o

# Distribution source files
D_SRC	= news.c mail.c mailfix.c debug.c senses.c \
	  create.c game.c help.c look.c match.c move.c player.c predicates.c \
	  rob.c set.c speech.c wiz.c walkdb.c timer.c boolexp.c log.c cque.c \
	  unparse.c eval.c command.c wild.c netcommon.c functions.c vattr.c \
	  db.c db_rw.c compress.c stringutil.c object.c conf.c flags.c htab.c \
	  compat.c file_c.c player_c.c bsd.c alloc.c empire.c autoreg.c
D_OBJ	= news.o mail.o mailfix.o debug.o senses.o \
	  create.o game.o help.o look.o match.o move.o player.o predicates.o \
	  rob.o set.o speech.o wiz.o walkdb.o timer.o boolexp.o log.o cque.o \
	  unparse.o eval.o command.o wild.o netcommon.o functions.o vattr.o \
	  db.o db_rw.o compress.o stringutil.o object.o conf.o flags.o htab.o \
          compat.o file_c.o player_c.o bsd.o alloc.o empire.o autoreg.o
D_INC	= news.h mail.h debug.h \
	  copyright.h flags.h help.h htab.h interface.h match.h functions.h \
	  command.h rwho_clilib.h  config.h db.h externs.h mudconf.h misc.h \
	  vattr.h file_c.h fifo.h alloc.h attrs.h empire.h

# RWHO source files
WHO_SRC	= rwho_clilib.c
WHO_OBJ	= rwho_clilib.o
WHO_FLG	= -DRWHO_IN_USE
RWHO_FL	= -DLOCAL_RWHO_SERVER

# Version number routine
VER_SRC	= version.c
VER_OBJ	= version.o
VER_INC	= patchlevel.h
VER_FLG	= -DMUSH_BUILD_DATE="\"`date`\"" \
	  -DMUSH_BUILD_NUM="\"`sh ./buildnum.sh`\""

# ===================== CONFIGURATION SECTION ====================
#
# Select the correct C compiler.  Whatever you choose, it must be able
# to grok ANSI C (function prototypes)
#
#-----CC or GCC (must be able to grok function prototypes)
#
DEFS =
#
#-----GCC on some Linux boxes are broken with regards to the below
#
#DEFS = -D__inet_addr=inet_addr -D__inet_ntoa=inet_ntoa
#
#-----CC on a NeXT system, really weird derivative of GCC
#
#DEFS = -DNEXT -DNEED_STRDUP
#
#-----GCC if the libraries were built for a pcc-derived cc compiler
#     (most systems)
#
#DEFS = -fpcc-struct-return -Wall
#
#-----GCC with GCC-compatible libraries if you want verbose error messages
#
#DEFS = -Wall
#
#-----HP-UX C compiler
#
#DEFS = -w +Obb800 -Aa -D_INCLUDE_POSIX_SOURCE -D_INCLUDE_HPUX_SOURCE -D_INCLUDE_XOPEN_SOURCE
#
#-----MIPS C compiler (also DEC 3xxx, Prime EXL7xxx)
#
#DEFS = -signed
#-----Solaris.
#
#DEFS = -I/usr/ucbinclude -DSOLARIS
#MORELIBS =  -lresolv -lsocket -lnsl
#

# Libraries.  Use the second line if you want to use the resolver to get
# hostnames and your libc doesn't use it already.  If you use it, you'd
# better have your nameserver working or things may hang for a while when
# people try to login from distant sites.  Use the third line if you're running
# on a SysV-ish system and BSD support isn't built in to the standard libc.
#
MORELIBS	= -lm -lrt
#MORELIBS	= -lm -lrt -lnsl -lsocket -L/usr/ucblib -lucb	# Mips

# Set this to the directory where the MUSH game lives.
GAME	= /usr/games/lib/mush

# If you want to be able to transmit RWHO data, uncomment these lines:
WHO_S	= $(WHO_SRC)
WHO_O	= $(WHO_OBJ)
WHO_F	= $(WHO_FLG)

# If you want to allow the local RWHO command (only recommended if you are on
# the same machine or subnet as the RWHO server), uncomment these lines:
#RWHO_F	= $(RWHO_FL)

# Select the level at which you want cacheing to be performed.  Prior releases
# of MUSH only supported attribute-level cacheing.
# 
# ----- Attribute-level cacheing.
#UDB_S	= $(UDBA_SRC) $(UDB_SRC)
#UDB_O	= $(UDBA_OBJ) $(UDB_OBJ)
#UDB_F	= $(UDBA_FLG)

# ----- Object-level cacheing.
UDB_S	= $(UDBO_SRC) $(UDB_SRC)
UDB_O	= $(UDBO_OBJ) $(UDB_OBJ)
UDB_F	= $(UDBO_FLG)

# Select the networking support you have.  Currently only BSD networking
# is supported.
#
# ----- BSD networking
NET_S	= bsd.c
NET_O	= bsd.o

# ================== END OF CONFIGURATION SECTION =================


DEBUG	= $(OPTIM)
ALLCFLAGS = $(CFLAGS) $(DEBUG) $(DEFS) $(MOREDEFS) $(WHO_F) $(RWHO_F) $(RLIM_F) $(UDB_F)

# Auxiliary source files: only used by offline utilities.
# This one is for NON-html auto help creation
AUX_SRC	= dbconvert.c mkindx.c unsplit.c
#
# Use this one if you intend to auto create help files via html.
#AUX_SRC	= dbconvert.c mkindx.c mkhtml.c unsplit.c


#Auxiliary files
A_INST	= README NOTES HIGHLIGHTS CREDITS CHANGES
A_TXT	= badsite.txt connect.txt create_reg.txt down.txt guest.txt help.txt \
	  motd.txt news.txt newuser.txt quit.txt register.txt wizhelp.txt \
	  wizmotd.txt full.txt
A_SH	= db_load db_unload db_check buildnum.sh
A_RT	= Startmush mush.config
A_CONF	= netmush.conf alias.conf compat.conf
A_MISC	= buildnum.data
A_VMS	= vms_dbm.c vms_dbm.h startmush.com compile.com link.com
A_AUTO	= configure configure.in autoconf.h.in Makefile.in .depend
AUXIL	= $(A_INST) $(A_TXT) $(A_SH) $(A_CONF) $(A_MISC) $(A_RT) $(A_VMS) \
	  $(A_AUTO)

#Installation files
INSTALL_PROG	= testrhost testrhost.debugmon murboot dbconvert mkhtml mkindx db_load db_unload db_check $(R_SERV)
INSTALL_TARG	= $(INSTALL_PROG) *.txt *.conf
REINSTALL_TARG	= $(INSTALL_PROG) help.txt wizhelp.txt alias.conf compat.conf

#compilation source files
ALLSRC	= $(D_SRC) $(UDB_SRC) $(UDBA_SRC) $(UDBO_SRC) $(VER_SRC) \
	  $(WHO_SRC) $(COM_SRC) $(SA_SRC) $(AUX_SRC) $(LIB_SRC)
ALLINC	= $(D_INC) $(UDB_INC) $(VER_INC) $(NET_INC) $(LIB_INC)
SRC	= $(D_SRC) $(COM_SRC) $(UDB_S) $(WHO_S)
OBJ	= $(D_OBJ) $(COM_OBJ) $(UDB_O) $(WHO_O)

# Files in the standard distribution
DIST	= $(ALLSRC) $(ALLINC) $(AUXIL)

OUT	= testrhost testrhost.debugmon murboot mkhtml mkindx dbconvert

.c.o:
	$(CC) $(ALLCFLAGS) -c $<

# paths is likely to remain broken
all: $(OUT)

new-install: $(INSTALL_TARG)
	-mkdir $(GAME)
	cp $(INSTALL_TARG) $(GAME)

install: $(REINSTALL_TARG)
	cp $(REINSTALL_TARG) $(GAME)

TAGS: *.c *.h
	etags *.c *.h

mkhtml: mkhtml.o
	$(CC) $(ALLCFLAGS) -o mkhtml mkhtml.o

mkindx: mkindx.o
	$(CC) $(ALLCFLAGS) -o mkindx mkindx.o

unsplit: unsplit.o
	$(CC) $(ALLCFLAGS) -o unsplit unsplit.o

dbconvert: dbconvert.o $(SA_OBJ) $(UDB_O) $(ALLOC_O)$(LIBOBJS)
	$(CC) $(ALLCFLAGS) -o dbconvert dbconvert.o $(SA_OBJ) $(COM_OBJ) $(UDB_O) $(ALLOC_O) $(LIBS) $(MORELIBS) $(LIBOBJS)

saber:	$(SRC)
	#load $(SRC)

saber-o: $(OBJ) $(LIBOBJS)
	#load $(OBJ) $(VER_OBJ) $(LIBS) $(MORELIBS)

debugmon.o: debugmon.c debug.h
	$(CC) -g $(ALLCFLAGS) -c debugmon.c

testrhost.debugmon: debugmon.o debug.o
	$(CC) -o testrhost.debugmon debugmon.o debug.o

testrhost: $(OBJ) $(LIBOBJS)
	$(CC) $(ALLCFLAGS) $(VER_FLG) -c $(VER_SRC)
	-mv -f testrhost testrhost~
	$(CC) $(ALLCFLAGS) -o testrhost $(OBJ) -lgdbm $(LIBOBJS) $(VER_OBJ) $(LIBS) $(MORELIBS)

dist.tar.Z: $(DIST)
	-rm -f buildnum.data
	echo 0 > buildnum.data
	tar cvhf - $(DIST) | compress -c > dist.tar.Z.NEW
	mv dist.tar.Z.NEW dist.tar.Z

depend: $(ALLSRC) unsplit
	for i in $(D_SRC) $(COM_SRC) $(SA_SRC) $(UDBA_SRC) $(UDBO_SRC) $(AUX_SRC) $(WHO_SRC) $(LIB_SRC); do $(CPP) $(ALLCFLAGS) -M $$i; done | sed -e 's:/usr[^ ]* ::g' | ./unsplit > .depend~
	mv .depend~ .depend

index: help.indx news.indx wizhelp.indx error.indx

# Note Uncomment these ONLY if you wish to implement ALPHA code.
# The door functionality is considered ALPHA code and can and will
# bring down the server until officially released.   It crashes
# the server once every 100 or so attempts on an average but
# with no rhyme or reason.  It is possibly a compile-time error
# and we are currently looking into it.
# Until then, use at your own risk.
#
#index: help.indx news.indx wizhelp.indx error.indx doorconf.indx
#doorconf.indx: doorconf.txt
#	./mkindx doorconf.txt doorconf.indx
#

error.indx: error.txt
	./mkindx error.txt error.indx

help.indx: help.txt
	./mkindx help.txt help.indx

news.indx: news.txt
	./mkindx news.txt news.indx

wizhelp.indx: wizhelp.txt
	./mkindx wizhelp.txt wizhelp.indx

verify:
	runtest --tool mush --src ./testsuite

realclean:
	-rm -f .depend *.o a.out core gmon.out mush.*log mush.*sum $(OUT) testrhost~ 
	echo '' > .depend

clean:
	-rm -f .depend *.o a.out core gmon.out mush.*log mush.*sum $(OUT)
	echo '' > .depend

include .depend

