#!/bin/sh
#
#	Startmush - Kick off the netmush process.
#
lc_chk=`echo "$1"|tr '[:upper:]' '[:lower:]'`
case "${lc_chk}" in
   -h|--help|-help) # help entry
      echo "Syntax: $0 [-h|-f|-i|-cyg]"
      echo "        -s   -- show status of your RhostMUSH"
      echo "        -h   -- show this screen"
      echo "        -f   -- force Startmush to overwrite shared memory segment."
      echo "        -i   -- reindex all txt files then exit."
      echo "        -v   -- show version of RhostMUSH you are running."
      echo "        -k   -- attempt to gracefully shutdown your mush, then terminate if it can't."
      echo "        -cyg -- force a CYGWIN/Win10-Bash run for Startmush"
      exit 0
      ;;
   -s) # status
       . ./mush.config
       gl_shm=`echo ${DEBUG_ID}|awk '{printf("%x", $0)}'`
       gl_shmchk=`ipcs -m 2>/dev/null|grep "${gl_shm}"`
       lc_port=`grep ^port ${GAMENAME}.conf|awk '{print $2}'`
       lc_apiport=`grep ^api_port ${GAMENAME}.conf|awk '{print $2}'`
       lc_debugid=`grep ^debug_id ${GAMENAME}.conf|awk '{print $2}'`
       if [ -f ../stunnel/stunnel.conf ]
       then
          lc_ssl=`grep "^accept = [0-9]" ../stunnel/stunnel.conf|cut -f3 -d' '`
       fi

       if [ -f ../bin/netrhost ]
       then
          echo "-- Version -------------------------------------------------------------------"
         ./netrhost -v
          echo "----- port: ${lc_port}"
          if [ -n "${lc_apiport}" ]
          then
             echo "----- apiport: ${lc_apiport}"
          fi
          if [ -n "${lc_ssl}" ]
          then
             echo "----- SSL: ${lc_ssl}"
          fi
          echo "----- debugid: ${lc_debugid}"
          echo "----- shared memory id: ${gl_shm} [${DEBUG_ID}]"
          echo "------------------------------------------------------------------------------"
       else
          echo "Netrhost is either not compiled or improperly configured."
          echo "Please type:  make clean; make source"
          exit 1
       fi

       ps -p `cat netrhost.pid` >/dev/null 2>&1
       if [ $? -ne 0 ]
       then
          echo "Your RhostMUSH is not currently running."
          exit 1
       else
          echo "-- Process -------------------------------------------------------------------"
          ps -lp `cat netrhost.pid`
          echo "------------------------------------------------------------------------------"
       fi

       netstat -V >/dev/null 2>&1
       if [ $? -eq 0 ]
       then
          echo "-- Ports/Processes -----------------------------------------------------------"
          netstat -anp|grep `cat netrhost.pid`
          echo "------------------------------------------------------------------------------"
       else
          ss -V > /dev/null 2>&1
          if [ $? -eq 0 ]
          then
             echo "-- Ports/Processes -----------------------------------------------------------"
             ss -nlpt `cat netrhost.pid`
             echo "------------------------------------------------------------------------------"
          fi
       fi

       ipcs -V >/dev/null 2>&1
       if [ $? -eq 0 ]
       then
          echo "-- Shared Memory -------------------------------------------------------------"
          echo "Shared Memory Segment ${DEBUG_ID} [${gl_shm}]"
          ipcs -m|egrep "(key|${gl_shm})"
          echo "------------------------------------------------------------------------------"
       fi

       echo "-- Last Database Backup ------------------------------------------------------"
       if [ -f data/${GAMENAME}.db.flat ]
       then
          ls -l data/${GAMENAME}.db.flat
       elif [ -f prevflat/${GAMENAME}.db.flat ]
       then
          ls -l prevflat/${GAMENAME}.db.flat
       else
          echo "*** NO BACKUPS DETECTED. ***"
          echo "Run: @dump/flat from within your game.  Set a cron to run this daily." 
       fi
       echo "------------------------------------------------------------------------------"

       exit 0
       ;;
   -v) # version
       ./netrhost -v
       exit 0
       ;;
   -k) # kill process
       ps -p `cat netrhost.pid` > /dev/null 2>&1
       if [ $? -eq 0 ]
       then
          echo "Killing following process."
          ps -l -p `cat netrhost.pid`
          kill -USR2 `cat netrhost.pid`
          sleep 2
          ps -p `cat netrhost.pid` > /dev/null 2>&1
          if [ $? -eq 0 ]
          then
             echo "Process is still not shutdown.  Attempting to gently terminate."
             kill -TERM `cat netrhost.pid`
             sleep 2
             ps -p `cat netrhost.pid` > /dev/null 2>&1
             if [ $? -eq 0 ]
             then
                echo "Process is still not shutdown.  Attempting force kill.  This will likely corrupt your database."
                echo "First attempting a forced flatfile dump."
                kill -HUP `cat netrhost.pid` 
                echo "Waiting 10 seconds to ensure a safe flatfile."
                sleep 10
                echo "Killing the process with immediate death."
                kill -9 `cat netrhost.pid`
                sleep 2
                ps -p `cat netrhost.pid` > /dev/null 2>&1
                if [ $? -eq 0 ]
                then
                   echo "We were unable to kill the process.  The PID is `cat netrhost.pid`"
                else
                   echo "Process has been hard-terminated.  DB may be corrupt.  Load from flatfile if it is."
                fi
             else
                echo "Process has successfully been terminated with TERM.  Emergency flatfile will end in .TERM"
             fi
          else
             echo "Process has been gracefully shutdown."
          fi
       else
          echo "No process is currently running."
       fi
       exit 0
       ;;
   -i) # reindex
      for files in `grep -l '^& ' txt/*.txt`
      do
         basename /dev/null > /dev/null 2>&1
         if [ $? -eq 0 ]
         then
            lc_basename=`basename ${files}`
         else
            lc_basename=`echo "${files}"|grep -o '[^/]*$'`
         fi
         lc_indx="`echo "${files}"|cut -f1 -d"."`.indx"
         lc_mkindx=`./mkindx "${files}" "${lc_indx}"`
         echo "${lc_basename}: ${lc_mkindx}"
      done
      exit 0
      ;;
esac 
CYGWIN=0
if [ "$1" = "-cyg" -o "$2" = "-cyg" ]
then
   CYGWIN=1
fi
# enforce CYGWIN mode for Windows 10 bash
lc_chk1=`cat /proc/version 2>/dev/null|grep -c "Microsoft"`
lc_chk2=`cat /proc/version 2>/dev/null|grep -ci "cygwin"`
if [ ${lc_chk1} -gt 0 -o ${lc_chk2} -gt 0 ]
then
   CYGWIN=1
fi
PATH=/usr/local/bin:/usr/ucb:/bin:/usr/bin:.; export PATH
# You need this library path for the new gdbm
# LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../src/gdbm:../src/gdbm/.libs
# export LD_LIBRARY_PATH
#
# enable core dumps
ulimit -c unlimited

# set up libsegfault if it exists
lc_libchk=`ldconfig -N -v 2>/dev/null|grep -ci libsegfault`
if [ ${lc_libchk} -gt 0 ]
then
   export LD_PRELOAD=libSegFault.so
fi

if [ ! -h netrhost ];
then
  echo "nethrost link is missing! Did you run 'make links' after compile?"
  exit 1;
fi
binarydetail="`file netrhost`"
case "$binarydetail" in
  *broken*)
  echo "netrhost binary not found! Did you run 'make links' after compile?"
  exit 1;
  ;;
esac
awk '{ if ( match($0,"\r")) exit 1 }' < mush.config > /dev/null 2>&1
if [ $? -gt 0 ]
then
   echo "mush.config has apparent linefeeds inbedded.  This can happen"
   echo "if you are transfering from a windows machine to a unix machine."
   echo "We will strip line feeds now."
   mv -f mush.config mush.config.orig
   cat mush.config.orig|tr -d '\015' > mush.config
   chmod 750 mush.config
   echo "Stripped."
fi
. mush.config

awk '{ if ( match($0,"\r")) exit 1 }' < ${GAMENAME}.conf > /dev/null 2>&1
if [ $? -gt 0 ]
then
   echo "${GAMENAME}.conf has apparent linefeeds inbedded.  This can happen"
   echo "if you are transfering from a windows machine to a unix machine."
   echo "We will strip line feeds now."
   mv -f ${GAMENAME}.conf ${GAMENAME}.conf.orig
   cat ${GAMENAME}.conf.orig|tr -d '\015' > ${GAMENAME}.conf
   echo "Stripped."
fi
#
#	Make sure there isn't aready a MUSH running.
#
lc_pid_chk=0
if [ -f ${GAMENAME}.pid ]
then
   lc_pid=`cat netrhost.pid`
   lc_pid_chk=`ps -p ${lc_pid}|grep -c rhost`
fi

gl_shm=`echo ${DEBUG_ID}|awk '{printf("%x", $0)}'`
gl_shmchk=`ipcs -m 2>/dev/null|grep "${gl_shm}"`
lc_port=`grep ^port ${GAMENAME}.conf|awk '{print $2}'`
lc_debugid=`grep ^debug_id ${GAMENAME}.conf|awk '{print $2}'`

if [ ${lc_pid_chk} -gt 0 ]
then
   echo "Rhost is already running on pid ${lc_pid} [port: ${lc_port}, debug id: ${lc_debugid}]"
   ps -lp ${lc_pid}
   echo ""
   if [ -f /usr/bin/ipcs ]
   then
      echo "Shared Memory Segment ${DEBUG_ID} [${gl_shm}]"
      ipcs -m|egrep "(key|${gl_shm})"
      echo ""
   fi
   echo "If you wish to kill this process at the shell, please do the following:"
   echo "kill -USR2 ${lc_pid}"
   exit 1
fi
if [ -n "${gl_shmchk}" ]
then
   if [ -f /usr/bin/ipcs ]
   then
      echo "Shared Memory Segment [debug_id: ${DEBUG_ID}] [shmid: ${gl_shm}]"
      ipcs -m|egrep "(key|${gl_shm})"
      echo ""
   fi
   if [ "$1" != "-f" ]
   then
      echo "There is an existing shared memory segment that the mush will try to use."
      echo "If this is because you kill -9'd your mush process then you may need"
      echo "to start your mush with 'Startmush -f'."
      echo ""
      exit 1
   else
      echo "Existing shared memory space detected.  Reusing space shown above with '-f' force option."
   fi
fi

if [ ! -r ./netrhost ]; then
   echo "Hmm, I can't seem to find netrhost in this directory."
   echo "You might need to 'cd .. ; make links'"
   exit 1;
fi

./mkindx ${TXT_DIR}/news.txt ${TXT_DIR}/news.indx
./mkindx ${TXT_DIR}/help.txt ${TXT_DIR}/help.indx
./mkindx ${TXT_DIR}/wizhelp.txt ${TXT_DIR}/wizhelp.indx
./mkindx ${TXT_DIR}/error.txt ${TXT_DIR}/error.indx
./mkindx ${TXT_DIR}/doorconf.txt ${TXT_DIR}/doorconf.indx
./compress_logs.sh
# Only comment out this line if you intend to set up an HTML interface 
# for the mush help.
#./mkhtml ${TXT_DIR}/help.txt ${TXT_DIR}/help.indx /usr/local/etc/httpd/htdocs/users/rhost/autohelp/help.html
#
#	Check for a panic dump.  If there is one and it is good, copy
#	it on top of the last checkpoint DB written by mush.  If it is bad,
#	just delete it.
#
if [ -r $CRASH_DB ]; then
	end="`tail -1 $CRASH_DB`"
	if [ "$end" = "***END OF DUMP***" ]; then
		mv $CRASH_DB $NEW_DB
	else
		rm $CRASH_DB
		echo "Warning: PANIC dump corrupt using older db."
		echo "Warning: PANIC dump failed on "`date` | mail $OWNER
	fi
fi
#
#	Save a copy of the previous input database and log.
#
if [ -r $INPUT_DB ]; then
	mv -f $INPUT_DB $SAVE_DB
fi
if [ -r $MUSHLOGNAME.old ]; then
	echo "Archiving old log."
	LOGARCHIVE=$MUSHLOGNAME.`date +%Y%m%d`_`date +%H%M`
	mv -f $MUSHLOGNAME.old $LOGARCHIVE
	gzip $LOGARCHIVE
	mv -f $LOGARCHIVE.gz oldlogs
fi
if [ -r $MUSHLOGNAME ]; then
   mv -f $MUSHLOGNAME $MUSHLOGNAME.old
fi
#
#	If we have a good checkpoint database, make it the input database.
#	If not, use the backup of the input database.
#
if [ -r $NEW_DB ]; then
	mv $NEW_DB $INPUT_DB
elif [ -r $SAVE_DB ]; then
	cp $SAVE_DB $INPUT_DB
fi
#
#	Kick off MUSH
#
# The backup_flat.sh is a script that basically daily makes a backup of
# the flatfile.  File is included in distribution.
(nohup ./backup_flat.sh > /dev/null 2>&1 &)
#
# Make sure the port '42010' matches the port of the debugmon.
# In your mushname.conf file!
gl_newdb=0
if [ "$1" = "-f" ]
then
   DEBUG_OVERRIDE=1
   export DEBUG_OVERRIDE
fi
if [ -f "$INPUT_DB" ]
then
   if [ ${CYGWIN} -eq 1 ]
   then
      (nohup ./netrhost $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
   else
      (nohup ./netrhost.debugmon ${DEBUG_ID} ./netrhost $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
   fi
else
   echo "There was no valid database information found."
   echo "Is this the first time that you are trying to start the mush? (Y/N) : "|tr -d '\012'
   read ANS
   if [ "$ANS" = "y" -o "$ANS" = "Y" ]
   then
      echo "Do you have a flatfile to load into this mush? (Y/N): "|tr -d '\012'
      read ANS
      if [ "$ANS" = "y" -o "$ANS" = "Y" ]
      then
         loop=0
         nogen=0
         while [ $loop -eq 0 ]
         do
            echo "Enter flatfile name (including full path), the string 'LOAD' (to load blank db), or just hit <ENTER> to search for a flatfile"
            echo "Make selection now: "|tr -d '\012'
            read ANS
            if [ "$ANS" = "LOAD" ]
            then
               break
            fi
            if [ -z "$ANS" ]
            then
               if [ $nogen -eq 0 ]
               then
                  mycd=`pwd`
                  cd ../../..
                  lg_path=`pwd`
                  cd ${mycd}
                  echo "Doing search... please wait..."|tr -d '\012'
                  lg_find="`find ${lg_path} -type f -exec ./findit.sh {} \; 2>/dev/null`"
                  echo "...completed."
               fi
               if [ -z "${lg_find}" ]
               then
                  echo "No flatfiles found in ${lg_path}.  Enter flatfile name (including full path): "|tr -d '\012'
                  read ANS
               else
                  cntr=1
                  echo "----------------------------------"
                  for i in ${lg_find}
                  do
                     i_cut=`echo "$i"|cut -f2- -d"/"`
                     echo "${cntr}: ${lg_path}/${i_cut}"
                     cntr=`expr $cntr + 1`
                  done
                  echo "----------------------------------"
                  echo "Select filename number: "|tr -d '\012'
                  read ANSIT
                  ANS=`echo $lg_find|cut -f $ANSIT -d" "`
               fi
            fi
            if [ -f "$ANS" ]
            then
               echo "Loading in ${ANS}..."
               ./db_load data/netrhost.gdbm ${ANS} data/netrhost.db
               loop=1
            else
               echo "File not found.  Try again."
               nogen=1
            fi
         done
         if [ -f "$INPUT_DB" ]
         then
            if [ ${CYGWIN} -eq 1 ]
            then
               (nohup ./netrhost $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
            else
               (nohup ./netrhost.debugmon ${DEBUG_ID} ./netrhost $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
            fi
         else
            echo "The database wasn't loaded properly.  Going to initialize a new db.  RETURN to continue, ^C to abort."
            read ANS
            if [ ${CYGWIN} -eq 1 ]
            then
               (nohup ./netrhost -s $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
            else
               (nohup ./netrhost.debugmon ${DEBUG_ID} ./netrhost -s $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
            fi
            gl_newdb=1
         fi
      else
         if [ ${CYGWIN} -eq 1 ]
         then
            (nohup ./netrhost -s $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
         else
            (nohup ./netrhost.debugmon ${DEBUG_ID} ./netrhost -s $GAMENAME.conf > $MUSHLOGNAME 2>&1 &)
         fi
         gl_newdb=1
      fi
      if [ ${gl_newdb} -eq 1 ]
      then
         echo "Have fun with your new mush.  #1's initial password will be 'Nyctasia'"
      else
         echo "Have fun with your imported db.  If you don't remember #1's password set newpass_god 777 in your netrhost.conf file."
         echo "Once your game is up remove the newpass_god parameter as this resets #1's password if enabled on every reboot!"
      fi
      echo "Don't forget to @shutdown as soon as you connect to save the new database."
   else
      echo "You have some trouble with your database files.  Please review the problem."
   fi
fi
