& help
  This is the RhostMUSH online help facility for wizard commands and topics.
  The information provided by this command is generally not useful for
  anyone other than wizards and game maintainers, as the features described
  here are only accessable to characters whose ROYALTY bit is set, or to those
  who have access to the directory where the RhostMUSH data files reside.
  
  Syntax of help command:  wizhelp [<command/topic>]
  
  To get a list of RhostMUSH wizard topics:     wizhelp topics
  To get a list of RhostMUSH wizard commands:   wizhelp commands
  To get a list of RhostMUSH wizard functions:  wizhelp functions
  To get a list of RhostMUSH wizard flags:      wizhelp flags
  
  You may use '*' or '?' for wildcard searches of topics.
  
  You may use the /search switch for content.  Eg: wizhelp/search *mail*
  
  Command syntax help is available by issuing /syntax. Eg: @emit/syntax
  
  The multi-tier bit order can be seen with 'help control'
  
  If there are any errors in the help text, please notify a Wizard.
  
  See Also: help, and +help.

& news
  There exists various help files in juncture to help to wizard commands
  with the news system.  The syntax works using switches like:
           news/usermem
  
  The following wizard topics exist for news:
       flat files         database           groups       cmdlist
  
  The following commands exist for the news system.  They can be seen
  by typing: help news <command>
  
       extend      expire      groupadd       groupdel       groupinfo      
       adminlock   grouplimit  on             off            postlock    
       postlist    readlock    subscribe      userlimit      userinfo  
       usermem     unsubscribe yank           articlelife
  
  For help on any of these topics: wizhelp news <topic>
  For help on user level topics: help news
  News DB related commands are under: wizhelp newsdb

& newsdb
  there exists various help files in juncture to db referencing for 
  the news.  The syntax works using switches like: 
          newsdb/dbck
  
  The following wizard topics exist for newsdb:
       cmdlist
  
  The following commands exist for the newsdb command.  They can be seen
  by typing: wizhelp newsdb <command>
  
       dbck      dbinfo         load           unload
  
  For help on any of these topics: wizhelp newsdb <topic>
  For help on other wizard level news topics: wizhelp news
  For help on user level news topics: help news

& newsdb cmdlist
  The following are a list of wizard related news DB commands:
  
  newsdb/dbck       - Perform consistancy check on the news database
  newsdb/dbinfo     - Obtain statistics on the news database
  newsdb/load       - Load the gdbm database from the flatfile
  newsdb/unload     - Unload the gdbm database into the flatfile
  
  Help is available on each of these switches by typing: 
            wizhelp newsdb <switch>

& news cmdlist
  The following is a list of wizard related news commands:
  
  news/adminlock    - Set the group administrator(s) in lock form.
  news/articlelife  - Change a group (or global) expire time for groups
  news/extend       - Change the expiration time on an article
  news/expire       - Perform global news expiration in all groups
  news/groupadd     - Add a group to the system
  news/groupdel     - Delete a group from the system
  news/groupinfo    - Display information on a group
  news/grouplimit   - Set the maximum number of active postings in a group
  news/on           - Turn the news system on
  news/off          - Turn the news system off
  news/postlock     - Lock a group against certain players posting to it
  news/postlist     - Display a list of a player's postings in all groups
  news/readlock     - Lock a group against certain player reading it
  news/subscribe    - Cause a player to join a group
  news/userlimit    - Set the global limit of each user's active postings
  news/userinfo     - Obtain statistics on a user
  news/usermem      - List all of the groups that a user is subscribed to
  news/unsubscribe  - Cause a player to leave a group
  news/yank         - Delete an article from a group
  
  Help is available on each of these switches by typing: wizhelp news <switch>
  
& snoop
& @snoop
  Command: @snoop[/switch] <target> [=<owner>]
  
  See 'snoop history' on reasons for adding this.
   
  Note: By adding -DNO_SNOOP to your compile options you can disable @snoop
        entirely, but this capability exists with @hooking and many other
        softcode alternatives.  This just is an all-in-one tool for it that
        allows game owners much better accountability of its use.
  
  This can only be ran by IMMORTALS or by #1.  This is a hardcoded limitation.
  
  The @snoop command is a monitoring and administrative tool that connects a
  port listener to the player's descriptor.  Once connected, anything that
  the target player sees, does, or interacts with is passed along to the
  watchers who are tagged to montior this user.
  
  A player disconnecting automatically turns off the snoop process.  You may
  optionally set up a log monitoring that can be automated.
  
  The following switches exist:
    /on       -- This is the default switch.  It turns on snooping on the
                 specific target.
    /off      -- This turns off all logging on the target, including file
                 logging.
    /log      -- Specify that it should make a file log of the target
                 player.  All logs are timestamped.  The filename will be
                 snoop<dbref>.txt located in your 'game' directory.
   /status    -- Show status of all currently active @snoops.
  
  Examples: (Assume player Troll is dbref #123)
    > @snoop Troll            (online monitoring of Troll player)
    > @snoop Troll=Wizard     (online monitoring of Troll to player Wizard)
    > @snoop/off Troll        (disable monitoring of Troll player)
    > @snoop/off Troll=Wizard (disable monitoring of Troll from player wizard)
    > @snoop/log Troll        (logs in 'game' to snoop123.txt)
    > @snoop/status           (shows all current active snoops)
  
  See Also: @hook, SUSPECT, LOGROOM TOGGLE, log_command_list 
  
& snoop history
  Topic: SNOOP HISTORY
  
  Snoop was part of the lpmud/diku/mud engine since the late 1980's.  Due to 
  various moral convictions and security paranoia of various admins, it was 
  improved upon or deleted out of codebases over the years.  
  
  RhostMUSH was one of those that decided to improve upon the feature set and
  had it added since RhostMUSH's conception in 1989 and improved upon it in
  1992 during a surge of Trolls and people attempting to hack and damage
  mushes.
  
  At this time there is not nor will be any effort to removing @snoop.
  It's here, and it's here for life.  We have, however, put in a 
  method in the hardcode to hard-remove the feature from the codebase at
  compile time for anyone who feels this violates their beliefs.  We, again,
  try to be open to everyone's ideals of how they want to run their mush.
  
  To date, the snooping ability exists in many main-stream games that are
  paid for by their playerbase, included, but not limited to Runescape, 
  World of Warcraft, Everquest, and others.
  
  Every MUSH, from TinyMUSH, PennMUSH, MUX, and others allow, through
  softcode, the ability to duplicate nearly every aspect of @snoop as it
  stands, including, but not limited to monitoring pages, whispers, all
  commands entered, all output of all commands, and so forth.  Disabling
  @snoop does not disable an admin's capability to monitor everything 
  a player does on the mush.
  
  What @snoop does allow is an all-in-one tool that makes it so the staff
  no longer are required to softcode an alternative tool, which opens up
  avenues of poorly coded softcode to be accessed by normal players to
  infiltrate a game.  @snoop gives the staff absolute control of auditing
  of who uses the command and what goes on their game.  It's a tool,
  nothing more.
  
  We leave it up to each game maintainer to allow or disallow its use
  within its game.  We provide the tools, not the use-case of using it. 
  
& newsdb unload
  Command: newsdb/unload
  
  This command unloads the gdbm database to a flatfile. As a part of
  this process it keeps a backup copy of any existing flat file. However
  if this process will only keep around two copies of the flat file, so
  use caution in running this command more than once if you suspect a 
  database problem. Super-Royalty only.
  
  Example:  newsdb/unload
  
  See Also: wizhelp news load

& newsdb load
  Command: newsdb/load
  
  This command loads the gdbm database files with the contents of the
  news flatfile. All data in the existing gdbm database is lost.
  This command may be run while the news system is turned off.
  Super-Royalty only.
  
  Example:  newsdb/load
  
  See Also: wizhelp news flat files, wizhelp news database, 
            wizhelp newsdb unload

& newsdb dbinfo
  Command: newsdb/dbinfo
  
  The dbinfo command calculates and displays a myriad of statistics
  about the different segment types in the database. It also lists
  the last expiration timestamp, userlimit, and database file blocks used.
  Super-Royalty only.
  
  Example:  newsdb/dbinfo

& newsdb dbck
  Command: newsdb/dbck
  
  The dbck command performs a database integrity check on the news
  database. It checks for list chain integrity, and referential integrity
  of all foreign key data in the database. Exceptions are reported to the
  server log file. If errors are detected, the news system will be disabled
  to prevent further corruption until a hardcode administrator can 
  address the problem. This command may be run with the news system
  turned off. Super-Royalty only.
  
  Example:  newsdb/dbck

& news articlelife
  Command: news/articlelife <global expire>              (60 default)
           news/articlelife <group name>=<group expire>
  
  This command will set the time for both global expirations for the entire
  news system, or on a per-group basis.  For the global expirations, you
  may use the following arguments:
     forever - sets the time so nothing will ever expire. (db bloat?)
     1-???   - sets the number of days before group postings expire
  
  For individual group expires, you may set these values:
     forever - sets the time so nothing in that group expires.
     -1      - use the default global expire time (set from above)  
     1-???   - use the specified days before specified group expire.
  
  You can not have too large a value for the days.
  
  See Also: news expire, news extend
 
& news yank
  Command: news/yank <group>/<seq>
  
  Royalty and above have special access permissions to this command.
  They have no limitations to what group or sequence they can effect.
  
  Example:  news/yank general/1
  
  Refer to: help news yank

& news unsubscribe
  Command: news/unsubscribe <player>=<group>
  
  This is a special administrative version of the unsubscribe command.
  It allows Royalty and above to unsubscribe a player from a group. 
  
  Example: news/unsubscribe Twink=general
  
  Refer to: help news unsubscribe

& news usermem
  Command: news/usermem <player>
  
  The usermem command allows Royalty and higher to view the group 
  membership list of a given player.
  
  Example:  news/usermem MrMemoryHog
  
  See Also: help news groupmem

& news userinfo
  Command: news/userinfo <player>
  
  This is a special administrative version of this command. It enables
  Royalty and above to view statistics on a given player.  More information
  is available on this command.
  
  Example:  news/userinfo Twink
  
  Refer to: help news userinfo

& news userlimit
  Command: news/userlimit <limit>
  
  The userlimit command sets the maximum number of active postings that
  any player may have in the system at one time. There is currently no
  way to single out an individual player for a posting limit. As a user's
  articles expire, it frees them up to post more articles. Royalty and
  higher only.
  
  Example:  news/userlimit 100
  
  See Also: wizhelp news grouplimit, wizhelp news expire

& news subscribe
  Command: news/subscribe <player>=<group>
  
  This is a special administrative version of this command accessible
  to Royalty and above. This bypasses all normal permissions.
  
  Example:  news/subscribe Newbie=general
  
  Refer to: help news subscribe

& news readlock
  Command: news/readlock <group>=<text>
  
  Royalty and above have special access permissions to this command.
  They can bypass normal restrictions.
  
  Example:  news/readlock wizard=gte(bittype(%#),5)
  
  Refer to: help news readlock

& news postlist
  Command: news/postlist <player>
  
  This is a special administrative version of the postlist command. It
  enables a Royalty or higher character to view the articles posted by a
  specified player. For other information on this command --
  
  Example:  news/postlist Newbie
   
  Refer to: help news postlist

& news postlock
  Command: news/postlock <group>=<text>
  
  Royalty and higher have special access permissions to this command.
  They bypass the normal restrictions/permissions of groups.
  
  Example:  news/postlock general=gte(bittype(%#),5)
  
  Refer to: help news postlock

& news off
  Command: news/off
  
  This command turns the news system off. By default the system is turned
  off when the mush boots. The system is also turned off if any 
  exceptional conditions are detected during normal processing or database
  checks. 
  
  Example:  news/off
  
  See Also: wizhelp news on, wizhelp newsdb dbck

& news on
  Command: news/on
  
  This command turns the news system on. By default the system is turned
  off when the mush first boots. It is expected that a wizard level object
  with an @startup attribute will contain the news/on command.
  Before the news system will activate itself, it will do a database
  integrity check. If the check fails, the system will refuse to activate
  and a hardcode wizard will need to repair the underlying database problem.
  Royalty and higher only.
  
  Example:  news/on
  
  See Also: wizhelp news off, wizhelp newsdb dbck

& news grouplimit
  Command: news/grouplimit <group>=<limit>
  
  The grouplimit command sets the maximum number of active posts allowed
  within the specified group at one time. This command serves two purposes:
  firstly it prevents runaway user code from filling up the server
  hard drives with postings, secondly it prevents the group from growing
  too big from normal posting activity. As articles expire, more space
  becomes available for new postings. Royalty and higher only.
  
  Example:  news/grouplimit general=200
  
  See Also: wizhelp news expire, wizhelp news userlimit

& news adminlock
  Command: news/adminlock <group>=<lock>
  
  The adminlock command assigns an administrative player to a group.
  The player may be of any bit level, and will be responsible for the
  day to day functioning of the group. If the player is left off of
  this command, the group administrator is removed. Royalty and
  higher only.
  
  Example:  news/adminlock general=gte(bittype(%#),2)
  
  See Also: wizhelp news groups

& news groupinfo
  Command: news/groupinfo <group>
  
  The groupinfo command provides statistics and information about the
  specified group. Royalty and higher only.
  
  Example:  news/groupinfo general
  
  See Also: help news groupmem, help news status

& news groupdel
  Command: news/groupdel <group>
  
  The groupdel command completely deletes a group from the system. If a 
  group is deleted, all of the articles posted to it as well as the users
  who subscribed to it are lost. Use caution since if the groupdel command 
  is done accidentally on a group, all of the users will need to be re-added
  to a newly created group and all of their articles will be lost.
  Super-Royalty only.
  
  Example:  news/groupdel dummygroup
  
  See Also: wizhelp news groupadd, help news grouplist

& news groupadd
  Command: news/groupadd <group>=<description>
           news/groupadd <existing group>=<new description>
  
  The groupadd commands adds a new group into the system. The group name must
  be unique against the existing group names. The description is mandatory.
  Currently there is no way to change a group description, so use caution or
  you will have to delete the group and re-add it. Royalty and higher only.
  
  If the group already exists, it will set a new description for that group.
    
  Example:  news/groupadd anewgroup=This is an example new group
  
  See Also: wizhelp news groupdel, wizhelp news adminlock,
            wizhelp news readlock, wizhelp news postlock

& news expire
  Command: news/expire
  
  The expire command is a Super-Royalty only command. It traverses the groups
  and articles in the database and deletes any articles who's expiration
  timestamp has passed. This command has the possibility of creating some
  timelag on the server if the news database becomes extensive. Therefore it
  is recommended that this command be scheduled to automatically execute only
  once a day, and at an off peak time.
  
  Example:  news/expire
  
  See Also: help news extend

& news extend
  Command: news/extend <group>/<seq>=<num days>
  
  Royalty and higher have special access rights to this command. 
  They bypass normal restrictions and permissions.
  
  Example:  news/extend general/5=500
            news/extend general/5=forever
  
  Refer to: help news extend.

& news groups
  Topics: GROUPS
  News groups contain users and articles. Groups may also be assigned an 
  administrator. This administrator may be a player at any level within the
  mush who is desired to take care of the day to day details of taking
  care of a news group. The administrator may do many things to the group
  that can not be done by the standard user. There are two system defined
  groups: 'info' and 'general'. These groups can not be deleted since the
  system relies on their existance to add improved features for the users.
  
  See Also: help news description, help news general, help news info,
            wizhelp news groupadd, wizhelp news groupdel,
            wizhelp news adminlock

& news database
  Topics: DATABASE
  The database files for the news system are named <mudname>.news.pag and
  <mudname>.news.dir. If the mush starts up and these files are not present
  in the execution directory, the news sytem will assume that a new     
  database is desired. It will create the standard seed database containing
  only the global news information and the two system groups 'info' and
  'general'. Therefore if you desire to wipe out the existing news database,
  either delete the two files mentioned here and start the mush, or use
  the newsdb/load command which first deletes these files and then uses
  the contents of the <mudname>.news.flat file to propigate a new db.
  
  See Also: wizhelp newsdb load, wizhelp news flat files

& news flat files
  Topics: FLAT FILES
  Flat files are used for loading and unloading the database files.
  The flatfile names that the news system uses are: <mudname>.news.flat
  and <mudname>.news.flat.old. The newsdb/unload command will move a
  file name <mudname>.news.flat to <mudname>.news.flat.old and then
  create a news <mudname>.news.flat file with the current contents of the
  database. The newsdb/load command will always read from a file named
  <mudname>.news.flat to load the database.
  
  See Also: wizhelp newsdb load, wizhelp newsdb unload


& commands
  Help is available for the following RhostMUSH commands:
 
  DOING           examine         folder         give            SESSION      
  slay            WHO             wizhelp        mail            wmail
  channel         cd              news           newsdb
 
  @admin          @aflags         @api           @apply_marked   @areg       
  @attribute      @blacklist      @boot          @chown          @chownall   
  @clone          @cmdquota       @conncheck     @convert        @cut          
  @dbck           @dbclean        @depower       @destroy        @disable      
  @doing          @dump           @dynhelp       @enable         @fixdb        
  @flag           @flagdef        @freeze        @function       @halt        
  @hide           @hook           @icmd          @kick           @limit        
  @list           @list_file      @listmotd      @lock           @log          
  @logrotate      @mark           @mark_all      @money          @motd         
  @newpassword    @nuke           @pcreate       @poor           @power        
  @progreset      @protect        @ps            @purge          @quota        
  @readcache      @reboot         @recover       @reclist        @remote       
  @rwho           @site           @shutdown      @snapshot       @snoop
  @tag            @thaw           @timewarp      @toad           @toggledef
  @tor            @totem          @totemdef      @turtle         @wall       
  +players
 
  @adesc2         @allowance      @altname       @badsite        @comment
  @createdstamp   @darkexitformat @goodsite      @invtype        @leveldefault
  @mailsmax       @mailscur       @mailtime      @modifiedstamp  @paylim
  @queuemax       @receivelim     @rsrvdesc2     @rxlevel        @timeout
  @txlevel
  
  @create         @dig            @lock          @open           @pemit   
  page            whisper        

& topics
  Help available on the following Topics:
 
  ACCOUNT MEMBERSHIP       ALT INVENTORIES          ANCESTORS              
  ATTRIB CONTLOCKS         ATTRIB FORMATTING        AUTOREGISTRATION       
  API                      CAUTIONS                 CLOAKING               
  CONFIG PARAMETERS        CONTROL                  CPU                    
  CUSTOMIZED CONNECT       DEBUG FEATURES           DEPOWER LIST           
  ELSEFILE SETUP           FILES                    FLAGS                  
  FLAG ALIAS               FUNCTION OVERLOADING     GLOBAL INHERITANCE     
  GUEST SETUP              HELP SETUP               HOOK SETUP             
  HUH SETUP                INHERITANCE              LOGGING                
  MAIL ALIASES             MASTER ROOM              MOGRIFY                
  NEWS SETUP               PERMISSIONS              PLUSHELP SETUP         
  POWER LIST               PROXY SETUP              REALITY LEVELS         
  SEARCH CRITERIA          SIGNALS                  SITE LISTS             
  SPECIAL ATTRIBS          SSL SETUP                TAGS                   
  TOGGLES                  TOR                      TOTEMS

& API
  Topic: API
  
  RhostMUSH has a process where it allows API connections to happen on another
  port.  It requires to have the api_port specified to a unique port for the
  API handler, then various optional config parameters to optimize how the
  API works.  The API, unlike normal connections, allows any valid dbref# to
  talk to the mush from the API engine.  It does this through multi-factor
  authentication including host match and password authentication.
  
  It uses Basic Authorization and encapsulates.  Example of using curl for
  login authentication to the API's object would be:
             curl --user "#123:foobar"
  
  The dbref# would be #123, and the password you want to authenticate would
  be 'foobar'.
  
  The API handler uses headers only.  No data is recognized.
  
  The following config options exist:
    api_port          -- Port that the API engine listens on
    api_nodns         -- Optionally disable DNS lookups.  Auth lookups
                         are already disabled.
    forbidapi_host    -- Forbid the given hostname from connecting to 
                         the API
    forbidapi_site    -- Forbid the given IP from connecting to the API
    passapi_host      -- Allow hostname to bypasses the max_lastsite_api 
                         restriction
    passapi_site      -- Allow IP mask to bypasses the max_lastsite_api 
                         restriction
    max_lastsite_api  -- Maximum number of connections from a given site
                         to the API handler a minute before auto-forbid.
  
  To configure a dbref# to be allowed to process API requests, you must 
  configure the dbref#.  To do this you use the @api command.  If you wish
  to monitor all API connections, you can do so with a specific @power.
  The @power acts as an additional 'power up' to the existing MONITOR_SITE
  and for busy API systems can be quite spammy.  You have been warned.
  
  The following @powers are relevant to the API subsystem:
    API               -- The main API enable/disable control mechanism
                         that specifies if a dbref# can be used for API
                         processing.  @api interfaces this.
    MONITORAPI        -- The MONITOR filter for API connections.
  
  The following attributes are relevant to the API subsystem:
    _APIPASSWD        -- The attribute the encrypted password is stored
                         for the dbref#.  @api interfaces this.
    _APIIP            -- The allowable ip addresses that can use that
                         specific dbref# for connections.  Defaults to
                         just localhost.
  
{ see 'wizhelp api setup' for steps on how to set up a dbref# for use }
{ see 'wizhelp api processing' to see how to actually use the API system }
{ see 'wizhelp api return' for values you can expect back from the API }
{ see 'wizhelp api errorcodes' for HTTP error codes that it can respond with }

& API SETUP
  Topic: API SETUP
  
  To setup and initialize a dbref# for use for the API subsystem, you would
  use the @api command to configure it.  The following steps are required.
  
  1.  @api/enable <target>
      -- This will tag the target to be API enabled.  It essentially sets
         the target with the API @power.  While any valid dbref# will work
         if you plan to use players you want to take extra percautions.
  
  2.  @api/password <target>=<password>
      -- This sets a password hash of <password> that you then use to connect
         to the target dbref# using the API subsystem.  If it doesn't match
         the password it can't connect.
  
  3.  @api/ip <taget>=<site(s)>  
      -- This is a list of wild-carded IP addresses that you wish to allow
         connectivity through the API to that specific dbref#.  This is an
         optional step and if not specified defaults to localhost only.
  
  4.  @api/status <target>
      -- This will check the target object to make sure it's ready for API
         connectivity.
  
{ see 'wizhelp api processing' to see how to actually use the API system }
{ see 'wizhelp api return' for values you can expect back from the API }
{ see 'wizhelp api errorcodes' for HTTP error codes that it can respond with }

& API PROCESSING
  Topic: API PROCESSING
  
  To actually execute an API request, you need to send a web request to the 
  API handler.  The API handler handles two request types.  POST and GET.
  You use the POST handler to push (or execute) code on the mush, and the GET
  handler to fetch (or receive) results from the mush.  It does this by using
  HTTP headers only to configure the requests.  It uses customized headers.
  
  The following headers are available with the following options:
  POST:
     header - Exec:
       -- The Exec: header is used to tell the mush what code to execute.
          You would ensapsulate the code you want to run in double quotes.
          You may specify more than one command by using semi-colons.
          An empty Exec: call returns an error.
          Example:  Exec: "@emit test1;@emit test2"
     header - Time:
       -- The Time: header is used to tell the queue how long to push the
          request for.   If no Time: header is specified, it defaults to '0'.
          If a negative value is fed to this, it defaults to '0'.  You may
          use fractional values.
          Example:  Time: "100.5"
  
  GET:
     header - Exec:
       -- The Exec: header is used to tell the mush what code to execute.
          Unlike the POST requester, this only accepts functions/strings.
          Example:  Exec: "[lattr(#123/foo)]"
     header - Parse:
       -- This specifies the type of parsing you wish to apply to the 
          return string.  If not specified it assumes 'parse'.
          The following applies:
            parse       -- default.  Just parse the function as normal.
            noparse     -- just evaluate percent substitutions, not code.
            ansiparse   -- parse and return the ansi as translated encoding.
            ansinoparse -- evaluate percent subs and translate ansi.
            ansionly  -- do not parse and return the string as translated.
          Example: Parse: "parse"
     header - Encode: 
       -- This will tell it to encode the Return: value in base64.
          Options you can pass this is 'yes' to enable, and 'no' to disable.
          No is the default value.  This is handy when you have multi-line
          input that headers may not necessarily handle.
  
{ see 'wizhelp api setup' for steps on how to set up a dbref# for use }
{ see 'wizhelp api return' for values you can expect back from the API }
{ see 'wizhelp api errorcodes' for HTTP error codes that it can respond with }

& API RETURN
  Topic: API RETURN
  
  When the mush responds to your API requests, it will do so with headers
  only.  There is no data submitted.  If there is header data it does not
  recognize or is malformed, it will return an appropiate error message.
  
  The following return encoding can be expected
  POST:
      HTTP/1.1 <CODE> OK
      Content-type: text/plain
      Date: Thu Jul  6 14:37:52 2017
      Exec: <STRING>
  
  GET:
      HTTP/1.1 <CODE> OK
      Content-type: text/plain
      Date: Thu Jul  6 14:51:16 2017
      Exec: <STRING>
      Return: <VALUE>
  
  
      -- <CODE> may be any of the following with matching <STRING>
         200 - OK            <STRING>: Ok - Executed
         400 - Bad Request   <STRING>: Error - Invalid Headers Supplied
         400 - Bad Request   <STRING>: Error - Empty String
         404 - Not Found     <STRING>: Error - Invalid target
         403 - Forbidden     <STRING>: Error - Permission Denied
         403 - Forbidden     <STRING>: Error - IP not allowed
         403 - Forbidden     <STRING>: Error - Malformed User or Password
   
      -- <VALUE> is the actual return value for a GET fetch.  This is what
         the evaluated string will have been.
  
  GET Examples (this is from a command line using the 'curl' application)
> curl -X GET --user "#12:ya" -H "Exec: [lnum(10)]" --head http://localhost:2222
  
  POST Example: (this is from a command line using the 'curl' application)
> curl -X POST --user "#12:ya" -H "Exec: @emit hi." --head http://localhost:2222
  
  See Also: @api 
   
{ see 'wizhelp api setup' for steps on how to set up a dbref# for use }
{ see 'wizhelp api processing' to see how to actually use the API system }
{ see 'wizhelp api errorcodes' for HTTP error codes that it can respond with }
  


& SPECIAL ATTRIBS
  There are special attributes you can set on objects that will have
  special notation based on the purpose.  
  
  Currently, the following exist:
    _NOPOSSESS_MSG    -- When set on a player will give a customized message
                         upon triggering the event.  This is used with the
                         NOPOSSESS flag.
            Arguments Allowed:
              %0 - Numerical Site/Host
              %1 - DNS Site/Host Name
              %2 - Port of connection
              %3 - Player dbref# or '#-1' if no valid player.
                       
    _NOCONNECT_MSG    -- When set on a player will give a customized message
                         upon triggering the event.  This is used with the
                         NOCONNECT flag.
            Arguments Allowed:
              %0 - Numerical Site/Host
              %1 - DNS Site/Host Name
              %2 - Port of connection
              %3 - Player dbref# or '#-1' if no valid player.
  
  See Also: file_object, NOPOSSESS, NOCONNECT

& CONTROL
  RhostMUSH has multiple levels and tiers for control.  In addition, it has
  a wide variety of flags, toggles, @powers, and @depowers as well as other
  features to tweak this control how you want.  It even has the ability to
  override the existing control/permission levels globally.  This can
  obviously become quite complex, but we'll touch on the majority of them.
  The bits are all absolute to their level and lower.  Thus, lower level
  bits can NOT MODIFY higher level bits, short of special privs which will
  be discussed later.
  
  First, the main control is handled by a bitlevel tier as follows.
    #1 (god)        [Bit 7] - This is the db owner and highest control 
                              authority in the game.  All garbage/recycled 
                              information is owned by this player, and because
                              of this, this player should not own anything.  
                              Let me re-iterate.  This player should not own 
                              anything.  If you need #1 style power, use the 
                              immortal flag for an immortal player.
   Immortal         [Bit 6] - This is essentially your 'leader' bit.  it can do
                              pretty much anything within the game with few
                              exceptions.  They override all locks by default
                              unless they set the no_override/no_uselock flags.
   Wizard (Royalty) [Bit 5] - This is your normal MUX/Penn Wizard bitlevel.  It
                              can do all your normal wizardly goodness.
                              They override all locks their level and lower
                              unless set no_override/no_uselock.  Yes, this
                              also includes pagelocks.  This is referred to as
                              'Royalty' within the codebase, but is in fact a
                              full Wizard bit.  Re-iterate.  Full wizard.
   Councilor        [Bit 4] - This is the 'admin' bit.  It has most of the wiz
                              privs, but lacks some of the higher level db
                              control.
   Architect        [Bit 3] - This is the first staff bit that can control 
                              things outside of its own ownership.  This does
                              including, attribute/flags/toggles and player
                              modification, but not player destruction.
   Guildmaster      [Bit 2] - This is the first admin bit.  It has small 
                              amounts of control including examining stuff
                              outside of ownership, but lacks modify power.
   Citizen          [Bit 1] - Yup, this is just your normal player bit.
   Wanderer         [Bit 0] - Consider this an unregistered player.  This is
                              a Citizen with the WANDERER flag.  It stops 
                              them from all building commands.
   Guest            [Bit 0] - This is a guest player, as a guest they have
                              very little power or control.  They lack any
                              and all db modification abilities, including
                              but not limited to editing, creating, etc.
                              They also can not use mail.  Yes, this is
                              intentional.
  
  {wizhelp control2 for exceptions}
  {wizhelp control flow for the general flow of permissions}

& CONTROL FLOW
  The general flow of control is as follows.  If a target is TwinkLocked,
  assume examine/modify based on the given Lock.  Owner/Bitlevel still 
  has control regardless of passing the lock or not.  Note that zone
  control is also handled with twinklock and zone locks.  Any bitlevel
  owned items MUST BE SET INHERIT to inherit ownership.  Please do NOT SET
  THE BIT ON THE NON-PLAYER.  This is a PennMUSH-ism ONLY!

  #1 ---+
     Immortal ---+
     Power(Toggled/Special)
     @hook
     NO_MODIFY (with @admin params imm_nomod enabled)
     Immortal Owned thing set INHERIT
              Wizard (Royalty) ---+
              Power(Toggled/Special)
              @hook
              NO_MODIFY/NO_EXAMINE (without @admin params imm_nomod enabled)
              Wizard Owned thing set INHERIT
                     Councilor ---+
                     Depower(Councilor)
                     Power(Councilor)
                     Toggles(some)
                     @hook
                     Councilor Owned thing set INHERIT
                               Architect ---+
                               Depower(Architect)
                               Power(Architect)
                               @hook
                               Architect Owned thing set INHERIT
                                         Guildmaster ---+
                                         Depower(Guildmaster)
                                         Power(Guildmaster)
                                         @hook
                                         Guildmaster Owned thing set INHERIT
                                                     Citizen ---+
                                                     Wanderer --+
                                                     Guest -----+
                                                     Toggles(some)
                                                     Flags(some)
                                                     @hook
                                                     ANY BIT-THING NOT INHERIT
                                                             Screwed. ---+
                                                             Depower(off)
                                                             @icmd
                                                             FUBAR/SLAVE
                                                             Flags(others)
                                                             Toggles(some)
                                                             @hook
  
  As shown, @powers and @depowers can grant up and down the chain permissions.
  Also, some flags and toggles may grant and/or remove some of these very
  same abilities.  The TwinkLock also allows some complexity.
  
  See Also: CONTROL, PERMISSION
  
& CONTROL2
  There are exceptions to every rule, and RhostMUSH is no exception (sic).
  While Immortal and #1 are basically immune from exceptions, being
  too high in the chain to warrent effecting them, the rest of the bits
  can be modified (yes, including full wizard (royalty)).  
  
  They can be controlled as follows.
    @power    -- This is a method to tier-level up a bitlevel to higher
                 methods of control.  You can grant abilities from
                 guildmaster up to Councilor for tier-level control.
                 There also are powers that are toggle-able that 
                 you can set (by specifying any bitlevel with it) that
                 will toggle on or off a given effect.  This effect
                 can (and likely does) grant abilities up to wizard
                 or even immortal level (like examine and teleport).
   @depower   -- This is a method to tier-level DOWN a bitlevel to a
                 lower method of control.  This always has precidence
                 over any other method of control and essentially 
                 ham-strings authority.  You can use this to remove
                 abilities from a full wizard (like cloaking, editing,
                 teleporting, etc), which can be handy for non-coding
                 staff.  Keep in mind, as stated, you can not @depower
                 an Immortal or #1.
   TwinkLock  -- @lock/twink is a special lock that grants editing, and
                 by extension, examining ability of anything that they
                 pass the lock on.  Obviously, it can be abused, thus
                 why it's called a TWINK lock.  Setting a TwinkLock item
                 NO_MODIFY will remove the editing ability and leave the
                 examine ability.
   NO_MODIFY  -- This is a flag that can optionaly be tagged to be 
                 tiered-up to immortal.  It in essence makes any target
                 (including twinklocked items) non-modifiable.
   NO_EXAMINE -- This is a flag that can optionaly be tagged to be
                 tiered-up to immortal.  It in essence makes any target
                 (including twinklocked items) non-examinable.
   PINVISIBLE -- An attribute modifier that when in junction with the
                 VISIBLE flag (either per object or attribute) will 
                 make the attribute private/invisible, except for any
                 direct-fetch via u(), get(), or hasattr().
   @icmd      -- This is a method to disable, individually, any given
                 command by player, location, or zone.  You have the
                 option to set the command to ignore to effectively
                 cause the command to be 'unfound' by the target.
   @hook      -- This allows a wide variety of control over a command.
  
  There's obviously a lot more that can be tweaked or modified, but this
  gives the general control flow.
  
  See Also: CONTROL FLOW, PERMISSION

& SSL SETUP
& PROXY SETUP
  RhostMUSH allows you to do site redefinition for proxy connections like
  SCONNECT or similar site redirection software.  This allows you to use
  external applications to use SSL/TLS connections to then connect to the
  mush for encrypted or even high availability or load balanced connections
  to the mush itself.
  
  To enable and allow proxy redefinition of sites for connections you must
  configure the capability to do so.  This is only used for the connect
  screen and can not be used for already connected players.  This is only
  relevant for the current connection of that player.
  
  The following parameters are used to handle the PROXY connections.
  
    sconnect_reip    -- This is a toggle that must be enabled to allow
                        the re-definition of the site the connection is
                        using.
  
                        Syntax:  sconnect_reip 1
  
    sconnect_host    -- This is the host list of what hosts are allowed
                        to issue a re-definition of the currently connected
                        host.  If this is not set, it will default to
                        localhost only.  Any sites that are not allowed
                        that manage to issue the redefinition command will
                        be logged accordingly.  This allows wildcarding.
  
                        Syntax: sconnect_host *.comcast.com localhost
  
    sconnect_cmd     -- The command (case sensitive) that is used to 
                        specify the new ip/dns address for that connected
                        session only.  
  
                        Syntax: sconnect_cmd Pr0xY 
  
  Assuming that the sconnect_cmd is 'Pr0xY' as above Syntax example, at
  connect screen you would type:
    Pr0xY mynewsite.com
  
  This will reassign your displayed site as 'mynewsite.com' if the site
  you are really connected from matches the allowable sites to do so.
  
  See Also: sconnect_reip, sconnect_host, sconnect_cmd

& TOR 
  RhostMUSH has some fairly advanced features for proxy and masquarding
  to get by bans or hiding identities.  First, we have @blacklist which
  allows you to load in a static list of current TOR exit points, hidemyass
  proxy points, and all current public proxies from several sites.
  
  When that isn't good enough, as TOR tends to be highly dynamic, you can
  turn on advanced dynamic TOR checking.  This will in effect check every
  connection for a TOR exit point and if one matches will deny access
  to your mush.  Keep in mind, this is slightly expensive as it requires
  an additional DNS lookup for every single site that connects.
  
  To enable TOR protection you need to do three things.
    1.  tor_paranoid must be enabled.   From the mush you may type
        @admin tor_paranoid=1 or from the netrhost.conf you may type
        tor_paranoid 1
    2.  tor_localsite must be defined as the external IP or hostname
        that you use to connect to your mush.  Either is fine.  You
        can use @admin tor_localsite=<site> online or from the conf file
        tor_localsite <site>.  You may specify more than one IP or site
        if there are several IPs that are used to connect to your mush.
    3.  @tor/cache must be issued each and every time you change your
        tor_localsite.  This caches the site information to avoid a 
        lookup and breakdown for every connection that occurs.
  
  See Also: @tor, tor_paranoid, tor_localsite, @blacklist

& signals
  Topic: SIGNALS
  
  RhostMUSH will react to given signals sent from the unix command line.
  The following signals are available:
  
         SIGUSR1   - Force a reboot (@reboot) of the server.  This can be 
                     reconfigured to a custom behavior with the signal_object 
                     config parameter.  The type of execution is handled with 
                     the signal_object_type config parameter.
         SIGUSR2   - Force a shutdown (@shutdown) of the server.
         SIGTERM   - Force an IMMEDIATE shutdown of the server.
                     This attempts to dump a flatfile then immediately closes
                     the game WITHOUT saving to the database.  
         SIGHUP    - Force a flatfile (@dump/flat) on the system.
                     
  See Also: config parameters, signal_object, signal_object_type

& flags
  Information is available on the following flags:
 
       INHERIT(I)         MARKED(m)          STARTUP(z)          SUSPECT(u)
       ROYALTY(W)          FUBAR(f)            CLOAK(b)           SCLOAK(Z)
         GUEST(!)       WANDERER(^)          RECOVER($)      NO_CONNECT([A])
      DPSHIFT([B])    NO_MODIFY([M])     NO_EXAMINE([E])     NO_POSSESS([C])
      GUILDOBJ(j)      CMDPARSE([K])        NO_MOVE([N])           STOP([D])
      NO_STOP([F])    SEE_OEMIT([O])        NO_GOBJ([G])      NO_PESTER([p])
  NO_OVERRIDE([V])   NO_USELOCK([U])       DR_PURGE([x])    NO_ANSINAME([n])
        SPOOF([S])       NO_WHO([W])          LOGIN([L])      BACKSTAGE([b])
 NO_BACKSTAGE([d])    ANONYMOUS([Y])         NONAME([m])    SPAMMONITOR([w])
      NO_CODE([j])      IMMORTAL(i)
  
  The following attribute flags exist in addition to the normal:
  
    PINVISIBLE(v)        ATRLOCK(l)           LOGGED(m)
  
  Note:  ROYALTY in RhostMUSH is the same as WIZARD everywhere else. 
  
& global inheritance
  There is the possibility to set up global inheritance for object types.
  There are various methods to do this.  First, there is a 'filtering'
  system.  The following sub-topics exist for global inheritance.
  
        global formatting   - for formatting internal attributes (@desc, etc)
        global parenting    - for setting up automated @parents
        global attributes   - for setting up automated attribute inheritance
  
& global formatting
  Global formatting is accomplished through 4 admin parameters.
  
        player_attr_default   (for player types)
        thing_attr_default    (for thing types)
        room_attr_default     (for room types)
        exit_attr_default     (for exit types)

  When configured with a valid dbref#, they tell the mush engine to format
  attributes through the specified attributes (it passes the attribute as
  %0 to the attribute).  You need to specify the target attribute DEFAULT
  to inherit the formatting (locally or globally works).
  
  You may specify '@list options values *_attr_default' to see values.
  
  For example:
    > @admin player_attr_default=3
    > @desc #3=%t-< %0 >-
    > @desc me=This is a desc
    > look me
      This is a desc
    > @set me/desc=default
    > look me
           -< This is a desc >-
  
  See Also: room_attr_default, player_attr_default, thing_attr_default,
            exit_attr_default
 
& global parenting
  Topic: global auto-parenting (auto-@parenting)
  
  Global parents are issued through 4 global attributes.  These actually
  set a @parent on the target matching the global attribute.  All checks,
  consistancy, and sanity filtering is done prior to the @parent set.
  The following 4 parameters exist.
  
        player_parent     (for player types)
        thing_parent      (for thing types)
        room_parent       (for room types)
        exit_parent       (for exit types)
  
  You may specify '@list options values *_parent' to see values.
  
  For example:
    > @admin player_parent=3
    > @pcreate MyTestPlayer=goober
    > say [parent(*mytestplayer)]
    You say "#3"
  
  See Also: player_parent, thing_parent, room_parent, exit_parent

& ancestors
& global inheritance
& global attributes
  Topic: global inherintance (ancestors)
  
  Global attributes works similiarilly to global parenting, except no actual
  @parent is set on any target nor required.  There are actually 6 different
  parameters for global inheritance.  These are:
  
        global_parent_obj      (default global inheritance)
        global_parent_player   (for player types)
        global_parent_thing    (for thing types)
        global_parent_room     (for room types)
        global_parent_exit     (for exit types)
        zone_parents           (allow zones to inherit attributes)
  
  The order of inheritance is as follows:
        1) Attribute exist on self
        2) Attribute exist on @parent
        3) Attribute exist on zone(s) (if defined)
        4) Attribute exist on global_parent_<type> (if defined)
        5) Attribute exist on global_parent_obj (if defined)
  
  Please note that global_parent_obj will not be used if there exists a 
  specified type global parent (ie: global_parent_player).
  
  You may specify '@list options values global_parent*' to see values.
  
  See Also: global_parent_obj, global_parent_player, global_parent_thing, 
            global_parent_room, global_parent_exit, zone_parents
  
& attribute contlocks
& attrib contlocks
  You may enable attribute content locking.  This is done by setting up a
  global object to handle 'content locks'.  This is done through the config
  parameter 'global_attrdefault'.  Once a valid dbref# is identified, then
  the content (evaluated) of the attribute is matched against what is
  being set.  What is being set is passed as %0 to the attribute.  If it
  returns '1' then the attribute is allowed to be set.  If it returns '0'
  then the attribute can not be set.
  
  Any attribute you want to possess attribute content locks must be set 
  ATRLOCK.  You may set this globally on an attribute.
  
  Note:  Any local flags on an attribute WILL BE CLEARED if you @cpattr or
         @mvattr into that attribute.  (they will be overwritten with
         the flags on the attribute being copied.  This is the
         intended behavior).  If you wish for the attributes to hold
         their flags, you must either globally set the flags, or reset
         the flags locally after the @mvattr or @cpattr.
    
  See Also: ATRLOCK, global_attrdefault
  
& attribute formatting
& attrib formatting
  Attribute formatting can be accomplished multiple ways.  First, there is
  a generic local 'format' for most @-attributes.  To process this format,
  you need to set an attribute of the name 'format<attr>' on the target
  (or parent, global parent, zone of the target. Use <attr>format if the
  config parameter format_compatibility is enabled). If this attribute is
  not found, it will then look at the global default parents for matching
  attribute inheritance.  Any attribute that you wish to inherit default
  pattern formatting must be set DEFAULT (attribute flag).  The desc is
  passed into the formatting as '%0'.  Local formatting has priority
  over global formatting.
  
  @list options system will show which format option is in use.
   
  Examples:
    > @desc me=This is a test
    > @admin player_attr_default=123
    > @desc #123=-< %0 >-
    > lo me
      -< This is a test >-
    > &formatdesc me===<%0>==
    > lo me
      ===<This is a test>===
  
  See Also: player_attr_default, exit_attr_default, room_attr_default,
            thing_attr_default, nodefault
  
  Special:  See normal help for the DEFAULT attribute flag
  
& flag alias
  These are flag aliases used for compatibility to other codebases and/or
  earlier RhostMUSH versions.

     NO_BACKSTAGE - NOBACKSTAGE              NO_CONNECT   - NOCONNECT
     NO_EXAMINE   - NOEXAMINE                NO_MODIFY    - NOMODIFY  
     NO_MOVE      - NOMOVE                   NO_NAME      - NONAME
     NO_POSSESS   - NOPOSSESS                NO_STOP      - NOSTOP
     NO_WHO       - NOWHO
     
& SPAMMONITOR
  Flag: SPAMMONITOR([w]) (Immortal only)
  
  When set, this flag will enable spam checking on the target.  This flag is
  inheritable, meaning, if set on a player, all their belongings are 
  automatically checked.

  See Also: spam_limit, spam_msg, spam_objmsg

& NONAME
& NO_NAME
  Flag: NO_NAME([m]) (wizard and higher only)
  
  When set, this essentially snuffs the name of the item.  This only works for
  inventories, contents, locations, and 'inside' looks.
  
  This is intended to work with @nameformat as an override for
  content/inventory name displays.
  
  This is aliased to 'NONAME' for compatibility.

& NOWHO
& NO_WHO
  Flag: NO_WHO([W]) (internal flag)
  
  This flag is an internal marker of who has used @hide to hide from the WHO
  
  This is aliased to 'NOWHO' for compatibility.
  
& BACKSTAGE
  Flag: BACKSTAGE([b]) (immortal only)
  
  This flag is an inheritable flag that you set on any datatype that you do
  not want to be able to modify, examine, or touch in any way an item that
  is set NOBACKSTAGE.  In effect, this flag makes it so they have no control
  over anything set NOBACKSTAGE.  This may include things they own.

& NOBACKSTAGE
& NO_BACKSTAGE
  Flag: NO_BACKSTAGE([d]) (immortal only)
  
  This flag is a marker flag that is used to identify items that you do
  not want anything set BACKSTAGE to touch in any manner.
  
  This is aliased to 'NOBACKSTAGE' for compatibility.
  
& ANONYMOUS
  Flag: ANONYMOUS([Y]) (wizard and higher only)
  
  This flag substitutes your name to 'Someone' when you talk or pose when
  you are cloaked.  Nice if you want to hide who you are.
  
& AUTOREGISTRATION
  The mush supports autoregistration.  When enabled (either/or on_line or
  off_line), it enables a player on the connect screen to register via
  the 'register' command (syntax: register <character> <email>) or as a
  GUEST, they may register on_line with the @register command
  (syntax: @register <character>=<email>).  There is a configurable 
  default to a total of one (1) registration per connected session and
  three (3) total email registers per email site.  Both can be changed
  with the appropiate @admin or @areg parameters.
  
      AUTOREG PARAMS  -- Lists autoregistration @admin parameters.
      AUTOREG DB      -- Lists information about the autoregistration db.
      AUTOREG MONITOR -- Lists ways to monitor/configure autoregistration.
      AUTOREG FILES   -- The files involved in autoregistration.   
  
& AUTOREG PARAMS
  The following autoregistration related @admin parameters exist:
  
  MAILPROG          -- Defines the mail program used with autoregistration.
                       Default:  elm
  MAILMUTT          -- Defines if the mail program used is mutt.
                       Default:  no
  MAILSUB           -- Defines if the mail program used recognizes subjects.
                       Default:  yes
  OFFLINE_REG       -- Enables off-line (ie: connect screen) registration.
                       Default:  no
  ONLINE_REG        -- Enables on-line (ie: GUEST character) registration.
                       Default:  no
  REGTRY_LIMIT      -- Lists no. times player can register per connect.
                       Default:  1
  NOAUTOREG_SITE    -- SITE parameter to enable/disable sites from autoreg.
                       Default:  (no limitation)
  NOAUTOREG_HOST    -- Enable/Disable wildcarded hostnames from autoreg.
                       Default:  (null/empty)
  VALIDATE_HOST     -- Disables wildcarded hostnames from being emailed
                       Default:  (null/empty)
  START_BUILD       -- Defines if a new player is allowed to build.
                       Default:  no (0)
  MAILINCLUDE_FILE  -- Defines text file included with the autoreg mailing.
                       Default:  autoreg_include.txt
  
  See Also: AUTOREGISTRATION

& AUTOREG DB
  The autoregistration system comes with an enhanced separate database 
  and tools to manipulate this database.  For help on this, type:
  
         wizhelp @areg
  
  See Also: AUTOREGISTRATION

& AUTOREG MONITOR
  The autoregistration system comes with various monitoring tools.  You can
  use the following:
  
      @areg        -- Used to view/update/add/remove entries in the db.
      MONITOR_AREG -- Used to monitor all autoregistration attempts.
  
  See Also: AUTOREGISTRATION

& AUTOREG FILES
  The following files exist that are used for the autoregistration system.
  
  AUTOREG.TXT         -- Used when autoregistration is enabled but connect 
                         site is not registered.
  AREGHOST.TXT        -- Used when autoregistration is enabled and connected
                         site is also registered.
  REGISTER.TXT        -- Used when autoregistration is enabled but connected
                         site is not allowed to autoregister.
  AUTOREG_INCLUDE.TXT -- File sent when player autoregisters.
  
  See Also: AUTOREGISTRATION

& TAGS
  The Rhost tag system exists to make it easier for coders to avoid having
  to use hardcoded #dbrefs inside their mushcode.
  
  It does this by allowing admins to assign #dbrefs to named 'tags', that
  then can be used inside mushcode instead of said #dbrefs.
  
  For example, instead of using
    @trigger #4/UPDATE_WEATHER
  one would use the following line inside mushcode with this system:
    @trigger [tag(weather_globals)]/UPDATE_WEATHER 
  
  An alternative to tag() is actually to use #<tagname> - this will match
  against existing tag names, in a similiar format to #dbrefs, making it an
  easy to use replacement.
  
  This also makes writing of portable mushcode much easier - old workarounds
  in such systems included storing the new #dbrefs on creation on special
  attributes, and then reading those attributes with v() to make us of them
  inside the mushcode.
  
  The tag system has a couple advantages compared to this workaround:
  
    * They can be easily added by putting a line like
        @tag/add weather_globals=[lastcreate(me,t)]
      at the end of an object's automated creation process in the .txt file.
    * Tags are available globally - they can be listed with @tag/list, and
      tag() works independently of any attributes and possible access
      permissions to those attributes.
    * Tags are sanity checked - they always point at a valid object or #-1.
      Object destruction removes the according tag. If a tag returns a
      valid #dbref, it is ensured that this tag was assigned to this #dbref
      during the current object's lifetime.
    * Tags are easy to use on the fly in the client, by entering lines like
      "ex tag(weather_globals)", making them also handy for everyday admin
      maintenance purposes.
  
  Also See: wizhelp @tag, wizhelp listtags(), wizhelp tagmatch(), help tag()

& LISTTAGS()
  function: listtags()
            listtags(<target>)
  
  This function, without any argument, returns a list of all set tags.
  The list is formatted as "tagname|#dbref tagname2|#dbref2 ..."
  
  An alternative is to specify a target. If the target is valid, the returned
  list will be a list of all tags set on the object, if the form of:
  "tagname tagname2 tagname3..."
  
  This function is limited to wizards by default, in order to prevent normal
  players from listing sensitive tags and finding the #dbrefs of special
  objects.
  
  Also See: wizhelp tags, wizhelp @tag, wizhelp tagmatch(), help tag()

& TAGMATCH()
  function: tagmatch(<pattern>)
  
  This function returns a list of tags that match the specified pattern.
  Example:
  > th tagmatch(*bl*) 
  > bleat blue oblong
  
  Using this function with a simple '*' as the pattern will list all tags.
  
  This function is limited to wizards by default, in order to prevent normal
  players from listing sensitive tags and finding the #dbrefs of special
  objects.
  
  Also See: wizhelp tags, wizhelp @tag, wizhelp listtags(), help tag()

& TOGGLES
  Information is available on the following toggles:
 
  MONITOR_SITE        MONITOR_USERID      MONITOR_STATS
  MONITOR_FAIL        MONITOR_CONN        MONITOR_DISREASON
  MONITOR_VLIMIT      MONITOR_AREG        MONITOR_TIME
  MONITOR_CPU         MONITOR_BAD         MONITOR
  WORN                WIELDED             NO_TIMESTAMP      
  NO_FORMAT           SEE_SUSPECT         FORCEHALTED       
  NOSHPROG            PROG                IMMPROG
  PROG_ON_CONNECT     SILENTEFFECT        IGNOREZONE
  PAGELOCK            MAIL_LOCKDOWN       ATRUSE
  NOGLOBPARENT        LOGROOM             EXFULLWIZATTR
  NODEFAULT           CHKREALITY          HIDEIDLE
  MORTALREALITY       SNUFFDARK
 
  Specify 'TOGGLE' after each toggle in help.
  Example: wizhelp monitor_site toggle 

& SNUFFDARK TOGGLE
  Toggle: SNUFFDARK (Wizard and higher only)
  
  This toggle, when set, will hide the Dark Exits that wizards normally
  see by default.

& MORTALREALITY TOGGLE
  Toggle: MORTALREALITY (Wizard and higher only)

  This toggle, when set, allows a wizard to override the wiz_always_real
  setting if it is enabled. This is to save wizards from getting spammed
  by alot of descs without being able to sanely evade it, or just to test
  some reality settings. With this @toggle set, a wizard can edit their
  rx/txlevels normally.
  
& HIDEIDLE TOGGLE
  Toggle: HIDEIDLE (Wizard and higher only)
  
  This toggle when set, stops a player's idle time from being updated.
  In addition, their command count stays frozen.  This is useful if
  you want to appear 'idle' while still doing work.
  
  Please don't abuse it.

& CHKREALITY TOGGLE
  Toggle: CHKREALITY (Wizard and higher only)
  
  When set on a target, and when reality locks are enabled via the
  reality_locks @admin param, it will allow the target to check its
  @Lock/user lock (_NOT_ @lock/use, @lock/user) for passing of the
  reality check.  This allows special permission setting and tweeking
  to make realities fully enhanced and powered.

& NODEFAULT TOGGLE
  Toggle: NODEFAULT (Wizard and higher only)
  
  When set on a target, that target will not inherit 'special' attribute 
  handling when it has attributes that are locally or globally set DEFAULT.  
  Special attribute handling is only useful for built-in attributes that 
  are passed through @o* attributes.  Such as @desc, @odesc, or the like.
  
  This does not effect local &format<attr> handlers.
  
  See Also: room_attr_default, exit_attr_default, player_attr_default, 
            thing_attr_default
  
  Special:  See normal help for the DEFAULT attribute flag

& EXFULLWIZATTR TOGGLE
  Toggle: EXFULLWIZATTR (Immortal only)
  
  This toggle, when set on a player with the @power EXAMINE_FULL, will
  allow the target player to be able to see all hidden wizard attributes.
  This includes all special attributes that start with '_'.
  
  This will also work on all @aflag definitions as long as it's a wizard
  and lower for seeable.  This does not grant the ability to set attributes.
  This also will not work on any @aflag definition of immortal or god.
    
& NOGLOBPARENT TOGGLE
  Toggle: NOGLOBPARENT (Wiz only by default)
  
  See normal 'help' on this toggle.

& ATRUSE TOGGLE
  Toggle: ATRUSE (Immortal only)
  
  This toggle, when set, allows a player to use ATTRIBUTE USELOCKS if the
  admin parameter 'secure_atruselock' is enabled.
  
  See Also: (help, not wizhelp) on ATTRIBUTE USELOCKS

& IGNOREZONE TOGGLE
  Toggle: IGNOREZONE (Immortal only)
  
  This toggle, when set on either a location and/or a zonemaster, will enable
  @icmd's or global @admin access's to be placed on commands that will be 
  effected on that location and/or zone.  Anything within a room in the
  zone or at that target location will have the restrictions applied to them
  automatically.  This does not effect by-player @icmd's or other global
  permissions.
  
  See Also: @icmd

& SILENTEFFECT TOGGLE
  Toggle: SILENTEFFECT (Royalty and higher only)
  
  This toggle is more an internal toggle though can be set independently.
  When set, it snuffs all internal did_it code on that target.  This includes
  successes, fails, aenters, aleaves, etc.

& PROG TOGGLE
  Toggle: PROG (Royalty and higher only)
  
  When set on the target, it specifies that it can use @program on
  other players.  This toggle is inherited if set on the player.
  
  See Also: IMMPROG, NOSHPROG

& PROG_ON_CONNECT TOGGLE
  Toggle: PROG_ON_CONNECT (Royalty and higher only)
  
  When set on the target, the default behavior of the global setting
  of remaining in a program when you reconnect is reversed for the
  target.
  
  See Also: login_to_prog

& NOSHPROG TOGGLE
  Toggle: NOSHPROG (Immortal only)
  
  When set on the player, that target player can NOT use commands
  from within a @program. (i.e.  they can't use |command).  This
  logic is REVERSED if the @admin parameter NOSHELL_PROG is enabled.
  Check @list options to see if it's enabled or not.  Be careful
  with this toggle as it can lead people to not only be stuck inside
  a program, but unable to do anything at all if the program is
  looping.  
  
  Immortals are immune to this toggle.
   
  See Also: PROG, IMMPROG

& IMMPROG TOGGLE
  Toggle: IMMPROG (Immortal only)
  
  When set on a player, that player can not use @quitprogram nor can
  anyone else @quitprogram that player short of an immortal.  This is
  handy if you wish people to remain in a program.  PLEASE keep in mind
  that this toggle can cause someone to remain in a program for infinity
  so code wisely.  
  
  Immortals are immune to this toggle.
  
  See Also: PROG, NOSHPROG

& FORCEHALTED TOGGLE
  Toggle: FORCEHALTED (immortal only)
  
  When set on the target, that target will then be able to @force items
  that are set HALT.  This in effect bypasses the normal protection provided
  by the HALT flag.  Useful for master room code that requires @forcing the
  target under all circumstances.

& SEE_SUSPECT TOGGLE
  Toggle: SEE_SUSPECT (immortal only)
  
  When set on a player, that player will be able to monitor suspect
  players in the WHO/DOING and when they connect/disconnect with the
  MONITOR toggle.  This effects all bit-levels below wizard as wizard
  sees suspect players automatically.

& MONITOR TOGGLE
  Toggle: MONITOR (arch and higher only)
  
  When set on a player, it reports logins/logouts of players to the mush.
  This is the controlling toggle for most of the MONITOR spam.

& MONITOR_BAD TOGGLE
  Toggle: MONITOR_BAD (immortal only)
  
  When set on a player, that player will be informed of any BAD logins
  that are tried at the connect screen.

& MONITOR_CPU TOGGLE
  Toggle: MONITOR_CPU (immortal only)
  
  When set on a player, that player will be informed of any process that
  exceeds the CPU ceiling built into the MUSH.  

& NO_FORMAT TOGGLE
  Toggle: NO_FORMAT  (immortal only)
  
  When set on a target, that target will override any 'formatting' done
  with @conformat/@exitformat.  

& NO_TIMESTAMP TOGGLE
  Toggle: NO_TIMESTAMP (immortal only)
  
  When set on an item, that item will no longer be updated with modified
  timestamps. Useful for database warehousing and such.

& WORN TOGGLE
  Toggle: WORN
  
  When set on a object, when that object is in someone's inventory it will
  show up in the 'worn' inventory set.  Use the @invtype attribute to
  specify in what manner the item is worn.
  
  See Also: WIELDED TOGGLE, @invtype, alt_inventories, altover_inv

& WIELDED TOGGLE
  Toggle: WIELDED
  
  When set on a object, when that object is in someone's inventory it will
  show up in the 'wielded' inventory set.  Use the @invtype attribute to
  specify in what manner the item is wielded.
  
  See Also: WORN TOGGLE, @invtype, alt_inventories, altover_inv

& MONITOR_TIME TOGGLE
  Toggle: MONITOR_TIME
  
  When set on a player, it enables them to see the time a person
  connects or disconnects to the mush via monitor.  
  
  NOTE:
  If the MONITOR toggle is turned off, it turns off the monitor
  completely.

& MONITOR_AREG TOGGLE
  Toggle: MONITOR_AREG
  
  When set on a player it enables them to see a players autoregistering
  either ONLINE or OFFLINE and any failed attempts therein.
  
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor
  completely.
  
  See Also: help toggles, help toggle list, help @toggle

& MONITOR_SITE TOGGLE
  Toggle: MONITOR_SITE
 
  When set on a player it enables them to see the person's site on
  connects via monitor. This toggle is implied by MONITOR_USERID. 
  
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor
  completely.
 
  See Also: help toggles, help toggle list, help @toggle
 
& MONITOR_CONN TOGGLE
  Toggle: MONITOR_CONN
  
  When set on a player, it enables them to see the person's site
  upon connection to the mush port via monitor.  The 'victim' need
  not connect to a player to be seen on monitor.  
  
  NOTE:
  If the MONITOR toggle is turned off, it turns off the monitor
  completely.

& MONITOR_USERID TOGGLE
  Toggle: MONITOR_USERID
 
  When set on a player it enables them to see the person's full
  userid@site if the mush is able to determine all of this information.
  If not it will only show site. This toggle implies MONITOR_SITE.
 
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor
  completely.
 
  See Also: help toggles, help toggle list, help @toggle
 
& MONITOR_STATS TOGGLE
  Toggle: MONITOR_STATS
 
  When set on a player it enables them to see the person's number
  of total connects, recent fails/total fails at login via monitor.
 
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor 
  completely.
 
  See Also: help toggles, help toggle list, help @toggle
 
& MONITOR_FAIL TOGGLE
  Toggle: MONITOR_FAIL
 
  When set on a player it enables them to see failed attempts to
  log into a player via monitor.
 
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor
  completely.
 
  See Also: help toggles, help toggle list, help @toggle
 
& MONITOR_DISREASON TOGGLE
  Toggle: MONITOR_DISREASON
 
  When set on a player, it enables them to see the reasons
  that a given player disconnected via monitor.
 
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor
  completely.
 
  See Also: help toggles, help toggle list, help @toggle

& MONITOR_VLIMIT TOGGLE
  Toggle: MONITOR_VLIMIT
  
  When set on a player, it enables them to monitor an attempt
  to surpass the maximum user-defined attributes defined by VLIMIT.
  
  NOTE:
  If the MONITOR toggle is turned off it turns off the monitor
  completely.
  
  See Also: help toggles, help toggle list, help @toggle

& @api
  Command: @api[/switch] <target> [=<value>]
  
  Note:  This requires the config parameter power_objects to be enabled.
         This is because this sets the API power on non-player types.
  
  The @api command is used to enable/disable a target from using the API 
  interface as well as enable authentication through both password and
  IP.   This is the central tool for configurating an object to be allowed
  for the API interface.
  
  The following switches exist:
    /status    -- (default) show the current API status of the target object
    /enable    -- entables the target to use the API interface.  This will
                  effectively @power the object API
    /disable   -- disables the target from using the API interface.  This will
                  remove the API @power
    /password  -- this will set the password into the _APIPASSWD attribute
                  on the target in a hash.  This should NOT BE CONFUSED with
                  the @password or @newpassword command.  TOTALLY different.
    /chkpasswd -- This will compare the password in the hash to one you enter
    /ip        -- This will set IP range(s) that is allowed to use the target.
                  If this is unset, it defaults to localhost.
   
  Examples: 
    > @api/enable #12345
    @api: Target is now allowed to process API handling
    > @api/ip #12345=123.123.*.*
    @api: IP allow list set
    > @api/password #12345=foobar
    @api: Password set
    > @api/chkpasswd #12345=bob
    @api: Password did not match.
    > @api/chkpasswd #12345=foobar
    @api: Password matched.
    > @api/disable #12345
    @api: Target is no longer allowed to process API handling
  
  See Also: API, api_port, api_nodns, forbidapi_host, forbidapi_site, 
            passapi_host, passapi_site, max_lastsite_api, power_objects

& @DEPOWER
  Command: @depower[[/switch] <user>=[@o|@g|@a] arg ...]
  
  The @depower command is used to remove powers from given players.  This
  will override any @power or BIT the player may have.  This can be used
  only by super royalty.  The @admin param 'power_objects' must be enabled
  for @depowers to have any meaning on non-players.
  
  The following switches exist:
  
      /OFF (default) : This disables the given power from use entirely.
      /GUILD[MASTER] : This reduces the power to GUILDMASTER level.
      /ARCH[ITECT]   : This reduces the power to ARCHITECT level.
      /COUN[CILOR]   : This reduces the power to COUNCILOR level.
      /PURGE         : This totally removes the DEPOWER list from target.
      /CHECK         : This lists the depowers currently employed on target.
      /REMOVE        : This removes the depower from the target.
  
{ See wizhelp depower2 for more }

& DEPOWER2
  Command: @depower (continued)
  
  You can also specify a toggle for each individual power.  The following
  toggles exist:
      @o             : This disables totally the power of the player (default)
      @g             : This lowers the given depower to GUILDMASTER level.
      @a             : This lowers the given depower to ARCHITECT level.
      @c             : This lowers the given depower to COUNCILOR level.
  
  Do note that the use of the individual toggle overrides the /switch
  used on the given power.
  
  Example:  @depower *twink=@c abuse @a noexamine
            @depower/off *supertwink=abuse noexamine

& DEPOWER LIST
  There are various depowers available with the use of @depower.  
  These are:

 *WALL            *LONG_FINGERS         STEAL             CREATE
  WIZ_WHO         *CLOAK                BOOT              PAGE              
  FORCE            LOCKS               *COM              *COMMAND         
 *MASTER           EXAMINE              NUKE             *FREE          
 *OVERRIDE         TEL_ANYWHERE         TEL_ANYTHING     *PCREATE     
 *QUOTA            MODIFY              *ABUSE             CHOWN_ME
  CHOWN_OTHER     *UNL_QUOTA            SEARCH_ANY        GIVE
  RECEIVE         *PASSWORD             NOGOLD            NOSTEAL
 *POWER           *MORTAL_EXAMINE      *PERSONAL_COMMAND *DARK
  
  
  Any depower with a '*' specified a toggle and will be turned on or off
  and setting various power levels are meaningless.
  
  Listing on individual depowers are available by typing:
    wizhelp depower <power>

& DEPOWER DARK
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] dark
  
  This depower, like its cousin CLOAK will disable the given abilities from
  the target.  However, unlike CLOAK which just stops the wizard's ability
  to wizcloak from a target, the DARK flag disables ALL CAPABILITIES of the
  dark flag in every situation.  This has the side-effect of disabling the
  wizard cloak ability as it depends on the DARK flag to make it happen.
  
  See Also: DEPOWER CLOAK

& DEPOWER PERSONAL_COMMAND
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] personal_command
  
  This depower disables the target player from executing any $commands on
  anything they own.  This will only effect things they own, not any other
  $commands.
  
& DEPOWER MORTAL_EXAMINE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] mortal_examine
  
  This depower will drop all examine (and similiar functionality) of the
  target down to as if they were only a mortal.  This effects examine,
  @decompile, lattr(), and similiar features.
  
  See Also: depower examine

& DEPOWER POWER
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] power
  
  This depower will toggle on/off the wizards ability to see/set/remove
  @powers on players.  

& DEPOWER PASSWORD
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] password
  
  This depower will toggle on/off the players ability to set newpasswords
  (if available to them) as well as stop them from changing thair password
  or being newpassworded except by an immortal.
  
& DEPOWER NOGOLD
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] nogold
  
  This power lowers (or disables) the player's ability to give gold.
  If disabled, they can not give anyone gold.  if lowered, they can
  only give gold to a specified ammount dependant on what level they
  are set at.
  
        OFF         - 0
        GUILDMASTER - 500
        ARCHITECT   - 2000 
        COUNCILOR   - 5000

& DEPOWER NOSTEAL
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] nosteal
  
  This power lowers (or disables) the player's ability to steal gold.
  If disabled, they can not steal any gold.  if lowered, they can
  only steal gold to a specified ammount dependant on what level they
  are set at.
  
        OFF         -  0
        GUILDMASTER - -500
        ARCHITECT   - -2000 
        COUNCILOR   - -5000

& DEPOWER GIVE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] give
  
  This depower will lower (or turn off) the player's ability to give
  anything (objects to money).  The level it is set to restricts
  to what level you can give to.  For example:  If set to architect,
  then you can only give to architects and higher.  Anything else
  would give a 'Permission Denied.'

& DEPOWER RECEIVE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] receive
  
  This depower will lower (or turn off) the player's ability to
  receive anything (objects to money).  The level it is set to
  restricts to what level they can receive something from.  For 
  example: If set to architect, then only architects and higher
  can give the targetted player anything.

& DEPOWER SEARCH_ANY
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] search_any
  
  This depower will lower (or turn off) the player's ability to
  do @searches on other people.  If set to architect, then this
  player can only get searches on players at architect and lower
  level.
 
& DEPOWER UNL_QUOTA
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] unl_quota
  
  This toggle depower will turn off the ability of the given user
  to have UNLIMITED @quota. 
  
  To turn off their ability to GIVE quota, you need to depower them
  from QUOTA as well.

& DEPOWER ABUSE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] abuse
  
  This toggle depower will turn off the ability to use any $ command
  on any object that you do not specifically own.

& DEPOWER CHOWN_ME
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] CHOWN_ME
  
  This depower will lower (or turn off) the player's ability to
  chown objects to themselves.  When lowered, it effects the
  level of the object that they may chown to themselves.

& DEPOWER CHOWN_OTHER
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] CHOWN_OTHER
  
  This depower will lower (or turn off) the player's ability to
  chown objects to other players.  When lowered, it will effect
  both the level of object they chown and the level of player that
  they are chowning to.

& DEPOWER QUOTA
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] quota
  
  This toggle depower will turn off the ability to give @quota to
  any player (including yourself).  It overrides all bits and powers.
  
  To disable a player from having UNLIMITED quota, you can use the
  depower of UNL_QUOTA.

& DEPOWER MODIFY
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] modify
  
  This depower will lower (or turn off) the players ability to
  modify objects. (ie: set/edit attributes, set flags, etc).
  When turned off, the player is restricted from modifying anything
  but their own objects.  If you wish to disable that player from
  modifying his things in addition, use the NOMODIFY flag or set
  the player GUEST.

& DEPOWER PCREATE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] pcreate
  
  This toggle depower will turn off the ability to PCREATE new players.
  It overrides all bits and powers.
  
& DEPOWER FREE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] free
  
  This toggle depower will disable the free use of commands/functions.
  ie: pages will cost money as will anything else as if they were
  a normal player.
  
& DEPOWER COM
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] com
  
  This toggle depower turns off the ability to use the com system.
  This includes +com and +chan.
  
& DEPOWER COMMAND
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] command
  
  This toggle depower will disable all use of $-commands completely.
  The user will get error messages for anything used in such a case.

  
& DEPOWER PAGE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] page
  
  The page depower is set up so you can page only up to the level
  of player or disable them entirely.  It overrides all powers and
  bits.
  
& DEPOWER CREATE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] create
 
  The create depower will establish a level that people can create
  things.  This can go down to disabling the ability to create things.
  This includes @dig, @create, @open, and @clone.
  
& DEPOWER TEL_ANYTHING
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] tel_anything
  
  This depower will drop to the given level (or turn off) the ability
  to teleport other things.  The user will always be able to @tel their
  own things.
  
& DEPOWER NUKE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] nuke
  
  This depower lowers who you can nuke or turns off the ability
  completely.
  
& DEPOWER BOOT
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] boot
  
  This depower will lower to the specified level or turn off
  completely the ability to @boot other players.
  
& DEPOWER STEAL
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] steal
  
  This toggle depower will disable the ability to steal money
  (give negative gold) to other players
  
& DEPOWER TEL_ANYWHERE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] tel_anywhere
 
  This depower will lower or disable the ability to @tel to other
  places.  If disabled, they can only teleport to areas they own.
  
& DEPOWER EXAMINE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] examine
  
  This depower will lower or disable the ability to examine things.
  If 'off' (disabled), they will be unable to examine even visual
  things.  They can still examine their own objects.  This effects
  all similiar functionality to examine.
  
  See Also: depower mortal_examine  

& DEPOWER LOCKS
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] locks
 
  This depower will lower or disable the ability to pass lock
  checks.  In doing this, it checks ownership.  If disabled (off),
  they can not pass *ANY* locks even those they normally can.
  
& DEPOWER WALL
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] wall
 
  This toggled depower will turn off the ability to use any
  switch or @wall itself.

& DEPOWER WIZ_WHO
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] wiz_who
 
  This depower will lower or disable the ability to do a wizard_who
  from @power or the ability of a standard wizard.  If 'off', the
  wiz_who is converted into a normal DOING.

& DEPOWER FORCE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] force
  
  This depower will lower or disable the ability to @fo anyone or
  anything up to that level.  If 'off', all they can @fo are
  themselves and their possessions.
  
  This also impacts @sudo.

& DEPOWER MASTER
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] master
 
  This depower disables the ability to use any command in the master
  room.  It will return natural error messages as if they typed the
  wrong command.

& DEPOWER OVERRIDE
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] override
  
  This depower will lower or disable the ability to override locks.

& DEPOWER LONG_FINGERS
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] long_fingers
 
  This toggle depower will disable the ability to address things
  remotely.  This includes @pemit/whisper/get/take/etc.

& DEPOWER CLOAK
  Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] cloak
 
  This nasty toggle disables the wizards ability to cloak and disables
  all effects of the standard 'cloak' flag.
  
  See Also: DEPOWER DARK

& @POWER
  Command: @power[[/switch] <user>=[!|@o|@g|@a|@c] arg [!|@o|@g|@a|@c] arg2]
  
  The @power command is used to give players given abilities not normally
  had.  Any power that SUPER-ROYALTY/ROYALTY wish to grant them are inhereted
  to any/all of their belongings as long as the INHERIT flag is set on it.
  Each 'arg' specified in the list will be a separate power to set/unset.  
  And the toggle for individual powers is optional.  Note that if no switch 
  is specified, /OFF is defaulted.  The @admin param 'power_objects' must
  be enabled for this to have effect on non-players.
  
  The following switches exist:
      /OFF (default) : This disables (removes) the power from the player
      /GUILD[MASTER] : This establishes powers at GUILDMASTER power.
      /ARCH[ITECT]   : This establishes powers at ARCHITECT power.
      /COUN[CILOR]   : This establishes powers at COUNCILOR power.
      /CHECK <user>  : This checks the current power list of the player.
      /PURGE <user>  : Removes all powers the given user has.
  
  see wizhelp power2 for more
& POWER2
  Command: @power (continued)
  
  You can also specify a toggle for each individual power  The following
  individual power toggles exist:
      @o             : This turns off a power. Similiar to /OFF switch.
      @g             : This sets power to GUILDMASTER.  Similiar to switch.
      @a             : This sets power to ARCHITECT.  Similiar to switch.
      @c             : This sets power to COUNCILOR.  Similiar to switch.
  
  Do note that the use of the individual toggle overrides the /switch used
  for that individual power.  @power without any arguments returns a list
  of available powers to be set.
  
  Example:  @power *goodplayer=@c free_quota @a steal @g tel_anywhere
            @power/counc *almostadmin=steal tel_anywhere tel_anyone
  
  See Also: POWER LIST, @toggle, @depower, DEPOWER LIST

& POWER LIST
  
  There are various powers available to be set with @power.  These are:
  
    API            *BOOT            CHANGE_QUOTAS     CHOWN_ANYWHERE 
   *CHOWN_ME       *CHOWN_OTHER    *EXAMINE_ALL       EXAMINE_FULL     
   *EXECSCRIPT      FREE_QUOTA      FORMATTING        FREE_PAGE       
    FREE_WALL       FULLTEL        *GRAB_PLAYER      *HALT_QUEUE      
    HALT_QUEUE_ALL *HIDEBIT        *JOIN_PLAYER       LONG_FINGERS   
    MONITORAPI     *NO_BOOT        *NOFORCE          *NOKILL          
    NOWHO           PCREATE        *PURGE            *SEARCH_ANY   
   *SECURITY       *SEE_QUEUE       SEE_QUEUE_ALL     SHUTDOWN     
   *STAT_ANY       *STEAL          *TEL_ANYWHERE     *TEL_ANYTHING
   *WHO_UNFIND      WIZ_IDLE       *WIZ_SPOOF        *WIZ_WHO        
   *WRAITH        
  
  Any powers with a '*' beside it can be power-defined from COUNCILOR 
  down to GUILDMASTER.

  Help is available separately to explain what each power does by typing:
      wizhelp power <power>

& POWER WIZ_SPOOF
  Power argument: @power[/switch] <user>=[@g|@a|@c] wiz_spoof
  
  This power grants the target the ability to spoof as if they were a wizard.
  The SPOOF flag overrides this @power
  
  See Also: SPOOF
 
& POWER WIZ_IDLE
  Power argument: @power[/switch] <user>=[@g|@a|@c] wiz_idle
  
  This power grants the target player the ability to use the enhanced
  idle features normally allowable only to wizards.
 
& POWER API
  Power argument: @power[/switch] <user>=[@g|@a|@c] api
  
  This power is set/removed with the @api command.  You may specify this
  through the @power system as well.  This essentially is a toggle power
  to empower the target from being able to use the API system.
  
  Without this power, API will not work on the target.
  
  See Also: @api
  
& POWER MONITORAPI
  Power argument: @power[/switch] <user>=[@g|@a|@c] monitorapi
  
  This is a filter @power that if set will monitor all API connections
  to the mush.  This filter was created because it can get VERY VERY
  spammy.  Upwards to hundreds of connections a minute spammy.
  But hey, it's useful so it's in here.
  
  See Also: MONITOR
  
& POWER FORMATTING
  Power argument: @power[/switch] <user>=[@g|@a|@c] formatting
  
  Unlike other @powers, this power IS NOT INHERITABLE.  However, unlike other
  powers, this power works through parent trees.  This also works with
  global parents via global_parent_room/thing/player/obj.
  
  This will follow the following chain to check for the FORMATTING power.
  
    self -> @parent(s) -> Global Parent -> Zone(s)
  
  The NOGLOBPARENT @toggle will stop it inheriting the FORMATTING power from
  any global parent.  
  
  The NOZONEPARENT @toggle will stop it inheriting the FORMATTING power from
  any zone master.
  
  If it fails a @parent/lock check, it will not inherit the FORMATTING power
  from that parent in question.  No lock means it automatically passes.
     
  This power will grant the target the ability to pass %0-%4 (respectively)
  into the @conformat, @exitformat, and @darkexitformat container
  formatters.  The substitutions are separated for each type of format.
  
  @conformat, @exitformat, @darkexitformat:
      %0  -- The dbref list (space separated) that the enactor will have
             seen normally by looking at the location.
      %1  -- The name list (| separated) that will show the colorized
             name, flags, altname, captions, and everything else that
             they normally will have seen by looking.
  
  @exitformat, @darkexitformat
      %2  -- The dbref list (space separated) of just the dark targets that
             the enactor would normally have been able to see.
      %3  -- The name list (| separated) that will show the colorized
             name, flags, altname, and everything else that would normally
             be seen with the dark targets that the enactor would normally
             see.
  
  See Also: formats_are_local, format_contents, format_exits, 
            global_parent_obj, global_parent_room, global_parent_thing,
            global_parent_player
  
  See Normal Help on:  @conformat, @exitformat, @darkexitformat
  
& POWER EXECSCRIPT
  Power argument: @power[/switch] <user>=[@g|@a|@c] execscript
  
  Unlike other @powers, this power IS NOT INHERITABLE.
  
  This power will grant the target the ability to use the execscript()
  function.  This effectively executes a script from the ~/game/scripts
  directory and reads the value back as if it was a native function.
  All output is sanitized in ASCII-7 printable characters.  All other
  characters are converted to a '?'.
  
  Power bitlevel GUILDMASTER grants the ability to use the execscript()
  function but disallows the ability to pass arguments to it.
  
  Power bitlevel ARCHITECT (and higher) grants the ability to use
  the execscript() function with optional arguments.
  
  Note that arguments passed to the script is also sanitized to avoid
  methods to garner outside shell access but extreme caution should
  be used in using this anyway.
  
  See Also: execscript()

& POWER FULLTEL
  Power argument: @power[/switch] <user>=[@g|@a|@c] fulltel
  
  This power enables the target player to teleport ANYWHERE except
  cloaked areas or #1.  This power again, follows restrictions of
  the @depower for teleport.  This only effects the players ability
  to teleport personally around, and does not impart abilities to
  his objects nor impart his ability to teleport other things around.

& POWER EXAMINE_FULL
  Power argument: @power[/switch] <user>=[@g|@a|@c] examine_full
  
  This power enables the target player to examine EVERYTHING except #1,
  cloaked items (unless normally able to examine them), and anything that
  is set NOEXAMINE (unless again, normally able to examine it).  This power
  follows restrictions of the @depower no_examine
  
  NOTE:  If you want them to see all wiz/hidden attributes as well, they
         need the 'EXFULLWIZATTR' toggle set on them as well.
 
& POWER NOWHO
  Power argument: @power[/switch] <user>=[@g|@a|@c] nowho
  
  This enables the target player to be able to use the @hide command to
  hide from the WHO.

& POWER HIDEBIT
  Power argument: @power[/switch] <user>=[@g|@a|@c] hidebit
  
  This power allows it so anyone set with this power doesn't display 
  their bit (or level of bit) to anyone that level and lower.  For example,
  if powered at HIDEBIT at architect level, then architects or lower are
  unable to see if they have any bitlevel by any means.  The targetted 
  player and their belongings can see their own 'hidden' flag(s).

& POWER PURGE
  Power argument: @power[/switch] <user>=[@g|@a|@c] purge
  
  This toggable power allows a player to bypass the recover list of the 
  mush and destroy the object totally.  They do this by using the /purge
  switch with @destroy.  Do this with care as once purged the object
  can *NOT* be gotten back.  This works like the normal TinyMUSH 
  @destroy and is just as fatal to the target.
  
& POWER SHUTDOWN
  Power argument: @power[/switch] <user>=[@g|@a|@c] shutdown
  
  This toggable power allows a player to shutdown the mush.  With the
  obvious security this brings up, the person who has this power
  (other than Royalty and higher) can not be forced to @shutdown
  or put into the wait queue a @shutdown.  They can only do it on
  the command line.  Royalty and higher can still @force someone
  powered to shutdown, though it's sorta meaningless since they
  can @shutdown themselves.
  
  This also impacts @sudo.

& POWER SEARCH_ANY
  Power argument: @power[/switch] <user>=[@g|@a|@c] search_any
  
  This power allows the player to search anyone up to and including
  the level it is established at.  For example, if set at 
  architect, then the player can search architects and lower.

& POWER SECURITY
  Power argument: @power[/switch] <user>=[@g|@a|@c] security
  
  This power allows the player to set/unset security related flags
  on the given level and lower.  For example, if set at
  architect level, then the player can set the security flags on
  anyone architect and lower.  
  
  The security flags are as follows:
    NOMOVE    NO_TEL   SLAVE   NO_YELL

& POWER WHO_UNFIND
  Power argument: @power[/switch] <user>=[@g|@a|@c] who_unfind
  
  This power allows the player to see UNFINDABLE people up to 
  and including the level specified.  If set at architect level,
  then they can see unfindable people in the who at architect
  and higher level.  Keep in mind this power is basically 
  useless if the @admin power WHO_UNFINDABLE is disabled.

& POWER WRAITH
  Power argument: @power[/switch] <user>=[@g|@a|@c] wraith
  
  This power allows the player to be able to automatically
  pass locks on exits, enters, and leaves up to and including
  the specified level.  Ie: at guildmaster that player can
  now automatically pass enter, leave, and normal exit locks
  on anything owned by a guildmaster and lower.

& POWER CHANGE_QUOTAS
  Power argument: @power[/switch] <user>=[@g|@a|@c] change_quotas
  
  This is a toggle power (on/off) that will enable the person to be
  able to set, unset, and view anyone else's quota.  The power is
  automatically toggled on if guildmaster or higher is used as
  the switch or if the @ option is used.

& POWER CHOWN_OTHER
  Power argument: @power[/switch] <user>=[@g|@a|@c] chown_other
  
  This power can be defined at a councilor level up to a councilor
  level and will enable the user to chown any other person's things
  to anyone else of which they have control over.  For instance,
  if the power level was architect, they could chown anything owned
  by an architect or lower to anyone else architect or lower.
  The switch to set it must be guildmaster to councilor.  This power
  does not allow the user to chown things to themselves.  That is
  the CHOWN_ME power.

& POWER FREE_QUOTA
  Power argument: @power[/switch] <user>=[@g|@a|@c] free_quota
  
  This toggled power allows the user to have INFINITE quota.
  The power is automatically toggled on if guildmaster or higher
  is used as the switch or if the @ option is used.

& POWER NO_BOOT
  Power argument: @power[/switch] <user>=[@g|@a|@c] no_boot
  
  This power allows the player to be immune from @booting by 
  any level up to the level specified by the /switch or the
  @ option.  For example, if NO_BOOT was set to councilor
  level, no one councilor powered or lower could @boot them.

& POWER TEL_ANYWHERE
  Power argument: @power[/switch] <user>=[@g|@a|@c] tel_anywhere
  
  This power allows the user to teleport anywhere up to the
  given bit level specified in the /switch or the @ option.
  Valid levels are guildmaster through councilor.  When set,
  it would be as if that power had that given ability at that
  bit level.

& POWER FREE_WALL
  Power argument: @power[/switch] <user>=[@g|@a|@c] free_wall
  
  This toggled power allows the user to have free use of
  @wall.  That is, the player may @wall all they desire without
  worry of it costing them anything.  The @ option may be used
  or the switch from guildmaster to councilor.

& POWER NOKILL
  Power argument: @power[/switch] <user>=[@g|@a|@c] nokill
  
  This power allows the user to be immune from killing/slaying
  by any level up to the level specified by the /switch or the
  @ option.  For example, if NOKILL was set to councilor level,
  no one up to and including councilor in power could slay or
  kill that user.

& POWER CHOWN_ANYWHERE
  Power argument: @power[/switch] <user>=[@g|@a|@c] chown_anywhere
  
  This toggled power allows the user to @chown anything they own
  remotely.  That includes objects set chown_ok.  They will need
  to specify the dbref# when @chowning it however.  This power
  is toggled by the @ option or the switch with the power.  For more
  information on remote permissions, look at LONG_FINGERS.

& POWER EXAMINE_ALL
  Power argument: @power[/switch] <user>=[@g|@a|@c] examine_all
  
  This power allows the user to examine things they normally may
  not have the permissions for.  The level at which they can examine
  is determined by the switch or the @ option.  You can specify from
  guildmaster to councilor and the user would then be able to examine
  as if they were that bitted level.

& POWER GRAB_PLAYER
  Power argument: @power[/switch] <user>=[@g|@a|@c] grab_player
  
  This power allows the user to grab (summon a player to their location)
  a given player up to the bitted level specified by the @ option
  or the switch.  Valid values are from guildmaster to councilor.

& POWER BOOT
  Power argument: @power[/switch] <user>=[@g|@a|@c] boot
  
  This power allows the user to @boot up to and including the level
  specified by the @power.  For example, if you had BOOT at guildmaster
  level, then you could @boot anyone from guildmaster and lower.
  Valid values are from guildmaster to councilor.

& POWER TEL_ANYTHING
  Power argument: @power[/switch] <user>=[@g|@a|@c] tel_anything
  
  This power, like the TEL_ANYWHERE power, is definable by the level
  of power you define it as.  Valid values are from guildmaster to
  councilor.  Like the power says, it will give the user the ability
  to teleport anything owned by that bitted level and less anywhere
  owned by that bitted level and less.

& POWER FREE_PAGE
  Power argument: @power[/switch] <user>=[@g|@a|@c] free_page
  
  This toggle power allows the user to page to their hearts content
  without having to pay for it's use.  You must specify either the @
  options or a switch of guildmaster through councilor to activate
  this power.

& POWER CHOWN_ME
  Power argument: @power[/switch] <user>=[@g|@a|@c] chown_me
  
  This power, akin to CHOWN_OTHER, is definable by bit levels of
  guildmaster to councilor for the switch and @ options.  This
  allows the user to @chown anything owned by that level and
  lower to themselves.  They can not @chown it to other people.
  That is for the chown_other power.

& POWER NOFORCE
  Power argument: @power[/switch] <user>=[@g|@a|@c] noforce
  
  This power, definable by bit levels of guildmaster to councilor,
  makes the user immune to all @forcing attempts by that defined
  bit level and lower.  For instance, if I set the NOFORCE power
  at councilor level, no one up to and including councilors can
  @force that user or their belongings to do things.
  
  This also impacts @sudo.

& POWER JOIN_PLAYER
  Power argument: @power[/switch] <user>=[@g|@a|@c] join_player
  
  This power, definable by bit levels of guildmaster to councilor,
  makes the user able to join (@tel to their location) any other
  player up to and including the level of the bit specified.  This
  takes effect on the bit power of the location of the player and
  not the player themselves.

& POWER STEAL
  Power argument: @power[/switch] <user>=[@g|@a|@c] steal
  
  This power allows you to steal (rob) people of their wealth.
  You can rob anyone up to and including the level specified.
  (robbing in this case is giving them negative money).  The valid
  levels are guildmaster through councilor for the switch and @
  option.

& POWER STAT_ANY
  Power argument: @power[/switch] <user>=[@g|@a|@c] stat_any
  
  This power, definable by bit levels of guildmaster to councilor,
  allows the user to tally (take status of) any user up to and
  including that bit level.  For example, if someone was
  @powered with STAT_ANY at councilor level, they could @search,
  @stat, stat(), search(), etc any user up to and including
  councilor level.

& POWER HALT_QUEUE
  Power argument: @power[/switch] <user>=[@g|@a|@c] halt_queue
  
  This power, definable by bit levels of guildmaster to councilor,
  allows the user to @halt any object in the queue equal to or
  lower than the bit specified by the switch or @ option.  For
  example, if HALT_QUEUE was specified at councilor level, they
  would be able to @halt any object in the queue owned by anyone
  councilor and lower.  For them to be able to see the dbref#'s
  in the queue, they need to have SEE_QUEUE.  To be able to use
  the /all switch to @ps, they need SEE_QUEUE_ALL.  This power 
  effects PID's as well.  Use with caution.

& POWER WIZ_WHO
  Power argument: @power[/switch] <user>=[@g|@a|@c] wiz_who
  
  This power, definable by bit levels of guildmaster to councilor,
  allows the user to see a WIZARD's WHO up to and including the
  level of the bit specified by the @power.  Yes, this also means
  they can see the user's hosts.  They only see with their WHO
  anyone they would have power equal to and lower.  For their 
  normal WHO, they'll need to use DOING.  As hostsites are
  private information, be strict with the use of this power.

& POWER SEE_QUEUE
  Power argument: @power[/switch] <user>=[@g|@a|@c] see_queue
  
  This power, definable by bit levels of guildmaster to councilor,
  allows the user to see dbref#'s in the queue up to and including
  the bit level the @power specified.  For example, if SEE_QUEUE
  was established at architect level, the user would be able to 
  see any object's dbref# in the queue that was owned by an
  architect or lower.  This power affects the ability to see PID's
  as well.

& POWER SEE_QUEUE_ALL
  Power argument: @power[/switch] <user>=[@g|@a|@c] see_queue_all
  
  This toggle power allows the user to successfully use the /all
  switch on @ps, giving them the ability to see all things 
  currently in the queue.  The toggle is set by specifying
  guildmaster to councilor in either the switch or the @ option.

& POWER LONG_FINGERS
  Power argument: @power[/switch] <user>=[@g|@a|@c] long_fingers
  
  This toggle power allows the user to access remotely anything
  they would have power over.  Normally, citizens can not @pemit,
  whisper, get, take, etc things remotely.  This power will enable
  the user to access things remotely.  To activate this power,
  guildmaster to councilor must be specified in either the switch
  or the @ options.

& POWER PCREATE
  Power argument: @power[/switch] <user>=[@g|@a|@c] pcreate
  
  This toggle power allows a user to @pcreate players as if they
  were a wizard.  To activate the power, you must specify from
  guildmaster to councilor in either the switch or @ options.

& POWER HALT_QUEUE_ALL
  Power argument: @power[/switch] <user>=[@g|@a|@c] halt_queue_all
  
  This toggle power allows a user to access the /all switch on the
  @halt, effectively halting every single command and object in
  the queue.  As this could cause problems in RP or guild 
  situations, give out sparingly.  This power also effects the 
  ability to @halt/pid processes in the queue.  This effects the
  @halt/pid command globally as well.  Use with caution.

& CPU
  RhostMUSH has built in CPU monitoring.  If you plan to run anything that
  will expend a great deal of CPU usage, please modify the admin parameters
  cpuintervalchk and cputimechk accordingly or your job will not run 
  properly.

& cd
  The cd command is only used on the connect screen.  This will
  connect the staff into the RhostMUSH with the DARK and UNFINDABLE
  flag. (The staff inherit any special abilities from both of
  these flags if they're able)
  
  Example:  (on the connect screen)  cd myplayer mypassword

& channel
  The wizards have extra mobility with the channel system by the
  following abilities:

    Architects:   Architects are able to join/leave any channel with
                  a '.' prefix.
  
    Councilors:   Councilors are able to do anything by the previous bit
                  in addition to joining/leaving any channel with a
                  '*' prefix.
 
    Royalty:      Royalty are able to do anything by the previous bits
                  in addition to joining/leaving any channel with a
                  '+' prefix.
 
    SuperRoyalty: Superroyalty can do anything of the previous bits plus
                  spoof on the channels with a '!' prefix like how ':'
                  for posing is done.
  
  For more help, see standard help on CHANNEL
& examine
  Command: examine[/<switches>] [<object>]
 
  Wizards may use the /debug switch to see additional information about the
  object.  The Owner, Exits, Next, and Contents fields of the object are
  shown in numeric form only, and an attribute list is included.
  
  Example:  examine/debug #12345

& give
  Command: give[/<switches>] <who> = <what>
 
  Wizards may use the /quiet switch to suppress the 'You give X to P' and
  'P gave you X' messages.  Other messages related to giving objects
  (such as the xDROP and XSUCC attributes on the object being given, or
  error messages) are not suppressed.
  
  Example:  give/quiet *player=10000
            give/quiet #123=#456

& SESSION
  Command: SESSION <prefix>
  
  The SESSION command displays character input and output information for
  all connected players, or just those who match <prefix>.
 
  This command can be used to help identify network problems as follows:
    - A nonzero Input Pending count can indicate indicate typeahead or a
      client program dumping commands faster than the command scheduling
      parameters let them be executed.  Telnet sessions in character mode also
      show up with positive Input Pending counts when the player is in the
      middle of typing a command.
    - A nozero Input Lost count means that the player has typed a line longer
      than what the mush can handle.  This usually indicates a problem with
      the player's client or terminal (a stuck key).
    - A persistently large Output Pending count can indicate netlag between
      the host site and the player's site, or merely that the player has
      performed a command that generated a lot of output which hasn't been
      sent yet.
    - A nonzero Output Lost count usually means that the player performed
      a command that produced more output than the output buffer could hold.
      It may also indicate network problems or that the player is generating
      output faster than the network or his client can process it.
  
  Example:  SESSION Nyc
     
& slay
  Command: slay <player/object>
  
  Kills the indicated player or object without paying any insurance to the
  victim.  It should be used in places where suicide should not be rewarded.
  
  Example:  slay *tinyjerk
  
  See Also: kill, IMMORTAL.

& WHO
  Command: WHO <prefix>
 
  The WHO command returns miscellaneous information about connected players.
  It returns the player name, connect time, idle time, and player flags just
  like the player WHO command (which is available as the DOING command), but
  returns the following information in place of the player's Doing string:
 
     Room         - The room that the player is in.
     Ports        - The current concentrator port that the player is 
                    connected to the mush by.
     Host flags   - located bwtween the Commands and Host fields:
                    F - forbidden       R - registration   + - suspect
                    U - hidden (@hide)  H - unfindable     D - dark
                    * - staff (opt)     W - Wizard (opt)   a - councilor (opt)
                    B - architect (opt) g - GuildMstr(opt) d - idle dark
                    h - idle unfindable $ - SSL connected
     Host         - The Internet host name or address from where the player 
                    has connected.  This can be cut off with 'whohost_size'

  Example: WHO Nyc
  
  See Also: SESSION, DOING, @conncheck.

& DOING
  Command: DOING <prefix>

  This command is very similar to the mortal WHO command (the wizard WHO
  command returns different information).  When run by a wizard, the DOING
  command reports additional information about the player in the form of flag
  letters between the idle time and the players' Doing string.  The following
  letters may be present:
   
      F - forbidden           R - registration       + - suspect
      U - hidden (@hide)      H - unfindable         D - dark
      * - all staff (opt)     W - Wizard (opt)       a - councilor (opt)
      B - architect (opt)     g - GuildMstr(opt)     d - idle dark
      h - idle unfindable     $ - SSL Connected
   
  Example:  DOING Nyc
  
  See Also: SESSION, WHO, DARK, UNFINDABLE, SUSPECT, idle_wiz_dark,
            idle_wiz_cloak

& wizhelp
  Command: wizhelp <topic>
  
  Displays information from the wizard help file.  The information is
  typically of use only to wizards and/or the game maintainer.
  
  Example:  wizhelp *master*
            wizhelp master_room
  
  See Also: the source code.

& @admin
  Command: @admin[/<switch>] <param>=<value>
  
  You may display most config options with the 'config()' function or with
  the command '@list options display' where you specify the config option.
  
  Sets a RhostMUSH configuration parameter to the indicated value.
  Type 'wizhelp config parameters' for a list of the config parameters that
  may be set.
  
  Note: Unless you use the /load, /save, etc arguments, this is not a 
        permanent change and will be reset to the default behavior after 
        the next reboot, shutdown, or startup.  To make this permanent, 
        add the entry in the .conf (default netrhost.conf).
  
  Please make sure you have 'include rhost_ingame.conf' toward the bottom
  of your netrhost.conf file so the below will work on reboots.
  
  Optional Switches:
    /load    -- This will load to a specified bref# (defined by admin_object)
                all the lines from the rhost_ingame.conf file, up to 1000 
                lines.
    /save    -- This will save all the _LINE## (in order) that was on the
                admin_object into the rhost_ingame.conf file.  This will
                overwrite the file and does not append to it.
    /execute -- This will execute all the admin parameters in the 
                rhost_ingame.conf file.
    /list    -- This will list what is currently defined in the
                rhost_ingame.conf file.
  
  Example:  @admin access=+chan ignore
  
  With the optional switches, note that the dbref# defined from the config
  option 'admin_object' must be a valid object, must be owned by an immortal,
  and the _LINE## (like _LINE0, _LINE1, _LINE2, etc) must be in order and
  must start with _LINE0.  Any skipping of numbers will not be read.  Any
  invalid @admin config paremeter will be skipped.  Any comment you wish to
  add to the file must start with a '#'.  Like &_LINE1 #obj=# my comment.
  
  Any blank lines that were added to the rhost_ingame.conf manually will be
  loaded as a comment and have a '#' when you save.  Any lines over 1000
  will not be read.
  
  See Also: admin_object, @list, config()

& @apply_marked
  Command: @apply_marked <command>
  
  Performs <command> once for each object in the database that has its MARK
  flag set, substituting the characters ## for the object number of the
  marked object.  The command is performed by the player invoking the
  @apply_marked command, not by the marked object.  This command may only
  be used when database cleaning is disabled (via @disable cleaning),
  as cleaning uses the MARKED flag to check connectivity.
  
  Example:  @apply_marked examine
  
  See Also: @mark, @mark_all, MARKED.

& @attribute
  Command: @attribute[/<switch>] <attrib>[=<value>]
  
  Performs operations on user-named attributes depending on the switch used.
  The following switches are available:
     /access   - Changes the access to the named attribute.  <value> is a
                 space-separated list of permissions to add or remove from
                 the attribute's access permissions.
     /delete   - Removes the named attribute from the attribute table.
                 This switch does not remove instances of the attribute from
                 objects, and any that remain will be renamed to the 
                 user-named attribute that re-uses the attribute number
                 of the deleted attribute.
     /rename   - Changes the name of the named attribute to <value>.
 
  After completion of this command you will be presented with the
  current permissions list for the attribute in question (not /delete).
  You can also specify this command with either no switches or the
  /access switch and specify an attribute but no value and it will
  tell you the access permissions of the attribute without you having
  to alter them first.
 
  Note that changes to user-named attributes performed by this command
  are permanent and do not need to be performed each time the RhostMUSH is
  restarted.
  
  For built-in attributes (like @desc) you will need to use the @admin
  parameter attr_access and this will require it to be in the netrhost.conf
  file to be 'permanent' through reboots.
  
  Example:  @attribute/access wiz_only_attribute=royalty pinvisible
  
  See Also: attr_access
 
& @cmdquota
  Command: @cmdquota[/<switch>] <player|port> = <1-99999>
  
  This sets a temporary maximum command quota for the target player's current
  connections.  This only works for connected players, and only sets it
  for the duration of the player being connected.  Once logged out of 
  their account, the value is reset to default maximum for either player
  or wizard, depending on their bitlevel.
  
  The value must be greater than 0 and less than 100,000.
  
  Following switches are available:
    /port -- specify a port/descriptor instead of a player for target.
   
  You may use @conncheck/quota to see command quotas of connected sockets. 
  
  Example:
    > @cmdquota tinyplayer=10000
    @cmdquota: tinyplayer online command quota duration has been set to 10000.
               Once this value is below 100 it will regenerate as normal.
  
  See Also: command_quota_max, wizcommand_quota_max, @conncheck
 
& @conncheck
  Command: @conncheck[/<switch>]
  
  This works like WHO or DOING but shows full email idents as well.
  This is only useable by Super-Royalty (Immortals).  This command also
  shows what DOORS (help @door) that people are currently using.
  
  The following switches exist:
    /quota   - show the command quotas for all connected sockets/ports.
    /account - show account information for all connected players
  
  See Also: @cmdquota, WHO, DOING, ACCOUNT MEMBERSHIP

& @remote
  Command: @remote <location>=<command>
  
  This will execute <command> at a remote location <location>.  The location
  must be valid and controlled by you otherwise it will give a permission 
  denied and execute the command at your current location as normal.
  
  Example: 
    > @remote #0=@emit boo!
    (At Room #0) boo!
  
  See Also: (normal help) @sudo, @force 

& @reboot
  Command: @reboot[/silent]
  
  This command will reboot the server loading in any new source code changes
  and successfully unloading and reloading the database to insure database
  integrity. Network socket connections and the log file will remain
  undisturbed across the reboot.

  Immortals can use the /silent switch to trigger silent reboots that will
  not notify anybody else on the game.

& @site
  Command: @site[/switch] <site>=<mask>
  
  This command takes site and mask information just as @admin would for
  permit_site, register_site, forbid_site, and noguest.  However, instead
  of setting the various site, it will remove all matching instances of
  the site.  You may use RFC notation.  The following switches exist:
    /NOGUEST       - removes site information for dissallowing guests.
    /NOAUTOREG     - removes site information for autoregistered sites.
    /REGISTER      - removes site information for register only sites.
    /SUSPECT       - removes site information for suspect sites.
    /FORBID        - removes site information for forbidden sites.
    /FORBIDAPI     - removes site information for API forbidden sites.
    /PERMIT        - removes site information for unrestricted sites.
    /TRUST         - removes site information for trusted sites.
    /NOAUTH        - removes site information for authentication checks.
    /NOHOST        - removes site information for DNS checks.
    /PASSPROX      - removes site information for bypassing proxy checks.
    /PASSAPI       - removes site information for API bypasses
    /HARDCONN      - removes site information for hardconnections.
    /ALL           - removes all matching site information.
    /LIST          - show the raw *_host listings that you can use for
                     removal.  Handy if you use the optional connection args.
  
  It will remove all matching instances for each switch field.  This command
  is only accessable by immortals.
  
  Example:  @site/permit 123.123.123.0=255.255.255.0
            @site/permit 123.123.123.0=/24
  
  See Also:  @admin, permit_site, register_site, suspect_site, forbid_site,
             noguest_site, trust_site, passproxy_site, forbidapi_site,
             passapi_site, noautoreg_site, nodns_site, noauth_site, 
             hardconn_site, @list 

& @convert
  Command: @convert[/alternate] <player>
  
  This converts the player's current QUOTA system from their current system
  to either the alternate and enhanced quota system (by using the /alternate)
  or back to the default system (no switches)
  
  (no switch)      - convert the player's alternate quota back to the default.
  /ALTERNATE       - convert the player's quota to the alternate format.
  /ALL             - convert ALL player's quota to the set format.
  /OVERRIDE        - overrides all settings and forces conversion of quota.
  
  Example:  @convert APlayer
  
  See Also: @quota
 
& blacklist_nodns.txt
& blacklist.txt
& @blacklist
  Command: @blacklist[/<switch>] [<argument>]
           @blacklist/nodns[/<switch>] [<argument>]
  
  NOTE:  If you @blacklist 127.0.0.1 you may inadvertently disable SSL tunnels
  
  This command lists, loads, or clears the current blacklists.  Blacklists are
  similiar to forbid sites, except it keeps them in a separate list to avoid
  spamming the site list.  You can have a maximum of 100,000 entries in the
  blacklist.  This reads a list of sites in a file blacklist.txt that it 
  populates into the blacklist.  All invalid sites will be ignored.  All
  site masks are assumed to be '255.255.255.255' (/32).  The blacklist.txt
  file will be a single line list of IP's that you wish to have in the
  blacklist.  There is a script that can be ran that will populate this
  file with all known TOR exit points.
  
  The second argument, like the normal @blacklist, only applies to NoDNS 
  entries.
  
  The blacklist file will be blacklist.txt
  The NoDNS blacklist file will be blacklist_nodns.txt
  
  You may optionally have a netmask (in ipv4 or CIDR notation) after the IP
  in the blacklist.txt.  If no masks is seen, it will assume /32.  
  
  The following switches exist for @blacklist:
    /load   - Load in all sites in the blacklist.txt file
    /clear  - purges the blacklist
    /list   - lists all sites in the blacklist.  This shows 4 to a line.
    /mask   - like list but will show the IP and associated NETMASK.  This
              shows 2 IP's and 2 NETMASK's to a line.
    /search - search for a wildcard IP address (@blacklist/search 127.*)
    /add    - Add an IP with a mask (syntax: @blacklist/add IP MASK)
    /del    - Delete an IP with a mask (syntax: @blacklist/del IP MASK)
              Note: MASK if not specified assumes 255.255.255.255
  
  The following feature switches can be used with the above 4 switches:
    /nodns - If this is used with any of the 4 main switches, it will 
             work against the NoDNS lists and not the blacklists.
  
{ see 'wizhelp @blacklist2' for arguments and examples }
{ 'wizhelp blacklist file' for an example of the blacklist.txt file }

& @blacklist2
  (CONTINUED)
  Command: @blacklist[/<switch>] [<argument>]
  
  If no switch is specified, it gives a summary of sites in the blacklist.
  
  /list and /mask may specify a page value <argument> or the argument 'all'.  
  If you do not specify a value <argument> it defaults to '1'.  You must 
  specify '0' or 'all' to get a complete listing.
  
  It is STRONGLY suggested you use the paging values with most blacklists 
  that hold proxies, it could contain tens of thousands of entries.  
  Using /list or /mask with the '0' or 'all' argument will list ALL sites
  and can be extremely long and spammy.
  
    Examples:
    > @blacklist/list 1   (shows page 1)
    > @blacklist/list     (shows page 1)
    > @blacklist/list all (shows all sites)
    > @blacklist/list 0   (shows all sites)
    > @blacklist/mask 20  (shows page 20) 
    > @blacklist/mask all (shows all sites)
    > @blacklist/mask 0   (shows all sites)
    > @blacklist/search 50.42.* (shows all sites starting with 50.42.)
    > @blacklist/add 12.12.12.0 255.255.255.0 (add IP with MASK)
    > @blacklist/del 12.12.12.0 255.255.255.0 (delete IP with MASK)
  
  With /list, any entry that has a [M] before the IP signifies that there
  is a non-standard netmask associated with the IP.  A nonstandard netmask
  is considered one that is not /32 (255.255.255.255).
  
  The default value of blacklists allowed are 100,000.  This value can
  be configured with blacklist_max for between 1000 and 5,000,000.
  
  { 'wizhelp blacklist file' for an example of the blacklist.txt file }
  
  See Also: forbid_site, @site, blacklist_max

& blacklist_nodns file
& blacklist file
  Topic: blacklist file contents
  
  The blacklist.txt file (which will reside in the game directory) will
  look like the following as an example:
  
     123.123.123.123
     122.122.122.0 /24
     122.122.0.0 255.255.0.0
  
  If you do not specify a netmask, it will assume 255.255.255.255 (/32) as
  the netmask.  You may use CIDR notation (ie: /24) or the ipv4 notation
  instead (ie: 255.255.255.0).  
  
  IP and NETMASK needs to be separated by a white space.  This can be
  one or more spaces and/or one or more tabs.
  
  If the IP or netmask is invalid, it will skip the entry.
  
  See Also: @site, @blacklist
  
& @boot
  Command: @boot[/<switches>] <player>
  
  Severs the named player's connection to the game.  The player is given a
  notice that they have been booted.  If the player is connected to the game
  more than once, then all connections to that player are severed.
 
  The following switches are available:
    /quiet - Don't give the booted player any special notice.
    /port  - Disconnects only a specific port (port numbers may be obtained
             from the SESSION command).  In this case <player> must be a
             number.
  
  Example:  @boot/quiet *jerk
  
  See Also: @destroy, @toad, @turtle, SESSION.

& @chown
  Command: @chown[<switch>] <object>=<player>
 
  Wizards may @chown objects, rooms, and exits to other players.
  @Chowned objects are set HALT.
  
  The following additional switches are available to wizards:
    /preserve - preserve flags on target item.
 
  See Also: @chownall.

& @clone
  Command: @clone[/<switches>] <object>
  
  Wizards may also specify the /preserve switch, which preserves the original
  owner of the object in the new copy, instead of creating the copy as being
  owned by the wizard.

& @chownall
  Command: @chownall[/<switch>] <victim>[=<recipient>]
  
  Changes the ownership of all of the victim's objects, rooms, and exits to
  the indicated recipient (or to the wizard performing the @chownall if
  no recipient is specified).  All objects, rooms, and exits are set HALTED.
  
  Example:  @chownall *tobenuked=aholderchar
  
  The following additional switches are available to wizards:
    /preserve - preserve flags on target items.
    /exit     - Specify just exits to chown.
    /room     - Specify just rooms to chown.
    /thing    - Specify just things to chown.
    /player   - Specify just players (Robots via @robot) to chown.
   
  All switches can be combined.  If you do not specify a TYPE switch it 
  will assume all types (which is the default behavior).
  
  Without specifying /preserve, Robots will be owned to themselves as this
  could be a security risk otherwise.
     
  Be careful when using /preserve with @chownall as some things may not be
  desireable to have flags passed over!  This may be a security risk!
   
  See Also: @chown.

& @cut
  Command: @cut <object/exit>
  
  Cuts off the object or exit list for the current location at the indicated
  object or exit by setting [next(thing)] to NOTHING.  Objects or exits that
  follow in the chain are not moved or otherwise changed, and are only
  accessable by object number.  This command is intended for performing
  database repair, and should be used only with extreme caution.
  
  Example:  @cut #12345

& @dbclean
  Command: @dbclean[/<switch>]
  
  This command will perform an attribute purge of the database of any
  unused attributes in the hash tables.  Unused is defined as an attribute
  that is not currently defined (set) on ANY database object in the database.
  
  The optional switchs are available:
      /check  -- Do not actually purge but just show would would have been.
  
  Cleaning unused attributes is handy as that will reduce, in some instances,
  greatly reduce, the memory overhead of the mush.  Remember, the more 
  attributes you have in your hash tables (@list hash -- Check Vattr line),
  the more memory your mush will be using.
   
  Please be aware this only deletes the attributes, it does not renumber 
  them.  It was decided to forgoe renumbering the attributes on-line for
  a few reasons which are as follows:
    1.  Renumbering the attributes requires a massive overhead of allocated
        memory to keep track of the attributes on both side of the tree.
    2.  For large databases with large numbers of attributes, this can
        become next to impossible, especially if you resources are tight.
    3.  There's several more checks in RhostMUSH with attributes than there
        is in MUX, thereby requiring more overhead to renumberate.
    4.  The number of the attribute, regardless of gap, causes no additional
        overhead in the mush itself.
    5.  If someone needs to write (or manages to write) over 2 billion 
        attributes in a mush, without intending to do so, I want to shake
        their hand.  
  
  If there ever is a need to renumber attributes, please let the core devs
  know and we'll look to make a stand-alone program that re-numbers 
  attributes in a flatfile for your use.  In 25 years as of this writing, 
  there currently has not been a need.
  
  See Also: @dbck, @dump, @reclist, @recover, @purge

& @dbck
  Command: @dbck
  
  Performs a scan of the database looking for inconsistencies in the object
  chains, disconnected rooms, rooms waiting to be destroyed, and problems in
  the object free list.  Problems that are found are reported to the log
  file, disconnected rooms are reported to their owners, and players are
  credited for rooms destroyed.  Database checks are automatically run
  periodically, so there is usually no need to use this command.
  
  See Also: @admin, @disable, @enable, @list, @purge, @dbclean.

& @destroy
  Command: @destroy[/<switches>] <object>
  
  Players are always considered SAFE.  Objects owned by other players are
  not otherwise treated specially.
  
  The following wizard only switches exist:
    /PURGE  - Allows anyone with the power (or immortals) to be able to
              destroy the target and have it bypass the recover list.

& @disable
  Command: @disable <option>
  
  Turns off the indicated RhostMUSH runtime parameter.  The following 
  parameters may be turned off:
    building      - Allows players to use the building commands.
    checkpointing - Enables periodic database checkpoint dumping.
    cleaning      - Enables periodic scanning of the database for rooms
                    to be destroyed.
    dequeueing    - Allows commands to be removed from the queue and
                    executed.
    idlechecking  - Enables periodic checking for and booting of idle
                    players.
    interpret     - Enables execution of commands that place commands
                    on the queue.
    local_rwho    - Enables the RWHO command for querying a remote RWHO
                    server.
    logins        - Allows nonwizard players to connect to their characters.
    transmit_rwho - Enables transmission of player data to a remote RWHO
                    server.
  These parameters are all enabled by default.
  
  Example:  @disable logins
  
  See Also: @enable, @list.

& @doing
  Command: @doing[/<switch>] <text>
  
  Wizards may use the /header switch to set the Doing header in the WHO 
  report.  If no header is specified, the header is reset to "Doing".
  
  Example:  @doing/header This is the poll!

& @dump
  Command: @dump[/<switches> [<arg>]]
  
  Writes a checkpoint dump of the database to disk.  Checkpoint dumps are
  automatically performed periodically, so there is usually no need to use
  this command.  Switches may be used to either dump just the structure
  portion of the database to a flat file, or to ensure that all changes to
  the text database are written out to disk.  The default is to write out
  both files.
  The following options are available:
     structure  - Dump the structure portion of the database to a flat file.
     text       - Ensure that all changes to the text portion of the
                  database are written out to disk.
     flat       - Create full flatfile backup database '<mudname>.db.flat'
                  You may specify a separate filename <arg> but it will
                  have '.flat' appended to it.  The filename will have
                  validation checking.
  
  Example:  @dump/flat                (makes filename '<mudname>.db.flat')
            @dump/flat name_of_file   (makes filename 'name_of_file.flat')
            @dump                     (does a standard db dump)
  
  See Also: @admin, @disable, @enable, @list, @shutdown, @snapshot

& @enable
  Command: @enable <option>
  
  Turns on the indicated RhostMUSH runtime parameter.  The following 
  parameters may be turned on:
    building      - Allows players to use the building commands.
    checkpointing - Enables periodic database checkpoint dumping.
    cleaning      - Enables periodic scanning of the database for rooms
                    to be destroyed.
    dequeueing    - Allows commands to be removed from the queue and
                    executed.
    idlechecking  - Enables periodic checking for and booting of idle
                    players.
    interpret     - Enables execution of commands that place commands
                    on the queue.
    local_rwho    - Enables the RWHO command for querying a remote RWHO
                    server.
    logins        - Allows nonwizard players to connect to their characters.
    transmit_rwho - Enables transmission of player data to a remote RWHO
                    server.
  These parameters are all enabled by default.
  
  Example:  @enable logins
  
  See Also: @disable, @list.

& @fixdb
  Command: @fixdb[/<switch>] <object>=<value>
  
  This command directly edits the database structure according to the
  switch specified.  As such, it is possible to produce database
  inconsistencies that can hang or crash the server.  This command should
  be used with extreme caution.
 
  The following switches are available:
     contents     - Sets the contents pointer of <object> to <value>
     exits        - Sets the exits pointer of <object> to <value>
     location     - Sets the location pointer of <object> to <value>
     next         - Sets the next pointer of <object> to <value>
     owner        - Sets the owner of <object> to <value>
     pennies      - Sets the value or wealth of <object> to <value>
     rename       - Renames <object> to <value>
  
  Example:  @fixdb/exit #12345=#1234
  
& @flag
  Command: @flag[/<switch>] <oldflag>[=<newflag>]
  
  This command either removes alises of existing flags, or creates a NEW
  name for the flag.  For example, if you rename CONNECTED to BOBTHEWIZ
  Then whenever you reference the previous 'CONNECTED' flag, it will be
  seen as 'BOBTHEWIZ' instead.  This does not effect the character of 'c'
  for the flag, only the name of it.  This takes effect until the server
  is shutdown or rebooted.  To make a permanent addition, you need to
  use the 'flag_name' config parameter in the mushname.conf file.
  The flag name must be no less than three characters, no greater than
  15 characters, and can not be a previously existing flag name.  If
  such a condition exists, it will return an error.
  
  Syntax is: flag_name <newflagname> <oldflagname>
  
  Switches:
     /remove - used to remove a flag's alias.
  
  Examples:
    @flag/remove con (removes alias 'con' for 'connected')
    @flag connect=bobthewiz (renames 'connected' to 'bobthewiz')
  
  Note: the previous naming conventions are referenced automatically as
        aliases for the flag unless specifically removed.
  
  See Also: @flagdef, @toggledef

& @freeze
  Command: @freeze <pid>       
  
  This command will FREEZE the queue entry specified by the given PID.
  This job will stay in the frozen queue until @thawed or until the
  server is shut down or rebooted.  This command works only on wait
  and semaphore queues.
  
  See Also: @ps, @thaw

& @money
  Command: @money <value>
  
  This command is used to set the value displayed with money() for anyone
  who has UNLIMITED money and therefore unable to set/unset their own
  money value.  This is intended to help with coding projects.
  
& @areg
  Command: @areg[/<switches>] [<options>]
  
  This command is used to reference the autoregistration database.  This
  database is used to store the number of hits a given email has had in
  receiving autoregister email and what sites were hit.

  The following siwtches are available:
    /load      - loads the autoregistration flat file into the db.
                 Syntax: @areg/load
    /unload    - makes a flat file dump of the autoregistration db.
                 Syntax: @areg/unload
    /list      - lists the current contents of the autoregistration db.
                 Syntax: @areg/list [<email>]
    /add       - will add a player to a specified email.
                 Syntax: @areg/add <player>=<email>
    /fadd      - will forcefully add a player to a specified email.  This
                 option may go past the maximum limit.
                 Syntax: @areg/fadd <player>=<email>
  
  {see wizhelp @areg2 to continue}

& @areg2
  Command: @areg[/<switches>] [<options>]
  
  The following siwtches are available: (CONTINUED)
    /del       - deletes the player (by dbref# only) from the given email
                 Syntax: @areg/del <dbref#>=<email>
    /edel      - purges all players from the specified email
                 Syntax: @areg/edel <email>
    /aedel     - purges all players fromt he specified email and the email
                 Syntax: @areg/aedel <email>
    /limit     - specifies the maximum number of register emails an email 
                 address can receive (defaults to 3)
                 Syntax: @areg/limit <email>=<count>
    /wipe      - completely purges the entire autoregisteration database.
                 Syntax: @areg/wipe
    /clean     - this effectively tries to repair the database.  It does
                 an /unload then a following /load. 
  
  This command is only available to IMMORTALS
  
  Example:  @areg/edel weenie@bad.email.org
  
  See Also: AUTOREGISTRATION  

& @function
  Command: @function[/<switches>] [<function>] [=<object>/<attr> | <value>]
   
  This command creates a global function named <function>.  When invoked,
  the arguments to the function are loaded into %0-%9, the <attr> attribute
  from <object> is fetched, and substitution is performed on the resulting
  text.  The result of that substitution is returned as the function result.
  
  The @admin config parameter function_max will define how many @functions
  can be defined.  It defaults to 1000, and setting to '-1' allows unlimited.
  
  The following switches exist:
    /privilege  - the function is evaluated as if the evaluation were being 
                  performed by the object on which it is stored, instead of 
                  as if it were being performed by the invoker of the function.
    /list       - list all current softcoded functions (with dbref#/attr's)
    /preserve   - the function preserves setq registers (r(0)-r(9)).
    /delete     - delete the specified user-defined function.
    /display    - displays the details of the specified function.
    /protect    - all setq registers called in a localized function are nulled.
    /notrace    - the specified function when defined can't be TRACEed.
    /max        - Set the maximum number of arguments for the function.
                  The default is '-1' or unlimited.
    /min        - Set the minimum number of arguments for the function.
                  The default is '-1' or 0.
  
  The function definitions created by @function are not stored in the database
  so they need to be re-created each time the RhostMUSH is started.  It is
  recommended that the Startup attribute for player #1 include code to
  set up all global functions.  The privileged and preserved, protect, and
  notrace switches may be combined.
   
  Function definitions may be removed or redefined on the fly.
  
  {see 'wizhelp @function2' for examples}

& @function2
  Command: @function[/<switches>] [<function>] [=<object>/<attr>]
  
  Examples:  @function myfunction=#123/myattribute
             @function/priv/pres myfunction=#123/myattribute
             @function/priv/pres/prot myfunction=#123/myattribute
             @function/priv/pres/prot/notrace myfunction=#123/myattribute
             @function/list
             @function/display myfunction
             @function/delete myfunction
             @function/max myfunction=5
             @function/min myfunction=3
  
  Note: With the /list switch, the following letters represent the following:
             W - privileged
             p - preserved
             + - protected
             t - notrace
             ! - flagged (a permission flag exists for that function)
  
  You will see the MAX and MIN fields only if they are outside the defaults. 
  
  Note: you may use @function/display to see the flag permissions.
   
  See Also: @attribute, @lfunction, lfunction_max, function_max
 
& @lfunction
  See: 'help @lfunction'
  
& @halt
  Command: @halt[/<switches>] [<object>]
  
  This command can be used to halt commands being run by a specific object,
  all commands being run by objects owned by a specific player, or all
  commands in the game.  If <object> is not specified, the object running
  the command is halted.  If the object being halted is a player, then
  all commands being run by objects owned by that player are halted.
  Halting an object does not affect commands waiting on it as a semaphore,
  use the @drain command to reset a semaphore.
 
  The /all switch may be used to halt all commands globally.  You can also
  specify the /pid switch to kill any PID you have control over.
  
  See Also: @drain, @notify, kill, HALTED, SEMAPHORES.

& @kick
  Command: @kick[/switch] <count>
  
  Immediately executes the first <count> commands from the top of the queue.
  The following switches change the format and syntax:
      /pid      -- This kicks the target pid from the queue and executes it.
                   Syntax: @kick/pid <pid>
 
  Example:  @kick 5
            @kick/pid 12345
   
  See Also: @disable, @enable, @timewarp, @ps, and @halt

& @list
  Command: @list [<option>]
  
  Lists information from internal databases.  Information is available
  about the following options:
 
    advbuffers      allocations       attr_permissions  attributes 
    bad_names       buffers           commands          config_permissions
    costs           db_stats          default_flags     flags             
    functions       funperms          globals           hashstats         
    logging         options           permissions       process         
    site_info       switches          user_attributes   toggles         
    mail_globals    guest_names      *rlevels           cmdslogged      
    powers          depowers         *stacks            vattrcmds
 
  Type wizhelp @list <option> for help with a particular option.
  
  Options with a '*' by them may not be enabled at compiletime.
  
  Example:  @list alloc
  
  See Also: @admin, config()

& @list config_permissions
  Command: @list config_permissions
  
  This will show you all the config options and permissions for them.
  You may change these permissions with the @admin param  'config_access'.
  
  See Also: config_access
  
& @list vattrcmds
  Command: @list vattrcmds
  
  This will list all the dynamically defined @commands that are linked to
  user defined attributes.  These are defined with the @admin config
  parameter 'vattr_command'.
  
  See Also: vattr_command, @list commands
 
& @list funperms
  Command: @list funperms
  
  This command will list all built-in functions and the permissions of each
  function.
  
  See Also: @function, @list functions

& @list stacks
  Command: @list stacks
  
  This command will list the current level of debugmon stacks and all the
  information in the debugmon stack.  It could be helpful in tracing down
  buggy code or other problems when you hack around the hardcode.
  
  See Also: @list options 

& @list allocations
  Command: @list allocations
  
  This command lists the usage statistics for the internal buffer pools.
  For each buffer pool, the following information is listed:
    Size       - The size of a buffer, in characters.
    InUse      - The number of buffers presently allocated from the pool.
    Total      - The total number of buffers currently in the pool.
    Allocs     - The total number of buffers ever allocated from the pool.
    Lost       - The number of buffers lost due to buffer header corruption.
    Total Mem  - The total memory required for each catagory (in-use memory)
  
  Information is reported for the following pools:
    Sbufs      - Small buffers, for when you need only a little space.
    Mbufs      - Medium-sized buffers, for when an sbuf is too small but an 
                 lbuf is too large.
    Lbufs      - Large buffers, used when handling data input by the user,
                 object attributes, the results of interpreting commands, and
                 many other places.
    Bools      - Boolean expressions, used when evaluating locks.
    Descs      - Network descriptors, one is used for each connected player.
    Qentries   - Queue entries, one is used for each command placed on the
                 queue. (@wait, @trigger, @switch, @dolist, etc).
    Pcaches    - Total number of cache entries of players.
    ZListNodes - Zone buffers, used to hold the zone linking information.
   
  Information is given for current Tprintf dynamic allocation buffers:
    Current    - Current allocated dynamic (unsafe_tprintf) buffers
    Maximum    - Current maximum ever allocated
    Average    - Average allocated over period of time
  
  Information is given for total network usage:
    Total-In   - Total bytes of all inbound traffic for current reboot
    Daily-In   - Total inbound for current 24 hour period for current reboot
    Avg-In     - Total inbound daily average for current reboot
    Total-Out  - Total bytes of all outbound traffic for current reboot
    Daily-Out  - Total outbound for current 24 hour period for current reboot
    Avg-Out    - Total outbound daily average for current reboot
   
  Information is given for total ammounts with disk/memory use:
    DB Size         - Gives the total size of the database in Kbytes
    DB Top          - Gives the size of the database since last startup
    DB Object Size  - Gives size of a single object
    VHash Size      - Gives total memory of all overhead of all user-attribs
    Total Mem       - Gives total memory that the RhostMUSH is taking up in K
  
  Misc statistics:
    Total Lbufs used in Q-regs: These are always allocated.
    Total Sbufs used in Q-regs: These are always allocated.  
    Highest debugmon stack depth: How many stack levels the mush has reached
    Current debugmon stack depth: Current stack depth (should be around 7)
  
  See Also: @list buffers.

& @list attr_permissions
  Command: @list attr_permissions
  
  Lists the attributes and the access restrictions that have been placed on
  them. The attributes are listed one per line.  Refer to the attr_access
  config parameter for the meanings of the restrictions.
 
  Note that being allowed to write to an attribute does not imply the right
  to use the @<attr-name> shorthand command to set it, just the @set command.
  See Also: @list permissions, attr_access.

& @list mail_globals
  Command: @list mail_globals
  
  Lists the various global settings for the mail system.
  
    auto deletion         - Shows if the mail autodeletion program is working.
                            This deletes mail at a set time (usually 2 weeks)
    boxsize               - gives the default size a person's mailbox can hold
    max save              - gives the maximum saved messages one can have.
    max folders           - gives the maximum folders a player can have.
    max send              - max players that can be added to a single message.
    abs max rcv/snd index - max sent and recieved messages a player can have.
    abs max rcp           - max number that can receive a single message.
    abs max access        - max number of people than can be locked from mail.
  
  See Also: mail quota, mail, wmail, folder
  

& @list attributes
  Command: @list attributes
  
  Lists the attributes that are visible or settable by you.
  See Also: @list attr_access, @list permissions.

& @list bad_names
  Command: @list bad_names
  
  This command lists the player names that are not allowed to be created.
  Any create request (whether via the login screen or @pcreate) that matches
  (after wildcard expansion) one of the names in the list will be rejected.

& @list advbuffers
  Command: @list advbuffers
  
  For each buffer in a buffer pool that is currently allocated, lists where
  within RhostMUSH the buffer was allocated.  This works like 'buffers' 
  except it also lists the filename and line number where the buffer was
  allocated.  This will help greatly in tracing down leaks.
  
  This option is available to immortal/#1 only.

& @list buffers
  Command: @list buffers
  
  For each buffer in a buffer pool that is currently allocated, lists where
  within RhostMUSH the buffer was allocated.

& @list commands
  Command: @list commands
  
  Lists the internal commands that you may execute.  This command does not
  list the attribute-setting commands that you may use (like @va or @ahear),
  and does not list exits in your current room or $-commands on objects.
  
  See Also: @list attr_access, @list attributes, @list permissions,
            @list vattrcmds

& @list costs
  Command: @list costs
  
  Lists the costs that are associated with some commands, particularly those
  that expand the database.

& @list db_stats
  Command: @list db_stats
  
  Lists statistics for the database cache.

& @list default_flags
  Command: @list default_flags
  
  Lists the flags that are automatically given to players, things, rooms,
  exits, and robots when they are created.
  
  See Also: player_flags, thing_flags, room_flags, exit_flags, robot_flags.

& @list flags
  Command: @list flags
  
  For each object type, lists the name and key letter for all flags that may
  be set on that object type that are visible to you.

& @list functions
  Command: @list functions
  
  Lists the functions that may be used to obtain information when evaluating
  command lines.
  
  You may specify the sub-categories:
      built-in - list only the built-in hardcoded functions.
      user     - list only user-defined global @functions.
      local    - list only the local @lfunctions
  
  By default, it lists all functions.
 
& @list globals
  Command: @list globals
  
  Lists the global parameters that may be set or cleared by the @enable and
  @disable commands.  The following parameters are displayed.
 
    building      - Indicates whether or not commands that alter the
                    stricture of the database are allowed.
    checkpointing - Indicates whether or not the database is to be
                    periodically written to disk.
    cleaning      - Indicates whether or not the database is to be
                    periodically checked for deleted or disconnected rooms,
                    and other connectivity problems.
    dequeueing    - Indicates whether or not commands on the queue may be
                    automatically executed.
    idlechecking  - Indicates whether or not the inactivity limits are
                    enforced.
    interpret     - Indicates whether or not new commands may be added to
                    the queue.
    local_rwho    - Indicates whether or not the RWHO command may be used
                    to read data from the configured remote RWHO server.
{ 'wizhelp @list globals2' for more }
& @list globals2
  Command: @list globals (continued)
  
    logins        - Indicates whether or not nonwizard players are allowed
                    to connect.
    transmit_rwho - Indicates whether or not user information is to be
                    periodically sent to the configured remote RWHO server.
  
  See Also: RWHO, @dbck, @disable, @enable, @kick, @list permissions, @purge,
            @timewarp, checkpoint, conn_timeout, dump_interval, dump_offset,
            idle_interval, idle_timeout, rwho_data_port, rwho_dump_interval,
            rwho_host, rwho_info_port, rwho_password, rwho_transmit.

& @list hashstats
  Command: @list hashstats
  
  Lists the hashing statistics for each of the internal hash tables.
  For each hash table, the following information is displayed:
    Size    - The number of hash buckets in the hash table.
    Entries - The number of entries currently in the hash table.
    Deleted - The number of entries that have been deleted from the hash
              table.
    Empty   - The number of hash buckets with no entries.
    Lookups - The number of times the hash table has been searched.
    Hits    - The number of times that an item that was searched for was
              found.
    Checks  - The total number of comparisons made against hash table entries
              to see if they were the desired entry.
    Longest - The maximum number of entries in one hash bucket.
 
{ 'wizhelp @list hashstats2' for more }
& @list hashstats2
  Command: @list hashstats (continued)
  
  Information is displayed for the following hash tables:
    Commands            - Internal RhostMUSH commands
    Logged-out commands - Commands valid whether or not you are connected
                          (such as WHO and QUIT).
    Functions           - RhostMUSH functions, such as rand() and lexits().
    Player flags        - Names of flags valid for players.
    Thing flags         - Names of flags valid for things.
    Room flags          - Names of flags valid for rooms.
    Exit flags          - Names of flags valid for exits.
    Attribute names     - Object attribute names.
    Attribute numbers   - Object attribute numbers (only used internally).
    Net descriptors     - Mapping of player DB numbers to net descriptors.
    News topics         - Topics for the news command.
    Help topics         - Topics for the help command.
    Wizhelp topics      - Topics for the wizhelp command.
 
  See Also: alias, attr_alias, flag_alias.

& @list logging
  Command: @list logging
  
  Lists the type of information that is written to the log file and how it is
  displayed.  The following types of information may be logged:
    accounting     - Usage information on player disconnect.
    all_commands   - All commands executed by anyone or anything.
    bad_commands   - Commands that resulted in a 'Huh?' message.
    buffer_alloc   - Allocates and frees of buffers in the buffer pools.
    bugs           - Things that should never happen, but did.
    checkpoints    - Writes of the database to disk.
    config_changes - Changes in the configuration parameters.
    create         - The creation of new players.
    killing        - Use of the kill command, successful and unsuccessful.
    logins         - Players connecting and disconnecting.
    network        - New and dropped network connections.
    problems       - Database inconsistencies that are found.
    security       - Connect attempts with the wrong password, etc.
    shouts         - Messages sent to all players or all wizards.
    startup        - Events while starting up.
    wizard         - Use of powerful wizard commands, like @toad.
    guest          - All events by GUEST players.
    wanderer       - All events by WANDERER players.
    suspect        - All events by SUSPECT players.
    mail           - Internal mail problems.
{ 'wizhelp @list logging2' for more }

& @list logging2
  Command: @list logging (continued)
  
  The following formatting information is listed:
    flags          - Include flags for players/objects/rooms listed.
    location       - Include location if player/object when requested.
    owner          - Include owner of objects/rooms listed.
    timestamp      - Prefix log entries by a timestamp.
 
  See Also: log, log_options.

& @list options
  Command: @list options
  
  Lists the value of many of the configuration parameters.  You may specify
  sub-options with this.  The suboptions are:
    boolean        - list boolean values and the matching admin param.
    values         - list numerical value params
    config         - list config information
    mail           - list current mail configuration
    system         - list system configuration parameters
    mysql          - list MySQL parameters (if enabled)
    convtime       - list convtime extended formats
    display        - display target config parameter ( works like config() )
  
  Individual help is available on each sub option.
   
  You may page the value by applying a number (from 1 to max-pages) after the
  parameter.  This works for boolean and values.  For example:
    > @list options boolean        - lists first page
    > @list options boolean 3      - lists third page
    > @list options boolean *mail* - list all options that contain 'mail'
  
  The display parameter works by specifying the parameter after.  For example:
    > @list options display global_error_obj
      global_error_obj             Object who's @va is executed for non-cmds.
                                   Default: -1   Value: 123
  
  See Also: @admin

& @list options boolean
  Command Subtopic: @list options boolean
  
  This will allow you to query boolean based config parameters.  The following
  arguments are used with this sub-topic:
  
    > @list options boolean <wild>   -- List booleans based on wildcard where
                                        <wild> uses '*' or '?' globbing.
      Example: @list options boolean *command*
  
    > @list options boolean [1-N]    -- Page 1 to page N of display
      Example: @list options boolean 1
  
    > @list options boolean <config> -- Display statistics of specified param
      Example: @list options boolean wiz_uselock
  
  See Also: @list options

& @list options values
  Command Subtopic: @list options values
  
  This will allow you to query value (int/float) based config parameters.  The 
  following arguments are used with this sub-topic:
  
    > @list options values <wild>   -- List values based on wildcard where
                                        <wild> uses '*' or '?' globbing.
      Example: @list options values *command*
  
    > @list options values [1-N]    -- Page 1 to page N of display
      Example: @list options values 1
  
    > @list options values <config> -- Display statistics of specified param
      Example: @list options values wiz_uselock
  
  See Also: @list options

& @list options config
  Command Subtopic: @list options config
  
  This will list a (spammy) list of all the major config settings that
  RhostMUSH has.  This is a subset of the base '@list options' that is
  far far more spammy.
  
  You may wish to use the sub-topic 'display' to break down individual
  config parameters.
  
  See Also: @list options

& @list options mail
  Command Subtopic: @list options mail
  
  This will list all mail related config parametes and their existing
  settings.  The mail parameters are used for the auto-registration
  system.
  
  See Also: AUTOREG, @list options

& @list options system
  Command Subtopic: @list options system
  
  This will list the key compile time options that RhostMUSH has been
  compiled and configured with.  As RhostMUSH is highly configurable
  it is useful for staff and end-users to know how the RhostMUSH they
  are currently on is configured and what options may or may not
  be available in a single display.
  
  See Also: @list options

& @list options mysql
  Command Subtopic: @list options mysql
  
  This will list all MySQL config parameters that RhostMUSH is 
  currently using.  If MySQL is not compiled into the base code
  then it will alert you of this fact.
  
  See Also: @list options
  
& @list options convtime
  Command Subtopic: @list options convtime
  
  This will list all advanced formatting that convtime() will handle.
  This will require the config parameter to allow enhanced convtime
  formats to be enabled.
  
  See Also: enhanced_convtime, @list options

& @list options display
  Config Subtopic: @list options display
  
  This will give detailed display values on any given config parameter
  in the mush.  It handles all string, int, float, or boolean value.
  
  Some internal parameters and non-standard parameters will be unable
  to be queried by this method, but the majority of the approximate 500
  config parameters will be available with this method.
  
  All display values will be in alpha-numerical order.
  
  The following options exist for the display value: 
    > @list options display <wild>   -- Display values based on wildcard where
                                        <wild> uses '*' or '?' globbing.
      Example: @list options display *command*
  
    > @list options display <config> -- Display statistics of specified param
      Example: @list options display wiz_uselock
 
  See Also: config(), @list options 

& @list permissions
  Command: @list permissions
  
  For each command that you are allowed to use, lists the permissions that are
  needed to execute it.
  
  See Also: access, attr_cmd_access.

& @list powers
  Command: @list powers
  
  Lists the access restrictions on the various powers
    change_quotas   - Player may change the building quotas of others.
    chown_mine      - Player may @chown objects to yourself even if not
                      CHOWN_OK.
    chown_others    - Player may @chown objects you control to others.
    expanded_who    - WHO report includes additional information about the 
                      players listed.
    free_money      - All commands are free.
    free_quota      - Quotas are ignored for this player.
    grab_player     - Player may @tel any other player to themselves.
    join_player     - Player may @tel to the loc of any other player.
    long_fingers    - Player may operate on objects that normally must be
                      near the player even if they are not.
    priv_attributes - Player may modify read-only attributes and see invisible
                      attributes.
    priv_flags      - Player sees and may modify privileged flags.
    rename_myself   - Player may change his name and password.
    see_all_queue   - Player sees entire contents of queue.
    see_hidden      - Player sees hidden players in the WHO report.
    stat_any        - Player may get @stats on any player.
  
{ 'wizhelp @list powers2' for more }
& @list powers2
  Command: @list powers (continued)
  
    steal_money     - Player may give negative money.
    nokill          - Player may not be killed.
    search_any      - Player can @search/@find based on level.
    security        - Player can use some wiz flags based on level.
    who_unfind      - Player can see hidden player in WHO
    wraith          - Player can go through exits w/o passing lock.
    shutdown        - Player can shutdown the game.
    hidebit         - Player's staff bit is hidden.
    purge           - Player can use /purge switch to @nuke/@destroy.
    fulltel         - Player can @teleport anywhere.
    examine_full    - Player can examine anything.
    
  See Also: @list depowers

& @list depowers
  Command: @list depowers
  
  Lists the access restrictions on the various depowers
    wall            - Player can not use @wall.
    steal           - Player is limited on rob/steal.
    wiz_who         - Player can't see a wiz-who.
    boot            - Player can not use @boot.
    force           - Player can not @fo anyone but self.
    com             - Player can't use hardcoded comsystem.
    master          - Player can't execute master-room code.
    nuke            - Player can't @nuke, @turtle or @toad.
    override        - Player can't override locks by default.
    tel_anything    - Player can't teleport anything.
    power           - Player can't use @power.
    modify          - Player can't modify anything but self.
    chown_other     - Player can't chown things to others.
    unl_quota       - Player can't have infinite quota.
    give            - Player can't give anything.
    nogold          - Player is restricted on gold to give.
    password        - Player can't use @newpassword/@password.
    long_fingers    - Player can't access things remotely.
    create          - Player can't @create/@open/@dig/@pcreate
    cloak           - Player can't wizcloak/cloak.
    page            - Player can't page.
    locks           - Player can't pass locks.
 
{ wizhelp @list depowers2 to continue }

& @list depowers2
  Command: @list depowers (continued)
  
    command         - Player can't use any $commands.
    examine         - Player can't examine anything but self.
    free            - Player doesn't have free/infinite money.
    tel_anywhere    - Player can't teleport anywhere.
    pcreate         - Player can't pcreate.
    quota           - Player can't give quota.
    chown_me        - Player can't chown things to himself.
    abuse           - Player can't use any $commands but his own.
    search_any      - Player can't @search/@find things.
    receive         - Player limited on what they can receive.
    nosteal         - Player can't steal.
    mortal_examine  - Player examines/decompiles/etc as a mortal.
  
  See Also: @list powers

& @list process
  Command: @list process
 
  Lists information about the running RhostMUSH process and its resources.
  The following information is returned:
     Process number.
     Pagesize of the system running the mush, in bytes.
     CPU time used, both user and system.
     Maximum resident size, in both pages and bytes.
     Integral resident size of the shared, private, and stack segments.
        This number is not terribly useful.
     Page faults, counting separately those that cause I/O and those that do
        not.
     Number of times the process has been swapped out.
     Number of real disk reads and writes done (possibly via NFS).
     Number of network packets read and written.
     Context switches, counting separately voluntary switches (as the result
        of calling a blocking I/O routine) and involuntarily switches (as the
        result of a timeslice end or a higher-priority process becoming
        runnable).
     Signals received.

& @list site_information
  Command: @list site_information
  
  Lists the contents of the site access and suspect lists.
 
    Address   - The address to which this entry applies.
    Mask      - The mask that is ANDed to both the input address and the address
                in the entry when checking to see if this entry is to be used.
    Max-Conns - Maximum connections allowed before site restriction is
                enabled.  'Restricted' means use default method.  N/A in this
                field means it's not applicable.
    Status    - Indicates what type of access or restriction is to be applied.
                The following statuses may occur in the site access list:
 
                Forbidden    - Connections from this site are rejected.
                               (AutoSite) means the block was automatic.
                Forbid API   - API connections from this site are rejected.
                               (AutoSite) means the block was automatic.
                Registration - Connections from this site are accepted,
                               new characters may not be created with the
                               'create' command, players wanting a character
                               must get a wizard to create one for them.
                               (AutoSite) means the block was automatic.
                Unrestricted - Connections from this site are accepted,
                               new characters may be created with the 'create'
                               command.
{ 'wizhelp @list site_information2' for more }

& @list site_information2
  Command: @list site_information (continued)
  
              The following statuses may occur in the site suspect list:
 
                Suspected    - Notify logged-in wizards of any connects or
                               disconnects from this site.
                Trusted      - Don't notify wizards of connects or disconnects
                               from this site.
                Proxy Bypass - Sites will bypass the automatic proxy detection
                API Bypass   - Sites will bypass the max connections api limit
                NoGuest      - Disallows guests from connecting by this site
                NoAutoReg    - This site can not autoregister
                Hard Connect - This site can use connect screen commands.
 
  See Also: forbid_site, forbidapi_site, permit_site, register_site, 
            suspect_site, trust_site, noguest_site, noautoreg_site, 
            forbid_host, suspect_host, register_host, noguest_host, 
            noautoreg_host, validate_host, hardconn_host, nobroadcast_host, 
            passproxy_host, passapi_site, passapi_host

& @list switches
  Command: @list switches
  
  Lists the commands that support switches as well as the switches that may
  be used.

& @list user_attributes
  Command: @list user_attributes [<optional wildcard>]
   
  Lists the defined user-named attributes, along with their internal
  attribute numbers and access restrictions.
  
  You may specify a wildcard match for attributes.
  
  The following arguments are supported on user attributes:
               *name*                 - wildcard match attribute names.
               &FLAG1 FLAG2 ... FLAGn - return attributes with all flags.
               |FLAG1 FLAG2 ... FLAGn - return attirbutes with any flag.

  Examples:
    > @list user_attrib fn.*    (find all user attributes starting with fn.)
    > @list user_attrib &wizard safe (find all attribs set wizard AND safe)
    > @list user_attrib |wizard safe (find any attrib with wizard OR safe)

& @list toggles
  Command: @list toggles
  
  Lists all the toggles available at your level.

& @list guest_names
  Command: @list guest_names
  
  Lists all the guest chars and information about each.

& @list rlevels
  Command: @list rlevels
  
  Lists all the current reality levels and information about each.  Will
  only work if enabled at compiletime.
  
  You may specify 'dec' at the end to return the decimal values instead
  of hex.
  
  Examples:
    > @list rlevel
    > @list rlevel dec

& @list cmdslogged
  Command: @list cmdslogged
  
  Lists all commands that are currently being logged.
  
  To set them, use the @admin parameter 'log_command_list'

& @list_file
  Command: @list_file <file>
  
  Lists the contents of one of the message files that are shown during the
  connect/create/disconnect process as conditions warrant.  The following
  files may be listed:
     badsite_connect - shown when a connection is opened from a forbidden
                       site.
     connect          - shown when a connection is opened from a site for
                        which registration is not enforced.
     create_register  - shown when the 'create' command is used from a site 
                        for which registration is enforced.
     down             - shown when a non-wizard attempts to connect to or
                        create a character when logins are disabled.
     full             - shown when a non-wizard attempts to connect to or
                        create a character when the maximum number of 
                        connected players are connected.  Note that this is 
                        different from what happens when someone tries to 
                        connect but there are no free descriptors, which is
                        machine-dependent (usually the connect attempt hangs
                        or is rejected).
     guest_motd       - shown to guest characters immediately after they
                        connect.
{ 'wizhelp @list_file2' for more }

& @list_file2
  Command: @list_file <file>  (continued)
  
     motd             - shown to all players immediately after they connect.
                        (except guests and players connecting for the first
                        time)
     newuser          - shown to players the first time they connect in place
                        of the motd file.
     quit             - shown to players when they disconnect from the game.
     register_connect - shown when a connection is opened from a site for
                        which registration is enforced.
     wizard_motd      - shown to wizards when they connect in addition to
                        the motd file.
     cguest_fail      - shown to guests who try connecting from a site that
                        is disallowed from them.
     autoreg_connect  - shown to players who connect when their site is 
                        NOT registered but autoregistration is in effect.
     areghost_connect - shown to players who connect when their site IS
                        registered AND autoregistration is in effect.
  
  Example:  @list_file areghost_connect
  
  See Also: @readcache, badsite_file, connect_file, connect_reg_file,
            down_file, guest_file, motd_file, newuser_file, quit_file,
            register_create_file, wizard_motd_file.

& @listmotd
  Command: @listmotd
  
  Lists the current MOTD messages as set by the @motd command.
  
  See Also: @motd.

& @lock
  Command: @lock <object>=<key>
  
  Note that with attribute locking, a ROYALTY object can read any attribute of
  any object, including attributes invisible to players.
   
  Player #1 may also make attribute locks of the form <attr-num>:<value>
  Note that if <attr-num> is not a valid attribute number, the lock will
  never succeed.
  
  Available Locktypes:
  
       LockType:  AltName   - defines who is allowed to see the real name
                              or not with the altname in {}'s after.
  
  Individual help is available with 'wizhelp @lock type <type>'

& @lock/altname
& @lock type altname
  Lock Type: Altname
  Syntax   : @lock/altname <target>=<key>
  
  Players, Objects:
     The Altname lock controls who sees through the @altname that is set on
     them.  Without passing this lock or without being a wizard or owning
     the object, you will only see the @altname of the target.  
     This only impacts looking and contents.
  
  Rooms, Exits:
     This has no effect on these data types.
  
  Examples:
    > look bob
    Bob(#123)
    You see nothing special.
    > @altname Bob=Fred
    Set.
    > look bob
    Bob(#123) {Fred}
    You see nothing special.
    > look fred
    Bob(#123) {Fred}
    You see nothing special.
  
  See Also: @altname

& @log
  Command: @log[/<switches>] <text>
  
  This command will append to the log (or a separate manual-log entry) a 
  string of text.  If no switch is specified, it is sent to the mushname.log
  file.  The following switches exist.  Ansi and carriage returns are stripped.
  
      /manual - append text to the file specified by manlog_file @admin param
                please note that percautions are taken to avoid this being
                abused too heavilly.
      /file   - append text to a specified filename.  The filename is limited
                to alphanumeric and '_' and is forced to end with '_manual.log'
                to the filename.  You may specify subdirectories (up to 127
                total characters for the filename including path).  This option
                allows carriage returns, tabs, and ansi.
                    Example: @log/file withthisname.
                This makes a file with the name: withthisname_manual.log
      /stats  - gives you the current stats of the manual log file specified
                by the manlog_file @admin parameter.
      /read # - reads page number '#' of the manual log file specified by the
                manlog_file @admin parameter.  Please note that it defaults
                to page 1 and if you give it too large a number, the last 
                page (whatever that may be).
  
  See Also: logtofile(), log_maximum

& @logrotate
  Command: @logrotate[/<switches>] 
  
  The logrotate command will either rotate the existing game log file or give
  the current statistics of the file.  At this time, the statistics include
  just the current size (in bytes, kbytes, mbytes, or gbytes) depending
  on the largest displayable value.
  
  Existing switches currently are:
      /status      - give disk space used by log file
  
  Examples:
    > @logrotate/status
    Existing log file netrhost.gamelog is taking up 400 Kbytes
    > @logrotate
    @logrotate: Rotating old log file...
                Opening new log file...
    @logrotate: Completed.
  
  See Also: logstatus()

& @mark
  Command: @mark[/<switches>] [<player>] [<class>=<restriction>]
  
  Sets or clears the MARKED flags for objects that match the search criteria.
  This command may only be used when database cleaning is disabled (via
  @disable cleaning), as cleaning uses the MARKED flag to check
  connectivity.
 
  The following switches are available:
     /set    - (default) Set the MARKED flag on the selected objects.
     /clear  - Clear the MARKED flag on the selected objects.
   
  Example:  @mark/set *twink=eq(words(get(##/desc)),0)
  
  See Also: @apply_marked, @@mark_all, MARKED, SEARCH CRITERIA.

& @mark_all
  Command: @mark_all[/<switches>]
 
  Sets or clears the MARKED flag for all objects in the database.  This 
  command may only be used when database cleaning is disabled (via @disable 
  cleaning), as cleaning uses the MARKED flag to check connectivity.
 
  The following switches are available:
     /set    - (default) Set the MARKED flag on all objects.
     /clear  - Clear the MARKED flag on all objects.
 
  See Also: @apply_marked, @mark_all, MARKED.

& @motd
  Command: @motd[/<switches>] <message>
 
  This command sets or lists short messages that are displayed to players
  after they successfully log in to the game (or after they fail because
  logins are not allowed).  These messages are displayed in addition to
  the contents of the motd.txt and wizmotd.txt files.
 
  The following switches are available:
     (No switches)   - Sets message that all players see when they connect.
     /wizard         - Sets message that wizards see when they connect.
     /down           - Sets message the players see when they try to
                       connect, but fail because logins are disabled.
     /full           - Sets the message that players see when they try to
                       connect, but fail because there are too many players
                       already connected.
     /list           - Lists the current messages.
  
  Example:  @motd This is a motd test file
  
  See Also: @listmotd.

& @newpassword
  Command: @newpassword[</switch>] <player>[=<newpassword>]
  
  Gives <player> the new password <newpassword>.  If <newpassword> is not
  specified, the player is given a null password.  If logged in, the player
  is notified that his password has been changed.
  
  DES passwords are limited to 8 characters or less in length.
  SHA512 passwords are limited to 160 characters or less in length.
  
  You can not have white space in passwords.
  
  The following switches exist:
    /des    - Enforce a DES password instead of the system default.
   
  Note: if safer_passwords is enabled, it will require much stricter 
        password values.
  
  Example:  
    > @newpassword aplayer=FarkleWhoop&Wo0
    Password changed.
    > @newpassword/des aplayer=FarkleWhoop&Wo0
    Password changed.
  
  See Also: @password, safer_passwords
  See Also: (normal help) @password

& @nuke
  Command: @nuke[/<switch>] <player>
  
  Destroys <player> like the scum they are.  It will wipe their mailbox
  automatically as well as modify their mail sent to others and their
  news postings to detail that they've been turned into a radioactive
  puddle.  They can however, still be @recovered.
      /PURGE -- Makes it so they *can't* be @recovered -- Immortal only.
  
  See Also: @toad, @turtle

& @pcreate
  Command: @pcreate[/switch] [#dbref] <player>=<password>
           @pcreate/register [#dbref] <player>=<email>
  
  Creates a new player with the indicated password.  This command is
  equivalent to typing 'create <player> <password>' from the connection
  screen, and is normally only used when registration is enabled.
  
  Super-royalty have the added ability to specify the dbref# they wish
  to use for that player.  The dbref# *must* be in the free list else
  it will default to the highest dbref# on the free list automatically,
  
  Note: @reclist/free to display the free list.
        @stat to show the 'next free dbref#'
  
  Optional switches are:
      /register - Allows you to email a registration email to the
                  target email.  Only wizards and higher may use this.
      /ansi     - Combines @pcreate with @extansi to ansify the name
                  of the player.  This follows @extansi permissions.
      /strict -- will enforce [#dbref] to be a valid free dbref before create.
  
  Example:  @pcreate #5 NewPlayer=FarkleWhoop&Wo0
            @pcreate NewPlayer=FarkleWhoop&Wo0
            @pcreate/reg NewPlayer=myfriend@myemail.net
            @pcreate/ansi [ansi(hb,Blueboy)]=FarkleWhoop&Wo0
   
  Note: if the config parameter safer_passwords is enabled, it requires 
        much more strict passwords than one may expect.
  
  You may use the lastcreate() function to see the last player @pcreate'd.
  
  See Also: REGISTRATION, safer_passwords
  
  Normal Help: lastcreate()

& @poor
  Command: @poor <amount>
  
  Sets the wealth of all players to <amount>.
  
  The value must have a valid numerical value for @poor to work.
  Available as a default to councilor and higher.
  
  Example:  @poor 1000

& @progreset
  Command: @progreset <playername>
           @progreset <playername> = <newvalue>
  
  This command has two uses.

  First use: (first syntax)
     This command, only useful on players, will target the player 
     for a @program prompt reset.  This in effect nulls out their
     prog-prompt that would display on their client.  As this can
     only be done on players who are NOT in a program, it is 
     obviously intended as a forced method to reset a bad prompt.
  
  Second use: (second syntax)
     This command, only useful on players, will target the player
     for a @program prompt set.  This in effect overrides the
     player's existing prompt with the new one you assign.  This
     is useful to set a customized prompt or reset it mid-program
     based on maybe an error that they type or if they're sitting
     idle for too long and you will shortly abort them.
  
  Examples:
     > @progreset *Player
     Program prompt reset.
     > @progreset *player=New Prompt>
     Program prompt customized.
  
  See Also: IMMPROG
  
& @protect
  Command: @protect[/<switch>] [<playername>]
  
  This is the wizard switches available for the @protect command.  
  @protect allows you to lock in names so no one else can use them.
  
  Wizard switches available:
    /byplayer - Specify /list by a specific player.  Argument
                required for this option.
    /summary  - Show a full summary list of protections per player.
    /all      - When used with /list shows all player's @protects.
  
  Wizards who /list see all protected names.  Wizards may delete
  names that they do not own.  Immortals bypass all protected names.
  
  See Also: max_name_protect
  
& @ps
  Command: @ps[/<switches>] [<object>]
  
  Wizards may also use the following switches with the @ps command:
      /all      - switch to view the entire queue.
      /freeze   - switch to view the frozen queue.
  
  /freeze and /all can be used in junction with the other switches as
  well as with each other..
  
  See Also: @ps (player version).

& @purge
  Command: @purge[/<switches>] [<object>]
  
  Immediately destroys any rooms that are waiting to be destroyed, crediting
  their owners for the cost of creating the room.  The freelist is also 
  repaired if it is damaged.  These operations are performed periodically,
  so there is usually no need to use this command.
  
  This command was also modified to be used with the @recover option
  for recovering destroyed things.  These options are as follows and can
  only be used by super-royalty.
  
  @purge #dbref (destroys the given dbref# that is in the recovery list)
  The following switches are also available:
      /all                    - purges the recovery list permanently 
                                destroying all things marked recovery 
                                (things previously destroyed)
      /time <1-100>           - purges the recovery list from the specified 
                                # of days ago and later. 
      /type <TYPE>            - purges all dbref#'s matching type 'TYPE'.
      /owner <OWNER>          - purges all objects owned by owner 'OWNER'.
      /ttype <1-100>/<TYPE>   - purges all objects based on 'TYPE' that was 
                                # of days ago and later.
      /towner <1-100>/<OWNER> - purges all objects owned by owner 'OWNER'
                                that was # of days ago or later.
  
  Example:  @purge/type room
  
  See Also: @dbck, @recover, @reclist, @dbclean

& @recover
  Command: @recover[/<switch>] <#dbref>
  
  This command will recover from destruction the specified dbref# shown
  as previously destroyed in the recover list by the @reclist command.
  Do note, anything recovered will be owned by you and automatically set
  halt.  Everything will be restored except parents, links, contents,
  and exits in rooms.  This command can only be used by super-royalty.
  
  Items to be restored will be added to the recovery list after the
  next internal dbck (or a manual @dbck can force it) after the item
  has been @destroyed (or @nuked).  Players who are @toaded or
  @turtled can not be @recovered in this way as they were not essentially
  destroyed, but were converted from a player type to a thing type.
  
  Items @purged are gone for good.
  
  The following switches are available:
    /detail - Instead of recovering the object list details of the
              object in question.  This will display the dbref#,
              flags, and attributes on the object.  The Rectime is
              the time (in secs()) the object was destroyed.
    
  Example:  
    > @recover/detail #123
    MyObj(#123$Ih)
    Type: THING Flags: RECOVER INHERIT HALTED
    FOO: $fooz:@pipe/on va;think test;@pipe/off
    VA: xyz
    OOC: $ooc *:@pemit %#=[parsestr(%0,%0,",",,&[ansi(hy,<,hc,OOC,hy,>)] %k)]
    AnsiName([$]): %cr%chMy%cn%cc%chO%cn%cb%chbj%cn
    TRACE_GREP: sub(
    TRACE_COLOR_WATSON: +pink
    Rectime([$Mi]): 1507055461
  
    > @recover #123
    Restored.
   
  See Also: @purge, @reclist

& @reclist
  Command: @reclist[/switch] <args>
  
  This command will display any object that had previously been destroyed
  that is in the recover list (that can currently be recovered with @recover)
  This command can only be used by super-royalty.
  
  The following toggles exist for @reclist:
      /count                    - This switch may be used in junction with any
                                  other switch.  It returns the total count of
                                  items found.
      /age <1-100> [=<wild>]    - This switch returns the items that were 
                                  destroyed after the given number of days.
      /type <TYPE> [=<wild>]    - This returns the types of objects destroyed 
                                  that match the type specified.
      /owner <player> [=<wild>] - This returns the objects destroyed owned by
                                  the specified player.
      /dest <player> [=<wild>]  - This returns the objects destroyed by the
                                  specified player.
      /free [<wild>]            - This will list all the objects in the free 
                                  list.  The free list being all reusable 
                                  objects.
 
  Note:  <=wild> will be in the form =*wildcard* where *wildcard* is the
         patten you wish to match.  The <wild> is the same but without an
         equals (=) sign.
  
  Note2: Wildcard patterns for =<wild> patterns may be the NAME of an item
         or a partial dbref#.  For /free's <wild> only dbref# is available.

  Examples:  
    > @reclist/owner Dweeb
    > @reclist/owner Dweeb=*Da Room*   (search room names containing 'Da Room')
    > @reclist/owner Dweeb=*#123*      (search dbref#'s containing '#123')
    > @reclist/count
    > @reclist/free/count
    > @reclist/free *#123*             (search dbref#'s containing '#123')
  
  See Also: @recover, @purge

& @create
  Command: @create[/switch] [#dbref] <name> [=cost]
  
  This works just like the mortal's @create except you can specify the dbref#
  that you wish to use for the object.  The #dbref *must* be in the
  free list else it will default to the first free object available instead.
  This command can only be used by super-royalty.
  
  Switches available:
    /strict -- will enforce [#dbref] to be a valid free dbref before create.
  
  Note: @reclist/free to display the free list.
        @stat to show the 'next free dbref#'
  
  Example:  @create #5 An Object
  
  See Also: @dig, @open, @pcreate

& @dig
  Command: @dig[/switch] [#dbref] <name> [=<exit to here>, <exit to target>]
  
  This works just like the mortal's @dig except you can specify the dbref#
  that you wish to use for the room.  The #dbref *must* be in the
  free list else it will default to the first free object available instead.
  This command can only be used by super-royalty.
  
  Switches available:
    /strict -- will enforce [#dbref] to be a valid free dbref before create.
  
  Note: @reclist/free to display the free list.
        @stat to show the 'next free dbref#'
  
  Example:  @dig #5 An Object
  
  See Also: @create, @open, @pcreate

& @open
  Command: @open[/switch] [#dbref] <name> [=<#room>]
  
  This works just like the mortal's @open except you can specify the dbref#
  that you wish to use for the exit.  The #dbref *must* be in the free
  list else it will default to the first free object available instead.
  This command can only be used by super-royalty.
  
  Switches available:
    /strict -- will enforce [#dbref] to be a valid free dbref before create.
  
  Note: @reclist/free to display the free list.
        @stat to show the 'next free dbref#'
  
  Example:  @open #5 An Exit <AE>;ae;an exit=#12345
  
  See Also: @create, @dig, @pcreate

& @pemit
  Command: @pemit[/switch] <target> [=<message>] (royalty and higher only)
  
  This command has an additional switch available for royalty and higher.
  The following switches are available in addition to the existing:
     /PORT   - This switch allows the pemitting to a given port number
               of the target player.  The port does not yet have to have
               a connected player but does need to be active.
  
  These switch(es) can be used in junction with the '/LIST' switch as long
  as all elements in /LIST are the same.
  
     IE:  @pemit/list/port 1 2 3 4 *Seawolf=message  
  
  This would return an error if port 1, 2, 3, or 4 were not in use and
  one for *Seawolf as '*Seawolf' is not a valid port number.
  Example
    > WHO
    Player Name          On For Idle  Room     Ports Host
    Biff_Standard         00:44   2s  #1234    10    [my.site.edu]
    1 Player logged in. (Bummer.)
    > @pemit/port 10=Hello!
    Hello!
  
  See Also: page, whisper, 'help @pemit' (for the other switches)

& page
  Command: page[/port] <player> [=<message>] (royalty and higher only)
  
  This command has the wizard only /port option which allows the paging
  to specific ports.  A non-connected port or non-existing port will return
  an error.  
  
  Examples:
    > WHO
    Player Name          On For Idle  Room     Ports Host
    Biff_Standard         00:44   2s  #1234    10    [my.site.edu]
    1 Player logged in. (Bummer.)
    > page/port 10
    You sense that Ashen-Shugar is looking for you in Some Obscure Location
    You notified port 10 of your location.
    > page/port 11
    Bad Port.
    > page/port 10=hello
    Biff_Standard pages: hello
    You paged port 10 with 'hello'.
  
    The 'port' function follows all standards of normal pages but will not
    kick off any reject, idle, or other page limited messages nor will it
    check against page locks.  Use with discretion.

  See also: pagelock_notify, whisper, @pemit

& pagelock_notify
  Config parameter: pagelock_notify <yes/no>.  Default: yes

  This option can be used to enable or disable the automatic notification
  to players on login about them having a PAGE LOCK set.

  By default the message is enabled by default, but it can be useful to
  disable this in case there is a softcode +command wrapper to manage
  certain locks.

& whisper
  Command: whisper[/port] <player> [=<message>] (royalty and higher only)
  
  This command has the wizard only /port option which allows the whispering
  to specific ports.  A non-connected port or non-existing port will return
  an error.
  
  Examples:
    > WHO
    Player Name          On For Idle  Room     Ports Host
    Biff_Standard         00:44   2s  #1234    10    [my.site.edu]
    1 Player logged in. (Bummer.)
    > whisper/port 10=:hugs
    You sense that Biff_Standard hugs.
    Port 10 senses "Biff_Standard hugs."
  
  See Also: page, @pemit

& _
& @aflags
  Command: @aflags[</switch>] <attribute or value> [=<argument>]
  
  Note: Attributes that start with a prefix of _ will automatically
        be wizard settable and seeable.
  
  This command will return all the toggled flags of that
  given attribute.  This will also show prefix based permissions from
  '_' attributes as well as those with the atrperms @admin parameter.
  
  Following switches exist:
    /full -- give full statistics of the attribute, like count in use.
    /perm -- list all current attribute based prefix permissions.
    /list -- alias for /perm
    /add  -- add a prefix attribute mask.
    /del  -- delete a prefix attribute mask.
    /mod  -- modify a prefix attribute mask.
  
  The @aflags without the switches display the permissions of the
  specified attribute name.  Using the /full switch returns the count
  of how many attributes are in active use by that name.  Be aware, the
  /full switch walks the database so may take a few seconds to process.
  
  Examples:  
    > @aflags comment
    (Attribute 44) Flags are: hidden no_command royalty wizard 
    > @aflags/full comment
    (Attribute 44, Total Used: 36) Flags are: hidden no_command royalty wizard 
 
  For the more advanced feature of @aflags with regards for attribute
  prefix permission modification, see:  'wizhelp @aflags2'
 
& @aflags2 
  (CONTINUED)
  Command: @aflags[</switch>] <attribute or value> [=<argument>]
  
  The /perm, /add, /del, and /mod switches are used to maintain and display
  the attribute prefix permission masking.  Attribute masking is the ability
  to set a prefix on an attribute based on what permission you want it to 
  have.  This can be based on who can SET it, who can SEE it, as well as
  lock that specific mask by owner or by individual object.  Owner and
  object are specified by their dbref#'s.
  
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  Individual help and examples are available on each attribute prefix switch:
     'wizhelp @aflags perm'    -- help on displaying prefix permissions.
     'wizhelp @aflags add'     -- help on adding new prefixes.
     'wizhelp @aflags del'     -- help on deleting existing prefixes.
     'wizhelp @aflags mod'     -- help on modifying existing prefixes.
     'wizhelp @aflags args'    -- explains the arguments to @aflags
     'wizhelp @aflags bits'    -- help on the level bits for see/set perms
  
  See Also: atrperms, atrperms_max, atrperms_checkall

& @aflags bits
  Command: @aflags/mod <prefix> [<own> <tgt>]=<set> <see> [<own> <tgt> <enact>]
   
  Please be aware, <set> and <see> are different arguments, please substitute
  below where <set/see> are defined depending if you plan to set <see> 
  permissions or <set> permissions.  <set> permissions handles setting and 
  UN-setting.
  
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  The following bits exist for the <set> and <see> parameters:
      0 - Unable to <set/see> if target is a guest or wanderer
      1 - Normal mortal or higher may <set/see>
      2 - Guildmaster or higher may <set/see>
      3 - Architect or higher may <set/see>
      4 - Councilor(Admin) or higher may <set/see>
      5 - Royalty(Wizard) or higher may <set/see>
      6 - Immortal or higher may <set/see>
      7 - Only #1 can <set> but immortal and higher may <see>
      8 - Must pass evaluation check for <set/see>
          Evaluation is as:
          -- A valid hook_obj must be defined.
          -- The attribute 'AFLAG_EVAL' is used for FUNCTION eval on hook_obj.
          -- %0 is the attribute name attempting to be set.
          -- %1 is the enactor attempting to set the attribute.
          -- %2 is the type.  <set> is '0' and <see> is '1'.
  
  See Also: atrperms, atrperms_max

& @aflags args
  Command: @aflags/mod <prefix> [<own> <tgt>]=<set> <see> [<own> <tgt> <enact>]
  
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  The arguments are the following:
    <prefix>   --  The prefix is the attribute prefix that the permissions 
                   masking is applied.  Any attribute that starts with the
                   prefix will inherit the permission based on the parameters
                   assigned to this specific prefix.
  
    <own>      --  The target owner where the attribute will be set.  Any 
                   object owned by <own> will have the prefix permission 
                   applied against anything (or anyone) attempting to set
                   that attribute.
  
    <tgt>      --  The target object where the attribute will be set.  This
                   is the exact dbref# that the attribute prefix will be 
                   applied.
  
    <enact>    --  The enactor that is trying to set the attribute with the
                   specified prefix.  If enactor is a player, then it will
                   affect their entire ownership.
  
    <set>      --  The SET/UNSET permission you wish to apply to the specified
                   attribute prefix.  You can set from '0' to '8' as defined
                   by bitlevel permissions. (help bittype())
  
    <see>      --  The SEE/VIEW/READ permissions you wish to apply to the
                   specified attribute prefix.  YOu can set from '0' to '8'
                   as defined by bitlevel permissions. (help bittype())
  
& @aflags mod
  Command: @aflags/mod <prefix> [<own> <tgt>]=<set> <see> [<own> <tgt> <enact>]
  
  This modifies an existing attribute <prefix> that matches optional
  owner <own>, target <tgt>, and enactor <enact> with the new 
  <set> and <see> permissions.
  
  You may use this to change every aspect of the prefix.  The owner, target,
  enactor, see, and set permissions are all changeable.  If you wish to remove
  the owner, target, or enactor, set the value to '#-1' which means 'global' 
  or 'all'.
  
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  Example:  @aflags/mod boogie=6 3
            @aflags/mod boogie #1234 #9876=5 5 #-1 #9876 #-1
  
  The first example modifies prefix BOOGIE with Immortal settable and
  Architect seeable.  This will not change ownership or target if modified.
  
  The second example modifies prefix BOOGIE with Wizard settable and seeable.
  It also resets the owner to global (#-1) but leaves the target alone.
  
  You can not modify a prefix that would duplicate an existing prefix
  already in the listing.
  
  If you fail to find a matching prefix to modify, it will notify you.
  
  See Also: @aflags, @aflags add, @aflags del, @aflags perm

& @aflags del
  Command: @aflags/del <prefix> [<owner> <target> <enactor>]
  
  This deletes an existing attribute <prefix> with optional <owner>,
  <target> and <enactor> specified.  If you choose not to specify an owner,
  target, or enactor, both values default to '#-1' which means global or all.
  
  Only entries that match prefix, owner, and target will be deleted.
  
  Example: @aflags/del boogie
           @aflags/del boogie #1234 #9876 #123
  
  The first will delete the BOOGIE attribute prefix that has a global
  owner and target (both set to #-1).
  
  The second will delete the BOOGIE attribute prefix that has a specified
  owner of #1234,target of #9876, and enactor of #123.
  
  If there are no matching prefixes, it'll alert you of that fact.
   
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  See Also: @aflags, @aflags add, @aflags mod, @aflags perm

& @aflags add
  Command: @aflags/add <prefix>=<set> <see> [<owner>] [<target>] [<enactor>]
  
  This adds a new attribute <prefix> with the permissions of who
  can <set> the attribute as well as who can <see> the attribute.
  You may optionally specify the target <owner> and/or <target> and/or
  <enactor> for the item in question.  Target has precidence over Owner.
  Enactor has precidence over target.
  
  Any duplicate entries will not allow to be added.  Duplicate entries
  are defined by any entry that matches the prefix, the owner, and 
  the target.  If you wish to modify an entry, use @aflags/mod.
  
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  Example:  @aflags/add boogie=7 6
            @aflags/add boogie=7 6 #1234 #9876 #123
  
  The first sets a prefix 'BOOGIE' with God settable and Immortal seeable.
  The second would do the same but also adds owner #1234, target #9876, and
  enactor #123.
  
  See Also: @aflags, @aflags del, @aflags mod, @aflags perm
  
& @aflags perm
  Command: @aflags/perm [<value>]
  
  This lists all the various prefix permission masks of all the global 
  attributes in the mush.  You may specify a <value> optionally to page
  the results (20 lines per page).  Otherwise it will display all
  the results without page breaks (default).
  
  Permissions are handled by FIRST MATCH in the array.  To see the order
  of permissions please check @aflags/list.
   
  Example:  @aflags/perm
            @aflags/perm 2

  ----------------------------------------------------------------------------
  Attribute Prefix                                                 Set     See
  ----------------------------------------------------------------------------
  TESTEST                                                          Arch    Cit
  WASWAS                                                           Cit     Wiz
  WEREWERE                                                         God     Arch
  SNOOPY                                                           God     Wiz
     +----- Owner: #-1,  Object: #-1,  Enactor: #1234,  Modifier: #1234
  
  --------------------------[     4/   100 max]-------------------------------
  
  In the above, the prefixes are TESTEST, WASWAS, WEREWERE, and SNOOPY.
  As shown, SNOOPY has special permissions.  The owner is #-1 (the default)
  meaning all owners are affected.  The reason the additional information,
  however, is the Object.  The Object is defined as #3723, meaning only object
  #3723 will be assigned the specific prefix of SNOOPY for attribute masking.
  The mask for SNOOPY means that only God (The #1 user) can set attributes
  that begin with 'SNOOPY' on object #3723, but wizards can view them.
  
  The modifier is the last person who actually set up (configured) the prefix
  in question.  The default value for this is #1.  This value will only show
  if the owner or object are not the default values (#-1).
    
  See Also: @aflags, @aflags add, @aflags del, @aflags mod, @aflags args

& @icmd
  Command: @icmd</switch> <player [= arguments]>
  
  This command sets personal command permissions on a player.
  It only is useful for removing commands and not granting them.
  This command is available only to immortals.
  Possible switches are:
    /ON       - Turn on personal command parsing so that it checks
                against invalid commands for the player. This option
                returns 'Permission Denied' to the end user (Default).
    /OFF      - Turn off personal command parsing so that commands
                by player parses normally.
    /DISABLE  - Disables the given command so it returns a
                Permission Denied. (Default)
    /IGNORE   - This command actually removes from existance the
                specified commands from the user's standpoint so
                that it is skipped upon command execution checks.
                Use this option for $command overrides.
    /EVAL     - Use this to set up evaluation checks.
                See: 'wizhelp @icmd eval' for more.
    /CHECK    - Displays a list of the specified players current
                disabled commands and at what level.
                1=disabled   2=ignored
    /CLEAR    - Removes all icmd information from player.
  
{ Type 'wizhelp @icmd2' for more switches }

& @icmd2
  Command: @icmd</switch> <player [= arguments]>  (CONTINUED)
  
  Continued Switches:
    /DROOM    - This sets commands disabled on the location.
                This returns the 'Permission Denied'.
                This is a NON-PLAYER.
    /IROOM    - This sets commands ignored on the location.
                This allowed $command overrides.
                This is a NON-PLAYER.
    /EROOM    - This sets an evaluation for checks on location.
                See: 'wizhelp @icmd eval' for more.
                This is a NON-PLAYER.
    /CROOM    - Clears disabled/ignored commands on target location.
                This is a NON-PLAYER.
    /LROOM    - List disabled/ignored commands on target location.
                This is a NON-PLAYER.
    /LALLROOM - List all disabled/ignored commands at location
                and zones from location.  Listings that start with
                'z' are zonemasters.  Anything with a '*' shows
                that the location has the IGNOREZONE @toggle.
  
  Note:  Locations (and zones) require the IGNOREZONE @toggle
  
{ Type 'wizhelp @icmd3' for examples and syntax }

& @icmd3
  Command: @icmd</switch> <player [= arguments]> (CONTINUED)
  
  The commands can be specified on the player in the form of:
  COMMAND, !COMMAND, COMMAND, ..., etc
  
  To remove the command from the player, a ! must be specified.
  To change the level from DISABLE to IGNORE or visa versa, it
  must first be REMOVED then ADDED.  For example:
  
    @icmd/disable TinyJerk=page, whisper, @emit, @pemit
    @icmd/ignore TinyJerk=!@pemit, !@emit, @pemit, @emit
  
  The above would first set all four to disable.  The second
  would remove @emit and @pemit and then re-add it as ignored.
  The /disable switch is the default and assumed if no switches
  are specified.  All aliases are taken into effect automatically.
  For rooms you could do the following:
    
    @icmd/droom here=page, whisper, @emit, @pemit
    @icmd/iroom here=!@pemit, !@emit, @pemit, @emit
  
  Example:  @icmd/ignore majortwit=page,",:,say,pose,@emit,@pemit,whisper,;
            @icmd/ignore dimwit=page,!say,!",pose,:
  
  Note:  Locations (and zones) require the IGNOREZONE @toggle
  
{ Type 'wizhelp @icmd4' for parameters and combinations }
  
& @icmd4
  Command: @icmd</switch> <player [= arguments]> (CONTINUED)
  
  If you used the admin param 'IGNORE_ZONE', you can then use the
  other 'IGNORE_' parameters to specify what level it's ignored as.  If
  you do not specify another ignore case, it assumes 'IGNORE_ROYAL'.
  
  You may also use 'DISABLE_ZONE' to disable instead of ignore.

  Note:  Locations (and zones) require the IGNOREZONE @toggle
  
  See Also: @icmd eval, access, @admin

& @icmd eval
  Command: @icmd</switch> <player [= arguments]> (CONTINUED)
  
  Evaluation is set up through an evaluation object that you must
  define with an @admin parameter.  The admin parameter is
  'icmd_obj'.  Once that is done, you set up attributes that will
  be function evaluated on that object.
  
  Evaluation is looked up in attribute based in the form:
    _<command>       -- The global default evaluation.
   <dbref>_<command> -- Per enactor evaluation.
  
  The return codes and evaluations are:
    0  -- Pass the evaluation and allow the command to work normally.
    1  -- Return 'Permission Denied' to the enactor.
    2  -- Ignore the command and allow $command evaluation overrides.
    %# -- Enactor executing the command (target player/loc/zone with @icmd)
    %! -- The dbref# of the icmd object
    #@ -- The dbref# of the cause of triggering the @icmd
    %x -- The command typed (or %c if configured for that)
  
  To set up an eval @icmd check do the following:
    1.  @create IcmdObj  (record the dbref#.  We'll assume #123 for examples)
    2.  @admin icmd_obj=123  [icmd_obj 123 in netrhost.conf]
    3.  &_THINK #123=1
    4.  &#12345_THINK #123=2

  The /eroom switch will have &<dbref>_<command> be the target that is
  triggering the @icmd check, most usually the player.  For player based 
  @icmd this will always be the player.
  
  The above would make the 'think' command return 'Permission Denied' for
  everyone EXCEPT player #12345 which would override (ignore) the object
  in return for $command evaluation instead.
  
  This is handy as you can now lock @icmd based on environmental changes.
  
  See Also: @icmd, @admin, icmd_obj, ignore, @hook

& @createdstamp
  Attribute: @createdstamp <target>=<value> (immortal only)
  This attribute stores the exact time that object was created.  It 
  is used internally and shouldn't be modified though modification will
  not cause problems.  You MUST have the @admin parameter enable_tstamps
  enabled to be able to use this.  Otherwise, it will be ignored.
  
  See Also: @modifiedstamp, enable_tstamps

& @modifiedstamp
  Attribute: @modifiedstamp <target>=<value> (immortal only)
  This attribute stores the exact time that object was modified.  It 
  is used internally and shouldn't be modified though modification will
  not cause problems.  You MUST have the @admin parameter enable_tstamps
  enabled to be able to use this.  Otherwise, it will be ignored.  Modified
  stamps will be done for any modification to attributes or locks.  Flags
  will be ignored.
  
  See Also: @createdstamp, enable_tstamps

& @darkexitformat
  Attribute: @darkexitformat <target>=<value> (royalty and higher only)
  This attribute works like @exitformat except it's a secondary descriptor
  incase the wizard wants to specify how a separate exit-format list is
  to be displayed.  An example would be the dark exit formats.
  
  If the target is @powered FORMATTING, then the dbref# list of items that
  the target sees will be passed as %0 and the | separated list of names
  will be passed as %1.  Any dark exits that the target sees will be passed
  as dbref#'s into %2, and their respective names | separated as %3.
  
  Example:
    > @darkexitformat here=No dark exits!
    > look
    A room(#1234)
    You see just a room.
    Contents:
    Toy(#111)
    Obvious Exits:
    Out <O>
    No dark exits!
  
  Refer to the normal help on @exitformat and @conformat for more help.
  
  See Also: power formatting, formats_are_local, format_exits

& @receivelim
  Attribute: @receivelim <player>=<value> (immortal only)
  This attribute, when set, overrides the maximum gold that the target 
  player can give out.  This not only effects the positive value but
  the negative value as well.  This is inherited to all matters of giving
  gold (including @costs/@apays)
  
  Example:
    > @receivelim *tinyjerk2=100
    > say money(*tinyjerk2)
    You say "50"
  (From Tinyjerk's perspective)
    > give tinyjerk2=100
    That person doesn't need that many Gold Pieces!
    > give tinyjerk2=-200
    That person doesn't need that much Debt!
    > give tinyjerk=50
    You give tinyjerk 50 Gold Pieces.
  
  This value is defaulted to '0' which allows the normal RhostMUSH parameters
  for giving gold. 

& @paylim
  Attribute: @paylim <player>=<value> (immortal only)
  This attribute, when set, overrides the maximum gold that the target 
  player can give out.  This not only effects the positive value but
  the negative value as well.  This is inherited to all matters of giving
  gold (including @costs/@apays)
  
  Example:
    > @paylim *tinyjerk=100
    > say money(*tinyjerk2)
    You say "50"
  (From Tinyjerk's perspective)
    > give tinyjerk2=100
    That person doesn't need that many Gold Pieces!
    > give tinyjerk2=-200
    That person doesn't need that much Debt!
    > give tinyjerk=50
    You give tinyjerk 50 Gold Pieces.
  
  This value is defaulted to '0' which allows the normal RhostMUSH parameters
  for giving gold. 

& @rsrvdesc2
  Attribute: @rsrvdesc2 <target>=<text> (royalty and higher only)
  This works exactly like the normal @desc attribute except that it is
  only settable by staff.  When that person is looked at, this description
  is seen after the normal description.  Only royalty and higher can set
  and see this attribute.  For more help, look at the normal help on '@desc'.
  
  Example:  @rsrvdesc2 *aplayer=Just desc them like you would a @desc
  
  See Also: @adesc2

& @adesc2
  Attribute: @adesc2 <target>=<text> (royalty and higher only)
  This works exactly like the normal @adesc except that it is only settable
  by staff.  This is triggered after the normal @adesc when the given player
  is looked at.  Refer to the normal help on '@adesc' for more help on this
  attribute.
  
  Example:  @adesc2 *aplayer=@pemit me=%n just looked at you. 
  
  See Also: @rsrvdesc2

& @invtype
  Attribute: @invtype <target>=<text> (royalty and higher only)
  This attribute identifies the string associated with the 'position' of the 
  item being wielded or worn (both seen with the 'wielded' and 'worn' cmds).
  If this attribute is not set, it defaults to 'Miscellaneous' for the
  positional description.
  
  Example: 
    > @create Dagger
    Dagger created as object #123
    > @toggle Dagger=wielded
    Set.
    > wielded
    You are wielding:
    Miscellaneous: Dagger(#123)
    > @invtype dagger=In Left Hand
    Set.
    > wielded
    In Left Hand: Dagger(#123)
  
  See Also: alt_inventories, altover_inv
     
& @altname
  Attribute: @altname <target>=<text> (royalty and higher only)
  This establishes an alternate name for the target.  When set, anyone not
  bitlevel 5 and higher OR who does not pass the ALTNAMELOCK (@lock/altname)
  will see the alternate name when they look at the target.  They will see
  the alternate name in content and inventory lists, too.  
  
  Example:
    > look bob
    bob(#123Pc)
    You see nothing special.
    > @altname bob=Fred
    > look bob (or look fred)
    bob(#123Pc) {Fred}
    You see nothing special.
    > look
    Room(#122R) 
    You see nothing special.
    Contents:
    bob(#123Pc) {Fred}
    > look (a mortal's perspective of one who doesn't pass @lock/altname)
    Room
    You see nothing special.
    Contents:
    Fred

& @quota
  Two Systems:
 
     ALTERNATE   - this is the enhanced version of the @quota system.
     STANDARD    - the default quota system (and simple form)
 
  For help on the alternate system:  wizhelp @quota alternate
  For help on the standard system:   wizhelp @quota standard
  
  To change back and forth between systems, use the '@convert' comand.
  
  See Also: @convert
     
& @quota standard
  Command: @quota[/switches] [ [player]=[value] ]
 
  This lists or sets the given player's total quota.  The value is a numerical
  value within a positive or negative range.
  Switches:
    /FIX    - Fixes the quota of the given player.
    /LOCK   - Locks the quota of the given player so it can't be modified.
 
  Example:  @quota player=10
            @quota/lock player
  
  See Also: @stat, QUOTAS, 'help quota'

& @quota alternate
  Command: @quota[/<switches>] [<player>[=<quota>]]
           @quota/all[/<switches>] [<quota>]]
  
  Lists or sets the player's (or everyone's) remaining or total quota
  according to the switches used.  You may specify 'all' to set/unset/etc
  quotas on ALL players.  Be forwarned however, that this is spammy.
  
  The following switches are available:
     /ALL       - Display or set all quotas for given player.  Can be used in
                  junction with most other switches
     /FIX       - Repair the remaining or total quota, assuming that the other
                  is correct.
     /SET       - Set the remaining or total quota to the specified value.
                  This is the default and need not be specified.
     /MAX       - Set the maximum quota allocation for that user.
     /XFER      - Like /xfer for mortals, but allows transfer of other's quota
     /TAKE      - allows you to set automatic quota redistribution on players.
     /REDO      - repairs quota of everyone in existance.
  
{ wizhelp quota alternate2 for more }
& quota alternate2
  (CONTINUED)
  Command: @quota[/<switches>] [<player>[=<quota>]]
           @quota/all[/<switches>] [<quota>]]
  
     /LOCK      - locks the quota in at the current value.  Quota will not be 
                  able to be added by that user w/o removing this lock.
     /UNLOCK    - removes a quota lock. 
     /CLEAR     - clears given field (used only with the /take switch)
     /GENERAL   - sets the general quota of the given user.
     /THING     - sets the thing (object) quota of the given player.
     /PLAYER    - sets the player (robot) quota of the given player.
     /EXIT      - sets the exit quota of the given player.
     /ROOM      - sets the room quota of the given player.
  
{ wizhelp quota alternate3 for more }

& quota alternate33
  (CONTINUED)
  Command: @quota[/<switches>] [<player>[=<quota>]]
           @quota/all[/<switches>] [<quota>]]
  
  You can also set quota in the form: @quota user=#[[,#][,#][,#][,#]]
  where the quota is specified in the order of:
  
                       GENERAL THING PLAYER EXIT ROOM
  
  You may just use commas to skip a field to go to the next.
                
  This option can not be used in junction with the switches.

  Example:  @quota/all/max player=100
            @quota/room player=50
            @quota/lock/exit player
  
  See Also: QUOTAS, 'help quota'

& @readcache
  Command: @readcache
  
  Reads the commonly-used text files and help indexes on the game directory
  into an internal cache, destroying the prior contents of the cache.
  Use this command whenever you change one of the text of index files in
  the game directory.

& @rwho
  Command: @rwho[/<switches>]
  
  Sets up or breaks the connection to the remote RWHO server over which
  WHO data is transmitted.  Note that changes to many of the RWHO
  configuration parameters only take effect when RWHO transmission is next
  started.
 
  The following switches are supported:
     /start - Opens the connection and transmits an 'I am alive' message.
     /stop  - Transmits an 'I am going down' message and closes the
              connection.
 
  See Also: rwho_data_port, rwho_dump_interval, rwho_host, rwho_password,
            rwho_transmit.

& @shutdown
  Command: @shutdown <text>
  
  Disconnects all connected players, saves the database to disk, and shuts
  down the game.  The game is unavailable until it is restarted.  If an
  argument is specified, it is written to the file named by the status_file
  config directive.
  
  See Also: status_file

& @snapshot
  Command: @snapshot[/<switch>] <arg1> [=<arg2>]
  
  The snapshot command takes a snapshot image of a target dbref# and 
  optionally performs a task based on the optional switch to both the
  image file and the object in question.  The following switches exist:
  
    /list      - Syntax: @snapshot/list  (default)
                   This lists all image files you currently have to disk.
    /verify    - Syntax: @snapshot/verify <imagefile>
                   This issues a sanity check on the image file and lets
                   you know if the file is valid or corrupt.
    /del       - Syntax: @snapshot/del <imagefile(s)>
                   This deletes the specified image file(s) from the drive.
                   You may specify more than one in a space-delimited list.
    /unload    - Syntax: @snapshot/unload <target> [=<optional suffix>]
                   This makes a snapshot file of the specified target and
                   creates an optional suffix name for it.  Default name
                   will be the dbref#.  '123.img' for example.  The new
                   name will be 123_<suffix>.img.
    /unall     - Syntax: @snapshot/unall <list of targets>
                   This works like /unload but takes a list of targets.
                   You can not specify a destination name with this arg.
    /load      - Syntax: @snapshot/load <target> = <imagefile>
                   This will load the image file onto the specified object.
                   The object types MUST be the same, the object MUST be
                   a valid object, and some things (like location) will
                   be skipped on the restore.  Parents and Zones will be
                   set if validated.
    /overwrite - when specified with /unload or /unall will allow
                 overwriting the target file.
  
  See Also: @dump, @dbck

& @hide
  Command: @hide[/<switches>]
  
  See the normal help on this command.

& @tag
  Command: @tag <tagname>
           @tag/list 
           @tag/list <searchstring>
           @tag/add <tagname>=<#dbref>
           @tag/remove <tagname>
  
  This command gets used to manage and list the named tags of Rhost's tag
  system (see wizhelp tags).
 
  The first form lists the #dbref stored behind the tag named <tagname>. If
  the tag does not exist, #-1 gets returned. This also goes for tags that
  previously existed, but the #dbref stored behind them has been @destroyed
  in the meantime - even if a new object once more is valid behind this
  #dbref.
 
  @tag/list lists all current valid tags and the #dbref associated with them.
  @tag/list also accepts an optional search string as an argument. This
  can get used to filter the taglist by names. It accepts wildcards and is
  case-insensitive. 
 
  @tag/add gets used to add a tag. If a named tag already exists, an error
  is returned.
 
  @tag/remove removes an existing tag. If the tag named <tagname> does not
  exist, an error is returned.
 
  The following sanity checks are performend for tags:
 
  * Tagnames cannot be more than 32 characters in length
  * Tagnames cannot cointain whitespace.
  * Tags need to be supplied with a valid, existing object's #dbref on
     creation.
  * Up to 16 tags can reference the same #dbref
  * Unicode is valid in tagnames!
  * On destruction of an object, all referencing tags get also removed.
 
  See also: wizhelp tags, help tag()
   
& TOTEMS
  Topic: TOTEMS
  
  Totems are a generic overset of flags and toggles.  Eventually this will
  be the functionality that will take over control of flags and toggles
  internally to the mush.
  
  Totems are unique to flags and toggles in the fact that:
    1.  They can be defined and removed dynamically without any type
        of damage to the mush or the database.
    2.  They can be renamed without any damage to the mush or the
        database.
    3.  They can be defined statically via config file entries.
    4.  They can be defined permanently via source files and compiled in
        just like a normal flag and toggle.
    5.  With hardcode only, they can be assigned unique control, power,
        or similar affect as when toggles and flags.
    6.  The number of totems can be increased or shrunk dynamically
        without damaging the database.  Howeber, if hardcoding to
        a specific slot, it likely won't compile if you shrink to
        the point that slot no longer exists.
  
  A totem 'slot' is a unique flag space that contains 32 unique flags
  for that slot.  By default there are 10 slots allowing a total of
  320 flags.  Each flag has a unique slot and flag bitmask for its
  identifier.
  
  { wizhelp totem2 for memory statistics and guidelines }
   
& TOTEM2
  Totems are all held in memory so the overhead will be based on the
  total number of slots and the total number of objects in the database.
  
  Flag and totem spaces are stored in an attribute space, so the larger
  your LBUF size, the larger the contents of the attribute and the larger
  number of totems you can have. 
  
  If you shrink the LBUF size to no longer hold the slots, the slots will
  be cut off and upon loading the game will see it as a slot shrink event
  and reduce the total slots.
  
  Statistically the following is a general guideline with max values:
    Max values:
      *** 4K  lbufs -  300 max slots  (for   9600 flags) 
      *** 8K  lbufs -  600 max slots  (for  19200 flags) 
      *** 16K lbufs - 1200 max slots  (for  38400 flags) 
      *** 32K lbufs - 2500 max slots  (for  80000 flags) 
      *** 64K lbufs - 5000 max slots  (for 160000 flags) 
 
 Overhead: ((slots * 8) * total objects) + (flags * name len) + (slots * 8)
 
 Flags have a hard name length of 20 characters.
 Slots are defined as a long or 8 bytes of overhead for the declaration.
  
 Flags are based on how many are used only.
 
 Memory overhead assuming all flags possible used with max length of name.
   5000 obj db, 300 slots: ((300 * 8) * 5000) + (9600 * 20) + (300 * 8)
     --> 12,194,400 (12 MB)
   20000 obj db, 2500 slots: ((2500 * 8) * 20000) + (80000 * 20) + (2500 * 8)
     --> 401,620,000 (400 MB)
   20000 obj db, 40 slots: ((40 * 8) * 20000) + (1280 * 20) + (40 * 8)
     --> 6,425,920 (6.4 MB)
   20000 obj db, 10 slots: ((10 * 8) * 20000) + (320 * 20) + (10 * 8) 
     --> 1,606,480 (1.6 MB)
  
 A realistic medium sized game will have about 8000 objects and stick with
 the default of 10 slots.
   8000 obj db, 10 slots: ((10 * 8) * 8000) + (320 * 20) + (10 * 8)
     --> 646,480 (640 KB)
  
 And sure, let's assume an obscene sized game with obscene sized totems.
 You know, just for giggles.
   100k obj db, 5000 slots: ((5000 * 8) * 100000) + (160000 * 20) + (5000 * 8)
    --> 4,003,240,000 (4 GB)
 
 Or about the overhead of firefox :) 
 
 But why you'd want or need 160,000 flags is anyone's guess.
  
 So as seen, default usage will cause minimal overhead, while maxing out
 the totems to the obscene will gobble up a bit of memory for very large
 games.
  
& @totem
  Command: @totem[/<switches>] [<totemname> [=<args>]
  
  See 'TOTEMS' for a general overview of totems.
  
  The @totem command is the administative tool for in-game adding and
  manipulation of @totems.  You may also add them in the source or through
  the netrhost.conf file.  They can be issued through the @admin admin_object
  as well.
  
  The following switches exist for @totem:
    /add      - Add the totem.  CONFIG: totem_add
                Syntax:  @totem/add totemname=slot# bitvalue
    /remove   - Remove the totem.  (Can only remove temporary totems)
                Syntax:  @totem/remove totemname
    /list     - List the totems you have access to.  Does permission checks.
                Syntax:  @totem/list
    /set      - Controls who may set the totem.  CONFIG: totem_access_set
                Syntax:  @totem/set totemname=permission(s)
    /unset    - Controls who may unset the totem.  CONFIG: totem_access_unset
                Syntax:  @totem/unset totemname=permission(s)
    /see      - Controls who may see the totem.  CONFIG: totem_access_see
                Syntax:  @totem/see totemname=permission(s)
    /type     - Controls what types are denied.  CONFIG: totem_access_type
                Syntax:  @totem/type totemname=permission(s)
    /rename   - Rename the totem.  CONFIG: totem_rename
                Syntax:  @totem/rename totemname=newname
    /validate - Does a validation check on totems for dangling slot/values
                Syntax:  @totem/validate
    /info     - Does information lookup on the specified totem.
                Syntax:  @totem/info totemname
    /fulllist - Does full expansion of totem list (NAME|SLOT|VALUE)
              - Syntax:  @totem/full totemname
    /alias    - Assigns one or more aliases to a totem.  CONFIG: totem_alias
              - Syntax:  @totem/alias totemname=alias(s)
    /unalias  - Removes the alias of the targeted totem.
              - Syntax:  @totem/unalias totemname=alias(s)
    /display  - Show flags assigned to flag values of given slot.
                Syntax:  @totem/display slotnumber
    /letter   - Assign a flag letter to totem.  CONFIG: totem_letter
                Syntax:  @totem/letter totemname=tierlevel letter
    /slot     - display all the slots and the number of totems assigned.
  
    Currently not implemented:
    /clean    - Will clean the dangling slot/values off all players
                Syntax:  @totem/clean
   
  You may see individual help with 'help @totem/switchname' for any of the
  above switches for more detail on each sub-topic.
   
  See Also:  totem_add, totem_alias, totem_access_set, totem_access_unset,
             totem_access_see, totem_access_type, totem_letter, totem_rename,
             totem_name

& @totem/add
& totem add
& @totem add
  Command: @totem/add <totem> = <slot> <mask>
  
  This option will add the <totem> by name into the given <slot> with the
  bitwise <mask> specified.  The mask must be a unique bitmask and the
  slot must not currently be used.   The mask can be either in hex starting
  with 0x as shown, or the decimal equivelant.  The valid slots are defined
  to whatever the max slots are for that RhostMUSH.  The default is 0-9.
  
  Totem names must be less than 20 characters long.
  
  The following are the valid bitmasks:
  
    HEX        DECIMAL      HEX        DECIMAL      HEX        DECIMAL
    ---------- -----------  ---------- -----------  ---------- ----------
    0x00000001           1  0x00000800        2048  0x0040000      4194304
    0x00000002           2  0x00001000        4096  0x0080000      8388608     
    0x00000004           4  0x00002000        8192  0x0100000     16777216    
    0x00000008           8  0x00004000       16384  0x0200000     33554432    
    0x00000010          16  0x00008000       32768  0x0400000     67108864    
    0x00000020          32  0x00010000       65536  0x0800000    134217728   
    0x00000040          64  0x00020000      131072  0x1000000    268435456   
    0x00000080         128  0x00040000      262144  0x2000000    536870912   
    0x00000100         256  0x00080000      524288  0x4000000   1073741824  
    0x00000200         512  0x00100000     1048576  0x8000000   2147483648  
    0x00000400        1024  0x00200000     2097152     
  
  Examples:
    > @totem/add mytotem=1 0x00000001
    > @totem/add anothertotem=2 2
  
  Config parameter equivelant:
    > totem_add mytotem 1 0x00000001
    > totem_add anothertotem 2 2 
  
  See Also: @totem

& @totem/remove
& totem remove
& @totem remove
  Command: @totem/remove <totem>
  
  This will remove the specified totem.  By default you can only remove
  temporary or static totems.  A temporary totem is defined as one that
  is added via the @totem/add command.  A static totem is one that is defined
  using the .conf file totem_add option.  A permanent totem is one defined
  through the use of the internal source totem_add() as documented in the
  source itself.

  Examples:
    > @totem/remove mytotem
    > @totem/remove myothertotem    
  
  See Also: @totem

& @totem/set
& totem set
& @totem set
  Command: @totem/set <totem>=<permission(s)>
  
  This sets the given permissions on the given totem on who may set them.  
  Valid permissions can be seen with 'wizhelp permissions'.  A special 
  permission of 'mortal' is allowable.  You may specify multiple permissions 
  at once.  You may preceed a permission with '!' to remove the permission.
  
  This permission controls who may set the given totem.
  
  Examples:
    > @totem/set mytotem=wizard
    > @totem/set mytotem=!wizard architect
  
  Config parameter equivelant:
    > totem_access_set mytotem wizard
    > totem_access_set mytotem !wizard architect
  
  See Also: @totem

& @totem/unset
& totem unset
& @totem unset
  Command: @totem/unset <totem>=<permission(s)>
  
  This sets the given permissions on the given totem on who may unset them.
  Valid permissions can be seen with 'wizhelp permissions'.  A special 
  permission of 'mortal' is allowable.  You may specify multiple permissions 
  at once.  You may preceed a permission with '!' to remove the permission.
  
  This permission controls who may unset (ergo clear) the given totem.
  
  Examples:
    > @totem/unset mytotem=wizard
    > @totem/unset mytotem=!wizard architect
  
  Config parameter equivelant:
    > totem_access_unset mytotem wizard
    > totem_access_unset mytotem !wizard architect
  
  See Also: @totem

& @totem/see
& totem see
& @totem see
  Command: @totem/see <totem>=<permission(s)>
  
  This sets the given permissions on the given totem on who may see them.
  Valid permissions can be seen with 'wizhelp permissions'.  A special 
  permission of 'mortal' is allowable.  You may specify multiple permissions 
  at once.  You may preceed a permission with '!' to remove the permission.
  
  This permission controls who may see the given totem.
  
  Examples:
    > @totem/see mytotem=wizard
    > @totem/see mytotem=!wizard architect
  
  Config parameter equivelant:
    > totem_access_see mytotem wizard
    > totem_access_see mytotem !wizard architect
  
  See Also: @totem

& @totem/type
& totem type
& @totem type
  Command: @totem/type <totem>=<permission(s)>
  
  This sets the given restrictions on the given totem on who may iset/unset
  them based on type restrictions.  You may specify multiple permissions 
  at once.  You may preceed a permission with '!' to remove the permission.
  
  This permission controls a special type-case of what targets are allowable
  to set or be set.
  
  Valid types are: THING, PLAYER, EXIT, ROOM, REGISTERED, GUILDMASTER,
                   ARCHITECT, COUNCILOR, WIZARD, IMMORTAL
  
  If the type is set to THING, then the target can not be a type of THING.
  If in addition you add COUNCILOR, then only COUNCILOR and higher may set
  type THING.
  
  Examples:
    > @totem/type mytotem=room
    > @totem/type mytotem=!room thing wizard
  
  Config parameter equivelant:
    > totem_access_type mytotem room
    > totem_access_type mytotem !room thing wizard
  
  See Also: @totem


& @totem/rename
& totem rename
& @totem rename
  Command: @totem/rename <totem>=<newname>
  
  This command will rename the totem for the duration of the boot cycle.
  If you have specified the config parameter 'totem_rename' with the
  specified override, you may rename static and/or permanent totems.
  
  If either the totem name is invalid or the destination totem name is
  invalid or in use, the command will fail.  
  
  Totem names must be less than 20 characters long.
   
  Examples:
    > @totem/rename mytotem=mynewtotem
    > @totem/rename anothertotem=anothernew
  
  Config parameter equivelant:
    > totem_name mytotem mynewtotem
    > totem_name anothertotem anothernew
  
  See Also: totem_rename, @totem

& @totem/validate
& totem validate
& @totem validate
  Command: @totem/validate
  
  This command will go through all the totems and print out any invalid
  totems.  Invalid totems are totems that are defined on players that 
  were undefined or removed.
  
  The way totems work is it still saves the bitmask of what the totem
  was on the player.  This is intentional since totems may dynamically
  change, and it does no harm.
  
  This will display all invalid totem values, what slot they exist in,
  and a list of every dbref# in the database that currently has defined
  an unreferenced totem bitmask.
   
  Example:
    > @totem/validate
  
  See Also: @totem 

& @totem/info
& totem info
& @totem info
  Command: @totem/info <totem>
  
  This command gives detailed information on the specified totem.
  Such information will be the bitmask, the slot, it's permanency 
  level, permissions, and what dbref#'s currently have the particular 
  totem set.
  
  Examples:
    > @totem/info marker0
    > @totem/info mytotem 
  
  See Also: @totem, @totem/clean

& @totem/fulllist
& totem fulllist
& @totem fulllist
  Command: @totem/fulllist [<slot>]
  
  This will give a listing of all the totems.  You may optionally specify 
  a totem slot you wish to see as this may be necessary as the complete
  totem list can easily exceed the LBUF buffers.
  
  The administrative quick-list will show totems in the following format:
               TOTEMNAME|SLOT-POSITION|SLOT-MASK-VALUE
  
  An example output would be:
               MYTOTEM|1|0x00000001
  
  If you wish to see more details on a specific totem, please refer to
  the @totem/info command.
  
  Examples:
    > @totem/fulllist
    > @totem/fulllist 0
  
  See Also: @totem, @totem/info

& @totem/alias
& totem alias
& @totem alias
  Command: @totem/alias <totem>=<alias(es)>
  
  This command will set the specified aliases for the target totem.  You 
  may have a maximum of 10 aliases per totem.  This value is hardcoded and
  can not be changed.  There should not be a reason for more than 10 aliases
  for a totem.
  
  If a totem alias already exists, is invalid, or is the name of an existing
  totem, the alias will fail for that totem alias name only.  The rest will
  work, if valid.
  
  You may specify multiple aliases at one time.
  
  Examples:
    > @totem/alias mytotem=my myt myto mytot mytote
    > @totem/alias marker0=0

  Config parameter equivelant:
    > totem_alias mytotem my myt myto mytot mytote
    > totem_alias marker0 0
  
  See Also: @totem

& @totem/unalias
& totem unalias
& @totem unalias
  Command: @totem/unalias <totem>=<alias(es)>
  
  This command will remove the specified aliases from the target totem. 
  
  If a totem alias does not exist, is invalid, or is the name of an existing
  totem, the unalias will fail for that totem unalias only.  The rest will
  work, if valid.  Aliases that are not part of the target totem will not
  be removed.
  
  You may specify multiple aliases to remove at one time.
  
  Examples:
    > @totem/unalias mytotem=my myt myto mytot mytote
    > @totem/unalias marker0=0
  
  See Also: @totem

& @totem/display
& totem display
& @totem display
  Command: @totem/display <slot>
  
  This command will display all the totems, totem letters, and values for
  the specified slot.  If slot is not specified, it defaults to slot 0.
  
  Examples:
    > @totem/display
    > @totem/display 9
  
  See Also: @totem

& @totem/letter
& totem letter
& @totem letter
  Command: @totem/letter <totem>=<tier-level> <letter>
  
  This will define (or redefine) the character associated with a totem.  You
  may reuse letters on totems.  The default letter '?' for tier-level 0 is 
  used as a mask to not display letters for the totems.  This is intentional 
  as some totems you may want to hide the letter value.  
  
  There are three tier levels you may use to define a letter.
    0  - this is the default letter type.
    1  - characters in tier 1 will be surrounded by []'s
    2  - characters in tier 2 will be surrounded by {}'s
  
  Examples:
    > @totem/letter mytotem=0 m
    > @totem/letter mytotem1=1 m
    > @totem/letter mytotem2=2 m
    > think totems(me)
    m[m]{m}
  
  Config parameter equivelant:
    > totem_letter mytotem 0 m
    > totem_letter mytotem1 1 m
    > totem_letter mytotem2 2 m
   
& @totem/clean
& totem clean
& @totem clean
  Not currently implemented.

& @totem/slots
& totem slots
& @totem slots
  Command: @totem/slots 
  
  This command will list every current active totem slot and the total number
  of totems assigned to each slot.  It's a quick way to see what slots are 
  available and how many free spaces are available to each slot.
  
  The output will be in the form: [Slot: <slot>:<totems>]
  
  Where <slot> is the slot number and <totems> are the number of totems
  assigned to that specific slot.
   
  Exmaple:
    > @totem/slots
  
  See Also: @totem
  
& @totemdef
& @toggledef
& @flagdef
  Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]
           @toggledef[/<switches>] [<togglename>=<permission(s)>]
           @totemdef[/<switches>] [<totemname>=<permission(s)>]
  
  This command defines ONLINE all the permissions for who can set, unset,
  and see a given flag.  The only flags that you can NOT define by this
  method is the IMMORTAL flag and any internal flags to the mush.  These
  changes override the current default settings and are only good for
  the current boot of the machine (i.e.  Cleared on @shutdowns and @reboots).
  
  The @toggledef handles all TOGGLES.  (help @toggledef4 for options)
  The @flagdef handlds all FLAGS.      (help @flagdef4 for options)
  The @totemdef handlds all TOTEMS.      (help @totemdef4 for options)
  
  The following switches exist for this command.
    /set    - This sets permissions of who can SET the flag.
    /unset  - This sets permissions of who can UNSET (remove) the flag.
    /see    - This sets permissions of who can SEE the flag.  (see below)
    /type   - This sets restrictions of what type can NOT set/unset the flag.
    /letter - This sets the specific letter defined for the flag.
    /index  - This gives an index of flags and their hex representation and
              associated letter.
    /list   - This lists the flags, settings, and permissions. (default)
              Columns are:
                 'Set'  - defines who can set the flag.
                 'Unset'- defines who can remove the flag.
                 'See'  - defines who can see the flag.
                 'Type' - defines type restrictions for flag.
                 'NoM'  - defines if the flag is un-modifiable.
                 'T'    - Unique to Totems ([P]ermanent, [S]tatic, [T]emporary)
                 'Slot' - Unique to Totems (slot position for @totem)
  
  Keep in mind that if the columns are EMPTY, it defaults to whatever the mush
  standard permissions are for setting and unsetting those flags.
  
  The 'see' is special in the fact this is actually the permission(s) of who 
  can truly see the flag.
  
  { see 'wizhelp @flagdef2' for a list of available permissions }
  { see 'wizhelp @flagdef3' for a list of available type restrictions }
  { see 'wizhelp @flagdef4' for a list of all @admin related parameters }

& @totemdef2
& @toggledef2
& @flagdef2
  Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]  (continued)
           @toggledef[/<switches>] [<togglename>=<permission(s)>]
  
  The permissions available for the /set, /unset, and /see switches are:
  G   god - only #1 has access
  I   immortal - only immortal and higher have access
  W   royalty - only royalty (wiz) and higher have access (can use 'wizard')
  C   councilor - only councilor and higher have access
  A   architect - only architect and higher has access
  S   guildmaster - only guildmaster and higher has access
  M   mortal - mortals and higher have access
  +   no_suspect - suspects can not use this
  !   no_guest - guests can not use this
  ^   no_wanderer - wanderers can not use this
  g   ignore - no one has access to it
  i   ignore_im - only #1 has access to it
  w   ignore_royal - only immortals and higher have access to it
  c   ignore_counc - only royalty and higher have access to it
  a   ignore_arch - only councilors and higher have access to it.
  s   ignore_gm - only architects and higher have access to it.
  m   ignore_mortal - only guildmaster and higher have access.
  L   logflag - log all setting (/set) or removing (/unset) of specified flag.
  
  If you wish to remove a permission, you can use '!permission' to unset a
  given permission.  You may specify multiple permissions to set and remove at
  the same time.  
  
  Examples:
    InGame command -> @flagdef/set marker0=!god !immortal !royalty mortal
    netrhost.conf  -> flag_access_set marker0 !god !immortal !royalty mortal 
  
  { see 'wizhelp @flagdef3' for a list of available type restrictions }
  { see 'wizhelp @flagdef4' for a list of all @admin related parameters }

& @totemdef3
& @toggledef3
& @flagdef3 
  Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]  (continued)
           @toggledef[/<switches>] [<togglename>=<permission(s)>]
  
  The restrictions available for /type are:
  P   player - players can not set/unset this
  T   thing - things (objects) can not set/unset this 
  R   room - rooms can not set/unset this
  E   exit - exits can not set/unset this
  r   registered - enforce type setting to registered players and higher
  g   guildmaster - enforce type setting to guildmaster and higher
  a   architect - enforce type setting to architect and higher
  c   councilor - enforce type setting to councilor and higher
  w   wizard - enforce type setting to wizard (royalty) and higher
  i   immortal - enforce type setting to immmortal/#1 only
  
  Note type restrictions if no bit restriction (rgacwi) specified, it assumes
  no one will be allowed to set that given type.  Ergo, it locks it down
  based on type only.  Registered players are defined as any player who does
  not have the GUEST or WANDERER flag.
   
  If you wish to remove a permission, you can use '!permission' to unset a
  given permission.  You may specify multiple permissions to set and remove at
  the same time.  
  
  Examples: 
    InGame command -> @flagdef/type marker0=immortal !royalty room
    netrhost.conf  -> flag_access_type marker0 immortal !royalty room
  
  {see 'wizhelp @flagdef4' for a list of all @admin related parameters}
  
  See Also: @flag, @flagdef, @toggledef

& @totemdef4
& @toggledef4
& @flagdef4
  Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]  (continued)
           @toggledef[/<switches>] [<togglename>=<permission(s)>]
  
  You may use @admin parameters and/or the netrhost.conf file to set the
  override permissions for flags and toggles.  The following exist.
  
  @admin parameters for FLAG based perissions:
  flag_access_set     - [@flagdef/set] Sets override permission on 'set'.
  flag_access_unset   - [@flagdef/unset] Sets override permission on 'unset'.
  flag_access_see     - [@flagdef/see] Sets override permission on 'see'.
  flag_access_type    - [@flagdef/type] Sets type restrictions on set/unset.
  
  @admin parameters for TOGGLE based permissions.
  toggle_access_set   - [@flagdef/set] Sets override permission on 'set'.
  toggle_access_unset - [@flagdef/unset] Sets override permission on 'unset'.
  toggle_access_see   - [@flagdef/see] Sets override permission on 'see'.
  toggle_access_type  - [@flagdef/type] Sets type restrictions on set/unset.
  
  These parameters allow them to be 'permanent' in so much that they're 
  applied at the booting of the mush.  Be aware that if you use flag_name
  you must specify the flag that flag_name has renamed it to if put after
  the flag_name renaming.
  
  See Also: flag_access_set, flag_access_unset, flag_access_see,
            toggle_access_set, toggle_access_unset, toggle_access_see,
            flag_access_type, toggle_access_type, @flagdef, @toggledef
& @hook
  Command: @hook[/<switch(s)>] [<command/attribute>]
  
  This command will set up 'hooks' to be applied to various commands or
  attributes.  You may specify multiple hooks on items.  The HOOK_OBJ is
  an @admin param that specifies the hook object.  
  
  The following hooks exist:
         /before    - Set up a BEFORE hook on a command.  This will execute
                      functionality BEFORE the command/attribute is done.
                      The attribute is 'b_<command>' on the HOOK_OBJ.
         /after     - Set up an AFTER hook on a command.  This will execute
                      functionality AFTER the command/attribute is done.
                      The attribute is 'a_<command> on the HOOK_OBJ.
         /permit    - Set up a permission for a command.  Anything but '1'
                      will return a 'Permission denied.' for the enactor.
                      The attribute is 'p_<command> on the HOOK_OBJ.
         /fail      - This will process instead of the normal 
                      'Permission denied' if the command is set disabled 
                      or you fail to access it through other means.
         /ignore    - Set up a fall-through on the command.  Anything but '1'
                      causes the command to fall through to be handled by any
                      matching softcode by the same name.
                      The attribute is 'i_<command> on the HOOK_OBJ.
         /igswitch  - Specifies that any non-matching /switch to the command
                      falls through and is handled by softcode.  This allows
                      you to softcode switches to existing commands.
         /clear     - When used in junction with any of the above switches, 
                      will clear the hook from being applied.
         /list      - This lists the current commands/attributes with hooks.
         /include   - Convert the BEFORE and AFTER hooks to command @includes.
  
{ help @hook2 for examples}

& @hook2
  Command: @hook[/<switch(s)>] [<command/attribute>]  (continued)
  
  Exmaples of @hook are as follows:
    > @hook/before look 
    @hook: new mask for 'look' -> before
    > @hook/after look
    @hook: new mask for 'look' -> before after
    > @hook/igswitch look
    @hook: new mask for 'look' -> before after igswitch
    > @hook/igswitch/clear look
    @hook: new mask for 'look' -> before after
    > @hook/list (or just @hook will work)
    ---------------------------------+---------------------------------------
    Built-in Command                 | Hook Mask Values
    ---------------------------------+---------------------------------------
    look                             | before after
    ---------------------------------+---------------------------------------
    Built-in Attribute               | Hook Mask Values
    ---------------------------------+---------------------------------------
                               -- No @hooks defined --
    ---------------------------------+---------------------------------------
    Percent-Substitutions            | Override Status
    ---------------------------------+---------------------------------------
                         -- No percent substitions defined --
    ---------------------------------+---------------------------------------
    Say/Pose/@emit Morgrifies        | Morgrify Status
    ---------------------------------+---------------------------------------
    say, "                           | DISABLED
    pose, :, ;                       | DISABLED
    @emit, \\                        | DISABLED
    ---------------------------------+---------------------------------------
    The hook object is currently: #123 (VALID)
  
  See Also: hook_obj, hook_cmd, HOOK SETUP, sub_override, sub_include,
            morgrify

& @limit
  Command: @limit[/<switch>] <player> [=<newvalue>]
  
  This command will set/reset the maximum limits of the total a player can
  @destroy or create new user variable attributes.  A new user variable
  attribute is defined as one that doesn't previously exist in the hash
  table (ie: the database).  It will not effect built in attributes or
  existing attributes.
  
  The following switches exist:
    /list  - This lists the current values for the target player (default)
    /vmod  - This defines the new user variable maximum
    /dmod  - This defines the new @destroy maximum
    /lfun  - Defines the maximum allowed @lfunction definitions 
    /reset - This resets the maximums to the global default.
  
  The global defaults are defined by max_dest_limit and max_vattr_limit
  accordingly.  The special values of '-1' mean unlimited, and '-2' mean
  to use the global setting.  Unlimited (-1) is not allowed for /lfun.
  
  Seperate wizard attributews are available that are defined by the params
  wizmax_dest_limit and wizmax_vattr_limit.  By default wizards are not
  checked, and must be enabled with the param 'vattr_limit_checkwiz'
  
  See Also: max_vattr_limit, max_dest_limit, wizmax_vattr_limit, 
            wizmax_dest_limit, vattr_limit_checkwiz, lfunction_max

& @dynhelp
  Command: @dynhelp[/<switch>] <helpfile>[/<topic>] [=<target player>]
  
  This command will read a specified help file (whatever.txt) as long as it
  has a matching index file (whatever.indx) at the same location.  This has 
  very little more CPU/processing that a normal 'help' or 'wizhelp' would
  entitle and will take up no extra resources to use no matter how many text
  files you wish to read.  Use a '^' to specify sub-directories.  '.' is not
  valid as part of the filename (or path).
  
  Note: For /search and /query you must have wildcards for patterns.
  
  Available switches:
    /parse   - this will parse the help evaluating all %n's/functions.
    /search  - search content and list topics containing '<topic>'.
    /query   - like /search, but gives details on matching lines of '<topic>'
    /nolabel - snuff the hilight index of the topic <topic> when showing.
  
  Example:
    (let's say you want to read a history text file called 'history.txt')
    > @dynhelp history
    (this will give you the main 'help' of the 'history.txt' file)
    > @dynhelp history/lesson
    (this will give you the topic 'lesson' in the 'history.txt' file)
    > @dynhelp history/lesson=tinyplayer
    (this will give tinyplayer the topic 'lesson' in the 'history.txt' file)
    > @dynhelp txt^help
    (this goes to subdirectory 'txt' and gives main 'help' in file 'help.txt')
  
  See Also: dynhelp(), textfile()

& @thaw
  Command: @thaw[/<switches>] <ftime>
  
  This command thaws the frozen queue entry specified by the frozen time
  that the job was frozen.  If for some reason two jobs have the same
  ftime, it will take the first match for @thawing.  If the queue entry
  no longer has valid information for enactor or enactee, the queue entry
  is automatically deleted and not re-issued into the active queue.  When
  a job is re-issued into the active queue, it starts where it last left
  off in the timer.  No time will have elapsed during it's frozen state.
  The following switches exist for @thaw:
     /delete   - This purges the entry from the frozen queue instead of
                 attempting to re-issue it into the active queue.
  
  See Also: @ps, @freeze

& @timewarp
  Command: @timewarp[/<switches>] <secs>
  
  Subtracts (or adds if negative) <secs> to one or more internal timers,
  depending on the switches specified from the following list:
     /check    - The time left until the next consistency check and database
                 cleaning.
     /dump     - The time left until the next automatic checkpoint dump.
     /idle     - The time left until the next check for idle users.
     /queue    - (default) Adjusts the time-to-execute for all entries in the
                 wait and semaphore queues.  Entries whose time-to-execute
                 becomes less than the current time are then ready for
                 execution. The contents of the object queue are also
                 appended to the player queue.
     /rwho     - The time left until the WHO list is transmitted to the
                 connected RWHO server (if any)
 
  Note: these flags may be specified together if desired.
  
  Example:  @timewarp/queue 100
  
  See Also: @list options.

& @turtle
  Command: @turtle[/<switch>] <victim>[=<given name|recipient/given name>]
  
  Turns, by default, the victim into a turtle.  This is just like @toad, but
  allows some special options.  You may specify a different name to call
  the target.  If left out, or null, it assumes the default of
  'soft-shell turtle' when applying the rename of the player.  The name
  of the player by default will be 'A soft-shell turtle named <name>'.
  
  The following switches are available:
    /no_chown - Don't change the ownership of the victim or his objects.
    /unique - Allow optional target owner as well as name.
  
  Examples:
    @turtle *TinyJerk=whiney little pissmoaner
    @turtle/unique *tinyjerk=DummyHolder/another whiney pissmoaner
    @turtle/no_chown *tinyjerk=small worm

& @toad
  Command: @toad[/<switches>] <victim>[=<recipient>]
  
  Turns the victim into an object (a slimy toad) and disconnects them from
  the game.  The named recipient (or the @toading wizard) get ownership of
  all the victim's things, rooms, and exits, as well as of the toad object
  itself.  The name of the toadie will be 'A slimey toad named <name>'.
 
  The following switches are available:
    /no_chown - Don't change the ownership of the victim or his objects.
  
  Example:  @toad *deserving_toadie
  
  See Also: @boot, @chownall, @destroy.

& @tor
  Command: @tor[/<switch>]
  
  This command will display or re-cache the local host site information for
  use with dynamic live TOR protection.  If you change the host site 
  you will need to recache the entry for TOR to correctly recognize the
  change that is applied.
  
  The following switches exist:
    /list  -- Default.  Lists the current TOR parameters.
    /cache -- re-cache the host name data into TOR data.
  
  See Also: tor_paranoid, tor_localhost
  
& @wall
  Command: @wall[/<switches>] <message>
  
  With no switches, shouts <message> to every connected player or to every
  connected wizard, prefixed by either 'Announcement:' (if for everyone) or
  'Broadcast:' (if for wizards).  The following switches can be used to get 
  the described effects:
     /emit      - Format the message as an emit (ie send just <message>).
     /pose      - Format the message as a pose (ie <youname> <message>).
     /wizard    - Only send the message to connected wizards.
     /no_prefix - Don't prepend 'Announcement:' / 'Broadcast:' to the message.
  
  If neither /emit or /pose are used, you can format the message one of 
  several ways by specifying ':', ';', or '"' as the first character of the 
  message.  ':' and ';' format the message as if /pose were specified, except
  that ';' does not insert a space between your name and the message.  '"' 
  formats the message in normal @wall format (this is the default).
  The message is also written to the log file.
  
  Example:  @wall/wiz You see what that mortal did?
            @wall/emit/no_prefix A rumbling echos throughout the mush.

& INHERIT
  Flag: INHERIT(I) (all types)
  When set on an object, gives the object access to the ROYALTY and IMMORTAL
  powers that its owner has, and also allows that object to control the player
  and other INHERIT objects owned by that player.
  When set on a player, gives all of that player's objects access to the
  ROYALTY and IMMORTAL powers of their owner, and allows them to control the
  player or any object owned by the player.

& MARKED
  Flag: MARKED(m) (all types)
  This flag is used by the database cleaning routines to check the
  connectivity of the database, and also by the @mark commands to select
  objects for special attention.  Since database cleaning is performed
  automatically from time to time, automatic cleaning must be disabled
  before using the @mark commands, and the command @mark_all/clear should
  be run immediately before turning automatic cleaning back on.
  See Also: @apply_marked, @dbck, @disable, @enable, @list, @mark,
            @mark_all.

& STARTUP
  Flag: STARTUP(z) (all types)
  This flag is managed internally by the server and it is not directly
  settable.  It indicates whether or not the object has a STARTUP attribute
  that is to be run when the RhostMUSH is booted.  This saves a considerable 
  amount of time considering that very few objects have a STARTUP attribute.
  This flag is set automatically when the STARTUP attribute is set to a
  non-empty string, and cleared when the STARTUP attribute is removed or
  set to a null string.
  See Also: @startup.

& SUSPECT
  Flag: SUSPECT(u) (players)
  When set on a player, causes name changes, kills, and attempted kills 
  to be reported to all connected wizards.  If you are @toggled MONITOR
  then all connects and disconnects of suspect players are individually
  marked.  This flag is only visible and settable by wizards.

& GOD
& GHOD
& #1
  Database owner. [bitlevel 7]
  
  This is auto-flagged immortal internally and considered the game owner.
  They can do everything within the game, short of some internal flags
  which are locked away from anything.
  
  This player is the only player that can set/remove the immortal flag.
  
  Please refer to 'immortal' in the wizhelp file for anything else they
  can do.  It's basically everything in the wizhelp/help files.
  
  #1 should be considered an administrative account only.  Used only
  in the most dire of situations or when you need to set/remove the
  immortal flag.  You should NOT have anything owned as #1, since
  only #1 can directly affect/edit/alter what #1 owns.  For master 
  room ownership, please use an IMMORTAL player.
  
  See Also: GUILDMASTER, ARCHITECT, ROYALTY (or WIZARD), COUNCILOR,
            IMMORTAL, CONTROL, INHERIT

& SUPER-ROYALTY
& IMMORTAL
  Flag: IMMORTAL(i) (players) [bitlevel 6]
  A player that is set IMMORTAL is essentially #1.  They can do absolutely
  anything in the game except directly affect #1 and what #1 owns.  They
  should be set only when you require an administrator to have full access
  to the game, database, and code.  Head Coders or Game Owners are two
  examples of who will likely be immortal.
  
  Absolutely every command, feature, and function within RhostMUSH that
  is available to #1 is available to IMMORTAL with few exceptions.
  
  A breakdown of abilities is as follows:
        - The only thing this bitlevel can not do is directly effect #1,
          anything #1 owns (like garbage), set/unset some internal 
          flags/attributes (which #1 can't either), and set/unset the
          immortal flag.  These players can do EVERYTHING else.  Treat
          this bit as you would treat #1.  Only give it to those you know
          without a doubt you can trust.
        + Can do everything except set some internal flags, effect #1,
          and set/remove the immortal flag.
  
  See Also: GUILDMASTER, ARCHITECT, ROYALTY (or WIZARD), COUNCILOR,
            CONTROL, INHERIT

& WIZARD
& ROYALTY
  Flag: ROYALTY(W) (players) [bitlevel 5]
  A player that is set ROYALTY controls all of the objects in the
  database (except for player #1 and immortal), regardless of their 
  ownership or flags.  In general, ROYALTY can do anything using 
  #<number> or *<player>.
  
  Wizards can also use many additional commands that are useful for game
  administration and maintenance.
  
  Only player #1 (and immortals) can set or clear this flag.  An object 
  owned by a Wizard has wizard privileges only if its ROYALTY or INHERIT 
  flag is set, or if the owning Wizard has his INHERIT flag set.
  
  A breakdown of abilities is as follows:
        - This is your standard wizard.  They can do everything you're
          used to on other mushes that wizards can do.  In addition, they
          also override all locks by default (this can be disabled), and
          they have an enhanced wizcloaking ability (which also can be
          disabled).  They can also set all the lower bitlevels.
        + All things of Level 4 and lower (Councilor)
        + Ability to set more flags: STOP, NOSTOP, FUBAR
        + Ability to @attribute,
        + Ability to WIZCLOAK
        + Ability to do some internal configurations.
  
  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, IMMORTAL,
            CONTROL, INHERIT

& COUNCILOR
  Flag: COUNCILOR(a) (players) [bitlevel 4]
  A player set COUNCILOR controls all objects in the database of equal
  level or less regardless of ownership or flags.  In general, a
  COUNCILOR can do anything a ROYALTY can except mess with ROYALTY or
  higher and some various commands/functions listed in wizhelp. If
  an object is set INHERIT, it will inherit all powers of a
  COUNCILOR if owned by that COUNCILOR.
  
  A breakdown of abilities is as follows:
        - This is your almost-but-not-quite wizard.  They have access to
          about 80% of the wizard commands.  This includes @nuke, @toad,
          @newpassword and the like.  The only things they can't do that
          wizards can is wizcloak, override locks, and use some of the
          database manipulation tools in wizhelp.  All player-modifying
          abilities are unlocked for them at this level.
        + All things of Level 3 and lower (Architect)
        + Ability to set more flags: NOCONNECT, WANDERER, FREE
        + Ability to @nuke, @toad, @boot, @chownall, @dbck, @poor,
                     @newpassword, @pcreate, slay, and directly affect
                     players their level and lower.
  
  See Also: GUILDMASTER, ARCHITECT, ROYALTY (or WIZARD), IMMORTAL

& ARCHITECT
  Flag: ARCHITECT(B) (players) [bitlevel 3]
  A player set ARCHITECT controls all objects in the database of equal
  level or less regardless of ownership or flags.  In general, an
  ARCHITECT is a low-powered ROYALTY with various wizard commands
  available to the user.  Any object owned by an ARCHITECT inherits
  all of his/her abilities and powers if set INHERIT.
  
  A breakdown of abilities is as follows:
        - This is your sub-wizard.  They still have the ability to control
          anything their bitlevel and lower (including @chown, @destroy, etc)
          but do not have any control of other players (like @nuke, @toad, etc)
          but they can set the slave flag.  Otherwise, all things their level
          and lower they can treat as if they owned it.
        + All things of Level 2 (Guildmaster)
        + Ability to fully control and modify anything their level and
          lower (including @cloning, @destroying, etc)
        + Ability to use @tel on anything their level and lower.
        + Ability to bypass jump_ok rooms on anything their level & lower.
        + Ability to set some restricted flags: SLAVE, NO_YELL
        + Has infinite quota and money
        + Able to give negative money (Steal)
        + Able to @toggle the MONITOR
  
  See Also: GUILDMASTER, COUNCILOR, ROYALTY (or WIZARD), IMMORTAL

& GUILDMASTER
  Flag: GUILDMASTER(g) (players) [bitlevel 2]
  A player set GUILDMASTER is able to see/view other players and
  anything their level and lower.  They can grant/remove quota,
  and anything they run in the queue is considered free.
  
  A breakdown of abilities is as follows:
        - This is the lowest wiz bit.  They only have moderate abilities.
          They can examine/decompile anything their level and lower, they can
          @guild/@quota people, and they have a few other minor abilities.
          They don't have free money however.
        + Ability to access things remotely (long_fingers)
        + Things are FREE for them in the queue.
        + Can see dbref#'s of things their level and lower
        + Can examine/decompile things their level and lower.
        + Can set @quota/@guild on their level and lower.
  
  See Also: ARCHITECT, COUNCILOR, ROYALTY (or WIZARD), IMMORTAL

& SLAVE
  Flag: SLAVE(s) (players)
  A player set slave can't do any database related commands or talk.
  If mixed with the fubar flag, they're basically a statue.
  
  See Also: FUBAR
& FUBAR
  Flag: FUBAR(f) (players)
  A player set fubar is unable to do anything but pose and  say.
  The user can not QUIT, use any $ command, any built in command, move,
  or do anything other than those two commands.  The flag lives up to
  it's name.
  
  See Also: SLAVE

& CLOAK
  Flag: CLOAK(b) (players)
  A player set cloak does not trigger the 'has arrived', 'has left', 
  'has connected' or 'has disconnected' messages.  They will arrive
  in any room oblivious to anyone else.  However, they do still 
  trigger any and all @aenters, @aleaves, and other action attributes.

& SCLOAK
  Flag: SCLOAK(Z) (super-royalty (immortal) only)
  A super-royalty set scloak will be totally unseeable by royalty.
  This works as the standard built-in cloak does to mortals.

& SPOOF
  Flag: SPOOF([S]) (super-royalty (immortal) only)
  A super-royalty set spoof flag will be totally unseeable by anyone
  below super-royalty.  When set, it disables a wizards normal ability
  to 'bypass' NOSPOOF by making them be effected like a mortal.
 
  This flag is inheritable to the target's belongings.

& DR_PURGE
  Flag: DR_PURGE([x]) (internal flag only)
  This flag is a marker for rooms so once they are destroyed they 
  automatically bypass the recover list and are gone for good.  This flag
  is set by using @destroy/purge on the room.  If the room is set !BYEROOM
  before the room is destroyed, it will remove this flag from it as well.

& GUEST
  Flag: GUEST(!) (royalty and higher only)
  Any player set guest can not build/create/dig no matter what their quota
  is set to.  They also may not set/unset any attribute on themselves
  or anything else.  This flag is automatically set on any guest character
  This flag is only seeable by royalty and higher.

& WANDERER
  Flag: WANDERER(^) (councilor and higher only)
  Any player set wanderer can not build/create/dig no matter what their
  quota is set to.  This flag is just like the GUEST flag except it is seeable
  and changable by COUNCILORS whereas the GUEST flag is seeable and
  changable only by ROYALTY.  The only other difference is those set
  WANDERER are able to set/unset attributes.  Anyone bitted COUNCILOR and 
  lower are effected by this flag.  ROYALTY and higher are immune.
  
  The start_build @admin parameter will, if enabled, disable this flag from
  being set automatically on new players.
  
& DPSHIFT
  Flag: DPSHIFT([B]) (immortal only)
  This is an internal flag in use with the @depower system and shouldn't
  be manually set or unset on anything.

& CMDCHECK
  Flag: CMDCHECK([K]) (immortal only)
  This is an internal flag in use with command parsing permissions
  and should not be manually set or unset on anything.

& _NOCONNECT_MSG
& NOCONNECT
& NO_CONNECT
  Flag: NO_CONNECT([A]) (councilor and higher)
  This flag when set on a player stops them from being able to connect to
  their character.  Keep in mind, this flag will work on councilors and
  lower.  The '[A]' uses a second flag list.
  
  You may specify a custom noconnect message with an attribute
  _NOCONNECT_MSG on the player, or globally via the file object defined
  by the file_object config parameter.
   
  This is aliased to 'NOCONNECT' for compatibility.
   
  See Also: FUBAR, SLAVE, file_object

& NOCODE
& NO_CODE
  Flag: NO_CODE([j])
  
  This flag is similiar to the WANDERER flag, but instead of preventing
  building related commands and functions, it prevents mortals from using
  coding-related features of the MU*, aside of the building commands,
  attribute-setting and string formatting tools.
  
  When combined with the WANDERER flag, the players are essentially left with
  all standard communication and rp-related commands, as well as everything
  usually needed to colorize and format descs. If you do not prefer players to
  be able to build and code after logging in, or your policy prefers sent
  approvals first, consider making these two flags a player_flags setting.
  
  As the list of blocked commands/functions is quite extensive when this
  flag is set on a player, the list of those that still -work- for mortals
  after being set on them is listed in the next help page.

  { 'wizhelp no_code2' for more }

& nocode2
& no_code2
  Commands not blocked by the NO_CODE flag:
  @@ @alias @chown @clone @create @decompile @destroy @dig @doing @edit @emit
  @extansi @find @halt @hide @last @link @list @listmotd @lock @mudwho @name
  @open @password @ps @quitprogram @quota @register @search @selfboot @set
  @sweep @toggle @unlink @unlock @wall drop enter examine get give grab goto
  help +help inventory join kill lpage leave listen look mrpage news page pose
  rpage say score smell taste think touch train use version wielded whisper
  worn +channel +com mail folder +uptime
   
  as well as all @<attribute> style commands.
  
  Functions not blocked by the flag:
  @@ ansi aposs art center clone columns create destroy dice dig edit elock
  emit fullname lastcreate left link lit ljust ljc lock moon move name null
  obj open pedit poss right rjust rjc search searchng set space squish subj
  trim wrap wrapcolumns

& NOMODIFY
& NO_MODIFY
  Flag: NO_MODIFY([M]) (royalty and higher)
  This flag when set on anything makes it so that object can not be
  altered in any way (attributes, flags, etc) even by the owner.
  This flag uses the second flag list.  Immortals and royalty are
  immune to this flag.  If the @admin parameter 'imm_nomod' is
  enabled, then only immortals are immune to this flag.
  
  This flag may be defined to be accessable to IMMORTAL only.  Check
  @list permissions to verify what method is being used.
  
  This is aliased to 'NOMODIFY' for compatibility.
   
  See Also: NOEXAMINE

& NOEXAMINE
& NO_EXAMINE
  Flag: NO_EXAMINE([E]) (royalty and higher)
  This flag when set on anything makes it so the object can not be
  examined or @decompiled no matter the user's permissions.  This
  holds true for all switches of examine as well.  This flag uses
  the second flag list.  Immortals and royalty are immune to this
  flag.
  
  This is aliased to 'NOEXAMINE' for compatibility.
   
  See Also: NOMODIFY

& CMDPARSE
  Flag: CMDPARSE([K]) (immortal only)
  This is an internal flag that is used with the @icmd system.  It should
  not be manually set.

& GUILDOBJ
  Flag: GUILDOBJ(j) (councilor higher settable, royalty higher removable)
  This flag does absolutely nothing.  It is used specifically as a marker
  for guildobjects to allow an easy method to search for them.

& _NOPOSSESS_MSG
& NOPOSSESS
& NO_POSSESS
  Flag: NO_POSSESS([C]) (royalty and higher)
  This flag when set on a player makes it so that player can not be
  on from two separate sites at once.  In addition, it makes it so
  that player is unable to connect from the same site more than
  twice.  This is to help avoid account sharing.
  
  You may set an attribute _NOPOSSESS_MSG on a player that will give
  them a customized message, or set a global one on the file object
  (via file_object config param).
    
  This is aliased to 'NOPOSSESS' for compatibility.
  
  See Also: admin_object
  
& RECOVER
  Flag: RECOVER($) (super-royalty (immortal) only)
  This flag is an internal flag that is used to monitor the recovery
  information for rooms/things/players/etc destroyed so that they can be
  recovered in the future.  If such a thing happens, notify a super-royalty
  and your precious tid-bit can be recovered fully intact (minus any
  parents it had, links, contents, or exits inside of it)
  
  See Also: @recover, @reclist, @purge

& NOMOVE
& NO_MOVE
  Flag: NO_MOVE([N])
  This flag is settable only by royalty and higher.  It in effect stops that
  player from being able to move short of @teleporting.  They can not move
  through exits, get picked up or dropped, nor can they leave or enter 
  anything.
  
  This is aliased to 'NOMOVE' for compatibility.
   
  See Also: help NO_TEL

& STOP
  Flag: STOP([D])
  This flag stops processing (ie: looking for) matching $commands once it 
  finds a match of the $command on an object set STOP.
  
  See Also: NOSTOP

& NOSTOP
& NO_STOP
  Flag: NO_STOP([F])
  This flag when finding a matching $command on an object that has the NOSTOP
  flag set, will first check the master room for a matching $command.  If it
  finds one, it will execute that $command instead of the one on the object
  set NOSTOP.
  
  This is aliased to 'NOSTOP' for compatibility.

  See Also: STOP

& SEE_OEMIT
  Flag: SEE_OEMIT([O])
  This flag when set allows the target to see [oemit] <text> if they were
  being oemitted by use of the @oemit command.  This flag is settable only
  by ROYALTY and higher.

& NOANSINAME
& NO_ANSINAME
  Flag: NO_ANSINAME([n])
  This flag when set on a non-player, will disable that target from 
  displaying ansi colors in it's name.  If specified on a player, then
  not only will that player be disabled from having an ansi name, but
  so will everything that belongs to that player.  It is inherited.

& NOGOBJ
& NO_GOBJ
  Flag: NO_GOBJ([G])
  This flag when set disables the target from executing any commands on
  anything that has the GUILD_OBJ flag set.  This is settable by ROYALTY
  and higher only.

& NOPESTER
& NO_PESTER
  Flag: NO_PESTER([p])
  This flag when set disables the target from being able to whisper or @pemit
  at all.  This lives up to the flag's name.  This is settable by ROYALTY
  and higher only.

& NOOVERRIDE
& NO_OVERRIDE
  Flag: NO_OVERRIDE([V])
  This flag when set disables the target from overriding locks.  This allows
  ROYALTY and IMMORTAL from overriding locks (including uselocks and the
  like) as though a nice feature, it can become tiresome.  Settable by
  ROYALTY and higher only.
  
  See Also: no_uselock

& NOUSELOCK
& NO_USELOCK
  Flag: NO_USELOCK([U])
  This flag when set disables the target from overriding uselocks.  This 
  allows ROYALTY and IMMORTAL from overriding only uselocks to avoid 
  difficulties in triggering code that you may not desire.
  
  See Also: no_override

& ATRLOCK
  Attribute flag: ATRLOCK(l)
  This attribute flag is used to set attributes so that they will be globally
  checked for set/clear locks on a pre-defined global object prior to being
  allowed to be thereby set/cleared.
  
  See Also: global_attrdefault

& PINVISIBLE
  Attribute Flag: PINVISIBLE(v)
  This attribute flag is used to set attributes so that they can no longer
  be 'visible' with examine, @decompile, lattr() or any of the other wildcard
  matching attribute functions/commands.  However, they still can be gotten
  with  u(), v(), get() and the like.  This is to allow functionality to
  continue without revealing the attributes.

& @allowance
  Attribute: Allowance
  Command: @allowance <object>[=<amount>]
  
  Sets the amount of money that the player receives each day he/she connects
  to the RhostMUSH.  The Allowance attribute overrides the default allowance
  specified by the paycheck config parameter.
  This attribute is only visible and settable by wizards.  It is only
  meaningful for players, and has no effect on other object types.
  
  Example:  @allowance *player=500

& @mailsmax
  Attribute: Mailsmax
  Command: @mailsmax <object>[=<value>]
  
  This establishes the MAILSMAX (maximum save messages) a player can
  have at any one time.  This attribute is visible and settable only
  by SUPER-ROYALTY.  This attribute is only meaningful to players.
  
  Example:  @mailsmax *player=20

& @mailscur
  Attribute: mailscur
  Command: @mailscur <objct>[=<value>]
  
  This establishes the currently used SAVE flags a player currently has used
  within the mail system.  You shouldn't have to set this.  This is currently
  only settable and seeable by SUPER-ROYALTY.  This is only meaningful
  to players.
  
  Example:  (Shouldn't have to do this)  @mailscur *Player=5

& @mailtime
  Attribute: mailtime
  Command: @mailtime <objct>[=<value>]
  
  This establishes the time between when the mail arrived and when it will
  be marked for expiration on the target.  Expiring means when the player
  logs out next, all mail except unread, new, and saved, will be purged.
  Values must be 0 or greater.  This can be settable only by SUPER-ROYALTY.
  The value is in days.
  
  Example:  @mailtime *player=10

& @queuemax
  Attribute: queuemax
  Command: @queuemax <objct>[=<value>]
  
  This sets how many queue entries a player can have in the QUEUE.  Setting
  0 will make it so nothing by the player can be queued.  This is settable
  by ROYALTY and higher only.
  
  Example:  @queuemax *noqueueforyou=0
  
& @badsite
  Attribute: badsite
  Command: @badsite <player>=<list of sites>
  
  This command will set up what sites a given player can _NOT_ log in from.
  All sites must be separated by a space and be put into their numerical
  form.   this accepts wildcard matching.
  
  Example:  @badsite *tinyjerk=250.250.2.1 250.100.90.90 123.245.*

& +players
  Command: +players
  
  This command lists all players on the mush in the following format:
  
  Player-name   Last-time-on  Guild-name
  
  This is handy for checking when someone was last on and who to purge.

& @goodsite
  Attribute: goodsite
  Command: @goodsite <player>=<list of sites>
  
  This command will set up what sites a given player _CAN_ log in from.
  Any nonmatching sites will not allow the user to connect.  All sites
  must be put into their numerical form.  This accept wildcard matching.
  
  Example:  @goodsite #1=250.250.250.1 123.246.*

& @comment
  Attribute: Comment
  Command: @comment <object>[=<text>]
  
  Sets a wizard-visible comment on the indicated object.
  This attribute is only visible and settable by wizards.
  
  Example:  @comment *tinyjerk=Watch him, he's a twit.

& @timeout
  Attribute: Timeout
  Command: @timeout <object>[=<seconds>]
  
  Sets an idle timeout value on <object> that is different from the default
  value.  If the value is non-numeric or less than or equal to zero, then
  the default value is used.  The only exception is if the value you set is
  '-1' then that player will have UNLIMITED time on-line.  Keep in mind that
  the new value set will ONLY take place after that player's next connect.
  
  This attribute is only visible and settable by wizards.  It is only
  meaningful for players, and has no effect on other object types.
  
  Example:  @timeout *jason=1
  
  See Also: idle_timeout.

& MASTER ROOM
  The master room contains the default exits and $-commands for the RhostMUSH.
  The exits in the master room are checked if a command doesn't match an exit
  in the player's current room, and the $-commands on the room and its
  contents.
 
  Caution: Do not allow players into the master room, as they can leave
  objects that will be searched for $-commands.  Make sure that the room is
  not JUMP_OK or LINK_OK, and that any exits leading to the room are locked so
  that only wizards may use them.
 
  To make global commands, make an exit in the master room that is locked to
  #0 (or some other impossible lock) and has an appropriate Afail action (and
  possibly Fail and Ofail messages).  You can make global exits by having an
  unlocked exit from the master room (or an exit locked to a desired key
  object) lead to the desired destination.  When a player goes through one of
  these exits, any KEY objects are returned home, as is done with @teleport.
 
  Do not put too many objects in the room, because each object is searched
  for $-command every time anyone (or anything) anywhere on the RhostMUSH 
  enters an unrecognized command.
  
  Objects in the master room may have @aconnects/@adisconnects.
  The master room itself DOES NOT LISTEN for @aconnects/@adisconnects.
  
  See Also: @link, @lock, master_room, global_aconnect, global_adisconnect

& CONFIG PARAMETERS
  Topic: CONFIG PARAMETERS
   
  The following configuration parameters may be specified in the configuration
  file, or given to the @admin command.  Type 'wizhelp <param>' for help on a
  particular parameter.
  
  abort_on_bug             accent_extend            access                 
  admin_object             ahear_maxcount           ahear_maxtime          
  alias                    allow_ansinames          allow_whodark          
  alt_inventories          altover_inv              always_blind           
  ansi_default             ansi_textfiles           api_nodns
  api_port                 areg_file                areg_lim               
  aregh_file               atrperms                 atrperms_checkall
  atrperms_max             attr_access              attr_alias             
  attr_cmd_access          authenticate             bad_name               
  badsite_file             bcc_hidden               blacklist_max
  blind_snuffs_cons        brace_compatibility      break_compatability    
  cache_depth              cache_steal_dirty        cache_trim             
  cache_width              cap_articles             cap_conjunctions       
  cap_preposition          check_interval           check_offset           
  clone_copies_cost        cluster_cap              clusterfunc_cap        
  comcost                  command_dark             command_quota_increment
  command_quota_max        compress_program         compression            
  config_access            conn_timeout             connect_file           
  connect_methods          connect_perm             connect_reg_file       
  cpu_secure_lvl           cpuintervalchk           cputimechk             
  crash_database           create_max_cost          create_min_cost        
  dark_sleepers            default_home             delim_null             
  descs_are_local          dig_cost                 door_file              
  door_index               down_file                down_motd_message      
  dump_interval            dump_message             dump_offset            
  earn_limit               elements_compat          empower_fulltel        
  enable_tstamps           enforce_unfindable       enhanced_convtime      
  error_file 
  
{ 'wizhelp config parameters2' for more }
{ 'wizhelp config parameters reality' for more (reality levels) }
{ 'wizhelp config parameters mysql' for more (mysql params) }

& CONFIG PARAMETERS2
  Topic: CONFIG PARAMETERS (continued)
  
  error_index               examine_flags              examine_public_attrs
  examine_restrictive       exec_secure                execscriptpath
  exit_attr_default         exit_flags                 exit_parent           
  exit_quota                exit_separator             exit_toggles          
  exits_connect_rooms       expand_goto                fascist_teleport      
  file_object               find_money_chance          flag_alias            
  flag_name                 flag_access_see            flag_access_set          
  flag_access_type          flag_access_unset          float_precision       
  float_switches            forbid_host                forbid_site        
  forbidapi_host            forbidapi_site             fork_dump          
  format_compatbility       fork_vfork                 format_contents    
  format_exits              format_name                formats_are_local  
  full_file                 full_motd_message          function_access    
  function_alias            function_invocation_limit  function_max       
  function_recursion_limit  gdbm_cache_size            gdbm_database        
  global_aconnect           global_adisconnect         global_ansimask    
  global_attrdefault        global_clone_exit          global_clone_obj   
  global_clone_player       global_clone_room          global_clone_thing 
  global_error_cmd          global_error_obj           global_parent_exit 
  global_parent_obj         global_parent_player       global_parent_room 
  global_parent_thing       good_name                  goodmail_host      
  gconf_file                guest_char_num             guest_file         
  guest_namelist            guest_randomize            guild_attrname     
  guild_default             guild_hdr                  hackattr_nowiz     
  hackattr_see              hardconn_host              hardconn_site      
  hasattrp_compat           hastype_always_zero        heavy_cpu_max
  help_file                 help_index                 help_separator
  hide_nospoof              hook_cmd                   hook_obj
  hook_offline
  
{ 'wizhelp config parameters3' for more }

& CONFIG PARAMETERS3
  Topic: CONFIG PARAMETERS (continued)
  
  hostnames                icmd_obj                 idle_interval          
  idle_message             idle_stamp               idle_stamp_max
  idle_timeout             idle_wiz_dark            idle_wiz_cloak         
  ifelse_compat            ifelse_substitution      imm_nomod
  include                  includecnt               includenest
  initial_size             input_database           internal_compress_string
  inventory_name           iter_loop_max            kill_guarantee_cost    
  kill_max_cost            kill_min_cost            lastsite_paranoia      
  lattr_default_oldstyle   lcon_checks_dark         lfunction_max          
  list_access              list_max_chars           listen_parents         
  link_cost                lnum_compat              lock_recursion_limit   
  log                      log_command_list         log_maximum            
  log_network_errors       log_options              login_to_prog          
  logout_cmd_access        logout_cmd_alias         look_moreflags         
  look_obey_terse          machine_command_cost     mail_anonymous         
  mail_autodeltime         mail_default             mail_def_object        
  mail_hidden              mail_tolist              mail_verbosity         
  mailbox_size             maildelete               mailinclude_file       
  mailmutt                 mailprog                 mailsub                
  mailmax_send             master_room              match_own_commands     
  manlog_file              map_delim_space          max_cpu_cycles         
  max_dest_limit           max_folders              max_lastsite_api       
  max_lastsite_cnt         max_name_protect         max_pcreate_lim        
  max_pcreate_time         max_percentsubs          max_players
  
{ 'wizhelp config parameters4' for more }

& CONFIG PARAMETERS4
  Topic: CONFIG PARAMETERS (continued)
  
  max_sitecons             max_vattr_limit           maximum_size
  min_con_attempt          money_lim_off             money_lim_gm
  money_lim_arch           money_lim_counc           money_name_plural
  money_name_singular      motd_file                 motd_message
  mtimer                   mud_name                  muddb_name              
  must_unlquota            mux_child_compat          mux_lcon_compat 
  name_with_desc           nand_compat               newpass_god             
  news_file                news_index                newuser_file            
  no_startup               noauth_site               noautoreg_host          
  noautoreg_site           nobroadcast_host          noguest_host            
  noguest_site             nodns_site                nonindxtxt_maxlines     
  noregist_onwho           noshell_prog              nospam_connect          
  notify_recursion_limit   notonerr_return           null_is_idle            
  num_guests               oattr_enable_altname      oattr_uses_altname      
  objid_localtime          objid_offset              offline_reg             
  old_elist                online_reg                open_cost               
  output_database          output_limit              page_cost               
  pagelock_notify          paranoid_allocate         paranoid_exit_linking
  parent_follow            parentable_control_lock   partial_conn
  partial_deconn           passapi_host              passapi_site
  passproxy_host           passproxy_site            paycheck
  pcreate_paranoia         pemit_any_object          pemit_far_players
  penn_playercmds          penn_setq                 penn_switches
  permit_site              player_attr_default       player_dark
  player_flags             player_listen             player_match_commands
  player_match_own_command player_name_spaces        player_parent
  player_queue_limit       player_quota           
  
{ 'wizhelp config parameters5' for more }

& config parameters5
  Topic: CONFIG PARAMETERS (continued)

  player_starting_home      player_starting_room      player_toggles
  plushelp_file             plushelp_index            port                    
  proxy_checker             posesay_funct             postdump_message        
  power_access              protect_addenh            public_flags            
  queue_active_chunk        queue_compatible          queue_idle_chunk        
  quiet_look                quiet_whisper             quit_file               
  quotas                    read_remote_desc          read_remote_name        
  recycling                 register_create_file      register_host           
  register_site             regtry_limit              restrict_home           
  restrict_sidefx           retry_limit               robot_cost              
  robot_flags               robot_speech              robot_toggles           
  room_aconnect             room_adisconnect          room_attr_default       
  room_flags                room_parent               room_quota              
  room_toggles              roomlog_path              round_kludge            
  rwho_data_port            rwho_dump_interval        rwho_host               
  rwho_info_port            rwho_password             rwho_transmit           
  sacrifice_adjust          sacrifice_factor          safe_wipe               
  safer_passwords           safer_ufun                sconnect_cmd
  sconnect_host             sconnect_reip             search_cost             
  secure_atruselock         secure_dark               secure_functions        
  secure_jumpok             see_owned_dark            sha2rounds
  showother_altname         shs_reverse               sidefx_maxcalls         
  sidefx_returnval          sideeffects               signal_action           
  signal_crontab            signal_object             signal_object_type      
  space_compress            spam_limit                spam_msg                
  spam_objmsg               sqlite_db_path            sqlite_query_limit      
  stack_limit
  
{ 'wizhelp config parameters6' for more}

& config parameters6
  Topic: CONFIG PARAMETERS (continued)

  start_build               starting_money            starting_quota
  string_conn               string_conndark           string_connhide
  string_create             string_register           suspect_host            
  suspect_site              sweep_dark                switch_default_all      
  switch_search             switch_substitutions      terse_shows_contents    
  terse_shows_exits         terse_shows_move_messages thing_attr_default      
  thing_flags               thing_parent              thing_quota             
  thing_toggles             timeslice                 toggle_access_see       
  toggle_access_set         toggle_access_type        toggle_access_unset     
  totem_add                 totem_alias               totem_access_see
  totem_access_set          totem_access_type         totem_access_unset
  totem_letter              totem_name                totem_rename
  totem_types               tor_localhost             tor_paranoid            
  trace_output_limit        trace_topdown             tree_character          
  trust_site                uncompress_program        unowned_safe            
  user_attr_flags           validate_host             vattr_command           
  vattr_limit_checkwiz      vercustomstr              vlimit                  
  wait_cost                 wall_cost                 whereis_notify          
  wizmax_dest_limit         wizmax_vattr_limit        who_default             
  who_unfindable            who_showwiz               who_wizlevel            
  who_whowiztype            whohost_size              wiz_override            
  wiz_uselock               wizard_help_file          wizard_help_index       
  wizard_motd_file          wizard_motd_message       wizard_queue_limit      
  wizcommand_quota_max      zone_parents
  
{ 'wizhelp config parameters reality' for more (reality levels) }
{ 'wizhelp config parameters mysql' for more (mysql params) }

& CONFIG PARAMETERS REALITY
  Topic: CONFIG PARAMETERS (reality levels)

  reality_level             wiz_always_real           def_exit_rx
  def_exit_tx               def_room_rx               def_room_tx             
  def_player_rx             def_player_tx             def_thing_rx            
  def_thing_tx              reality_locks             reality_locktype
  reality_compare

{ 'wizhelp config parameters mysql' for more (mysql params) }

& CONFIG PARAMETERS MYSQL
  mysql_delay               mysql_host                mysql_user
  mysql_pass                mysql_base                mysql_socket
  mysql_port

{ 'wizhelp config parameters reality' for more (reality levels) }

& mysql_delay
  Config parameter: mysql_delay <value>.  Default: 0 (range 60-86400)
  
  Set the delay for when sql will be allowed to retry the connection
  to the database after a series of consecutive failures.  The default
  value of '0' will mean that it will hard-lock any re-attempt until
  a manual @sqlconnect is issued.
  
& mysql_host
  Config parameter: mysql_host <string>.  Default: localhost
  
  Specifies the host that houses the mysql database engine you wish
  to connect to.  DNS name or IP is fine.

& mysql_user
  Config parameter: mysql_user <string>.  Default: dbuser
  
  Specifies the user that you use to connect to the database.
  
& mysql_pass
  Config parameter: mysql_pass <string>.  Default: dbpass
  
  Specifies the password that you use to connect to the database
  with the user specified in mysql_user.  This is a NON ENCRYPTED 
  value so please keep that in mind.

& mysql_base
  Config parameter: mysql_base <string>.  Default: databasename
  
  Specifies the actual database name that you will be connecting
  to with the login defined by mysql_user and the password defined
  by mysql_pass and the host defined by mysql_host.

& mysql_socket
  Config parameter: mysql_socket <string>.  Default: /var/lib/mysql/mysql.sock
  
  Specifies the mysql_socket file which is usually only necessary for any
  localhost derived MySQL instances.  This value is ignored for any non-local
  sql connection that uses the TCP transport utility.

& mysql_port
  Config parameter: mysql_port <value>.  Default: 3306
  
  Specifies the port that the mysql database is running on.  Please be
  aware that port 3306 should work in most cases as that is the default
  port for MySQL.

& abort_on_bug
  Config parameter: abort_on_bug <yes/no>.  Default: no
  
  Indicates whether or not the server is to abort when it logs a bug.
  
  See Also: log.

& accent_extend
  Config parameter: accent_extend <boolean>    Default: 0
  
  Specifies if accents should allow the extensions of ASCII 251-255
  to be preformed and understood with accents as well as chr() encoding.
  This could have unforseen issues with some clients, and may have
  unexpected behavior for telnet negotiated clients.  Use at your own
  risk.

& access
  Config parameter: access <command> <permlist>
  
  Modifies the permissions needed to execute the indicated command.
  Specifying a permission adds it to the list of permissions required; to
  remove a permission prefix it with a ! character.
  
  Do to the fact 'home' is a special command, you need to use the
  @admin parameter 'restrict_home'.  Please check wizhelp for it.
  
  For a list of IGNORE permissions specific to this command, see
  wizhelp PERMISSIONS.
  
  See Also: PERMISSIONS, @list.

& admin_object
  Config parameter: admin_object <dbref>   Default: -1
  
  Note: For use of how to interactive with admin_object, see: 'wizhelp @admin'
  
  Specifies the object that all @admin config parmeters are loaded or unloaded
  to and from the shell.  It will read and write from/to the rhost_ingame.conf
  file.  This should be toward the bottom of your netrhost.conf file in the
  form 'include rhost_ingame.conf'.  If it is not, please add this toward the
  bottom of your netrhost.conf file right ABOVE the section that states it
  is for local aliases/parameters.  The _LINE attributes MUST be in numerical
  order and starts at '0'.  The admin object MUST be owned by an immortal.
  The syntax of the lines are what would be normally put into a config file.
  Some config parameters will not be able to be set with this method.  These
  are generally constrained to system level changes that could potentially
  cause harm so is locked to the shell.
   
  Note: The admin object as it is dbref #123 in this example will have to 
        have an netrhost.conf file entry of:
                               admin_object #123 
  @reboot the mush after netrhost.conf file changes.
   
  Example admin_object setup:
  > @create AdminObject      (note, must be done from an immortal player)  
    AdminObject created as object #123
  > &_LINE0 AdminObject=function_invocation_limit 100000
    Set.
  > &_LINE1 AdminObject=idle_timeout -1
    Set.
  > &_LINE2 AdminObject=notaconfig 123
    Set.
  > @admin/save
  @admin: skipping invalid config option 'notaconfig' in attribute '_LINE2'.
  @admin: completed writing 2 (of 3) lines into rhost_ingame.conf.
  > @admin/list
  @admin: listing config params in 'rhost_ingame.conf' [dbref #123]:
     0000 : function_invocation_limit 100000
     0001 : idle_timeout -1
  @admin: listing completed.
  > @admin/execute
  @admin: executed 2 lines from rhost_ingame.conf
  
  See Also: @admin

& ahear_maxcount
  Config parameter: ahear_maxcount <value>    Default: 30
  
  This defines the total number of times recursive listens/ahears
  can be triggered by the same 'target' in a given set of time
  defined by the config param AHEAR_MAXTIME. 
  
  See Also: ahear_maxtime

& ahear_maxtime
  Config parameter: ahear_maxtime <seconds>    Default: 0
  
  This defines the total time allowed that a recursive listen/ahear
  can occur a set base of recursions defined by the config parameter
  AHEAR_MAXCOUNT.  A value of '0' assumes disabled protection.
  
  See Also: ahear_maxcount

& alias
  Config parameter: alias <new alias> <command>
                    alias <old alias> <redefine>
                    alias <alias> !
                    alias <oldalias>
  
  Defines the command <new alias> to be an alias of the command <command>.
  You may also <redefine> an existing alias to a new command.  There
  is also the option to delete (with a !) the alias.  You may also, as
  a forth option, just specify the alias to see what the alias points to.
  
  See Also: function_alias

& allow_ansinames
  Config parameter: allow_ansinames <value>.  Default: 15
  
  Specifies weither objects may have ansi codes in their names.  It uses
  a binary mask on weither each data type may be enabled/disabled.  The
  following masks exist.
  
      PLAYER    - 1
      THING     - 2
      ROOM      - 4
      EXIT      - 8
  
  So to enable just ROOMs and PLAYERs to have the possibility to have ansi
  in their names, you would set the allow_ansinames value to '1+4' or '5'.

& allow_whodark
  Config parameter: allow_whodark <yes/no>.  Default: yes
  
  Specifies weither players who are DARK will be hidden from the WHO/DOING,
  @whereis, and @whereall commands.  This is only in effect is the admin
  parameters PLAYER_DARK and WHO_UNFINDABLE are *both* disabled.
  See Also: player_dark, who_unfindable

& alt_inventories
  Config parameter: alt_inventories <yes/no>.  Default: no
  
  Specifies if alternate inventories ('wielded' and 'worn') are to be enabled
  or not.  If enabled, any item that is @toggled WORN can be seen with the
  'worn' inventory command.  Any item that is @toggled WIELDED can be seen
  with the 'wielded' inventory command.  You have the option to make items
  toggled WORN or WIELDED to not appear in normal inventories with the
  @admin parameter 'altover_inv'.
  
  See Also: altover_inv, @invtype

& altover_inv
  Config parameter: altover_inv <yes/no>.  Default: no
  
  Specifies if the normal 'inventory' command should display items that
  have been @toggled WORN or WIELDED.
  
  See Also: alt_inventories, @invtype

& always_blind
  Config parameter: always_blind <yes/no>.  Default: no
  
  Specifies if the BLIND flag on rooms and exits is considered 'always in
  effect.'.  If this is enabled, then the BLIND flag on exits and rooms
  will do the REVERSE effect and make exit movement visible.  See the
  normal help on 'BLIND' for how the BLIND flag works.

& ansi_default
  Config parameter: ansi_default <boolean>    Default: 0
  
  Specifies if specific ansi-aware functions should be made ansi-aware by
  default or have their tagged key/type value handle ansi-aware, or if the
  reverse should happen.  The following functions will be affected:
    TR()      -- Key field reversed if DISABLED
    AFTER()   -- Key field reversed if DISABLED
    BEFORE()  -- Key field reversed if DISABLED
    MID()     -- Type field reversed if DISABLED
    DELETE()  -- Key field reversed if DISABLED
    LEFT()    -- Key field reversed if DISABLED
    RIGHT()   -- Key field reversed if DISABLED
  
& ansi_txtfiles
  Config parameter: ansi_textfiles <boolean>   Default: 0
  
  Specifies if all CACHED txt files (like connect.txt) can optionally 
  translate %c/%m/%x (however defined) ansi codes for ansi. 
  
  Please note that you must issue a @readcache after toggling this parameter
  in order to change the formatting appropiately.
  
  See Also: @list_file, @readcache

& areg_file
  Config parameter: areg_file <file>   Default:  autoreg.txt
  
  Specifies the file seen when AUTOREGISTRATION is enabled at the connect 
  screen and a player who is able to autoregister (but not create) connects
  to the mush.

& areg_lim
  Config parameter: areg_lim <value>    Default: 3
  
  This controls how many times a player may auto-register per email account.
  If someone tries to register to an email account that exceeds this, an
  error message is returned to them.  This is helpful to avoid mail-spam
  attacks from the mush.

& aregh_file
  Config parameter: aregh_file <file>   Default: areghost.txt
  
  Specifies the file seen when AUTOREGISTRATION is enabled at the connect
  screen and a player who is able to autoregister AND able to create
  connects to the mush.

& atrperms
  Config parameter: atrperms <field1> <field2> ... <fieldX>
  
  This parameter is used to set up attribute prefix masks.  The syntax for
  these masks are in the following form:
  
  For Setting/Modifying:
      ATTRIBUTENAME:SETPERMISSION:SEEPERMISSION
      ATTRIBUTENAME:SETPERMISSION:SEEPERMISSION:OWNER:TARGET
  
  For Deleting:
     !ATTRIBUTENAME
     !ATTRIBUTENAME:OWNER:TARGET
  
  In the above, the descriptions are as followed:
      ATTRIBUTENAME -- The name of the attribute prefix you wish to use.
                       A '!' before the attribute tells it to delete it.
      SETPERMISSION -- The bittype() that is allowed to SET the masked attr.
      SEEPERMISSION -- The bittype() that is allowed to SEE the masked attr.
      OWNER         -- Optional.  The owner that the prefix will affect.
      TARGET        -- Optional.  The specific dbref# the prefix will affect.
  
  Please note the permission is a bittype from 1 to 8.  It uses the same
  numerical values that the bittype() function uses.  These values are:
      Evaluation      8  (Special -- This is an evaluation bit only)
      God (#1)        7
      Super-Royalty   6
      Royalty         5
      Councilor       4
      Architect       3
      Guildmaster     2
      Citizen         1
   
  Owner can be anything, but defaults to '-1' to mean global.
  Target can be anything, but defaults to '-1' to mean global.
  
  For more about the bits see: @aflags bits 
  
  See Also: atrperms_max, @aflags, @aflags bits
  
{see atrperms2 for examples and explainations}
& atrperms2
  (CONTINUED)
  
  You may string multiple attribute permissions together in a single line.
  Examples:
    #1 > atrperms prefix1:3:4 bad:7:7 good:1:3 snoopy:2:2:#1234:#-1
    #2 > atrperms oog:3:5 bad:6:6 !prefix  
  
  Example #1 does the following:
     set the prefix 'prefix' with Architect settable, Councilor seeable.
     set the bad 'prefix' with God settable, God seeable.
     set the good 'prefix' with Citizen settable, architect seeable.
     set the snoopy 'prefix' with Guild sttable, seeable and owner #1234
  
  Example #2
     set the oog 'prefix' with Architect settable, Wizard seeable.
     re-set the bad 'prefix' with Immortal settable, Immortal seeable.
     delete the prefix 'prefix'. (this deletes first match)
  
  All attributes starting with the given prefix will auto-inherit all of
  the given permissions.  The exception are '_' attributes that are always
  at LEAST Wizard if configured that way.  The other exception is that
  Immortals can always see God owned attributes.  That is intentional since
  Immortal is mostly God anyway for permissions.
  
  Note #1: Attribute with the God bit are only settable by God.
  Note #2: _ permissions have precidence over these. 
  Note #3: When you delete an attribute, you do not need to specify bitmasks.
  Note #4: Specify owner and/or target if you want a specific duplicate prefix.
  
  See Also: atrperms_max, atrperms_checkall, @aflags

& atrperms_checkall
  Config parameter: atrperms_checkall <boolean>   Default: 0
  
  This will enable checking all @aflag restricted attribute prefixes for any
  attribute read or set.  This could potentially be costly depending on the
  number of attributes flags you use.
  
  This will use the lowest matching permission for the attribute.
  
  Without this enabled, it will take them in order of when they were set.
  This order can be seen with the @aflags command.
  
  See Also: atrperms_max, atrperms, @aflags
& atrperms_max
  Config Parameter: atrperms_max <value>    Default: 100
  
  Specify the total number of attribute prefixes you can define before it 
  will stop the creation of new prefixes.  
  
  The valid value for this is 0-10000.  
  
  See Also: atrperms, @aflags

& attr_access
  Config parameter: attr_access <attr> [!]<privilege> [[!]<privilege>]...
  
  Changes the access rights to the named attribute.
 
  The following privileges may be used:
  dark        - The attribute is only visible to #1.
  deleted     - The attribute is ignored when writing out to the database
                Use with caution!
  private     - The attribute is visible only to those who can examine the
                object.
  internal    - The attribute is not visible to anyone.
  god         - Only #1 (god) may change the attribute.
  immortal    - Only immortals may change the attribute.
  royalty     - Only royalty and up may change the attribute.
  councilor   - Only councilors and up may change the attribute.
  architect   - Only architects and up may change the attribute.
  guildmaster - Enables guildmasters to change the attribute
                on anyone that is not architect and above.
  
{ see 'wizhelp attr_access2' for more }

& attr_access2
  no_command  - The attribute is not checked for commands.
  ignore      - The attribute is not decompiled.
  hidden      - The attribute is visible only to wizards.
  pinvisible  - The attribute is examinable by royalty+ only.
  default     - The attribute 'inherits' attribute formatting.
 *no_inherit  - The attribute is not inheritable by children.
 *visual      - The attribute is visual by everyone.
 *no_ansi     - The attribute does not hold ansi.
 *no_clone    - The attribute will not be @cloned.
   
  If you use a command similar to:
     @admin attr_access=<attr>
  with no args you will be shown the current privilages for that attribute.
  
  Permissions with a '*' require @attribute/access
  
  For user-defined attributes, please use the @attribute/access command.
  This will also be 'permanent' and won't have to be re-issued.

  For built-in attributes (like @desc) please use the @admin parameter
  attr_access.  If you do this via @admin, they must be reissued on
  every startup.  It is suggested you put this in the netrhost.conf
  file instead:  (such as:  attr_access desc default)
  
  See Also: @attribute
 
& attr_alias
  Config parameter: attr_alias <new alias> <attr>
                    attr_alias <old alias> <attr>
                    attr_alias <alias> !
  
  The first option makes <new alias> an alias for the attribute <attr>.  The
  second form will re-alias the alias to the new <attr>.  The final form will
  remove the alias.

& attr_cmd_access
  Config parameter: attr_cmd_access [!]<privilege> [[!]<privilege>]...
  
  Changes the access rights on all attribute-setting commands in parallel.
  Use this parameter to allow or deny access to the attribute-setting commands
  as a group.  This directive should normally be followed by access directives
  to properly set access to restricted attributes.
  See Also: access, PERMISSIONS.

& authenticate
  Config parameter: authenticate <ON(1)/OFF(0)>   Default: ON
  
  Enables or disables the mush's requirement to grab authentication of idents
  on player's connecting.  The default for this value is ON

& bad_name
  Config parameter: bad_name <wildcarded-name>.
  
  Specifies that any name that matches <wildcarded-name> may not be used as a
  player name.  Attempts to create a player with a disallowed name (or to
  rename to a disallowed name) will be rejected.  Normally, words that
  lead off messages from RhostMUSH are disallowed, some sites may wish to 
  disallow some obscene names as well.

& badsite_file
  Config parameter: badsite_file <path>.  Default: badsite.txt
  
  Specifies the name of the file that is sent to new net connections from
  sites that have been blocked from accessing the server.  The connection
  is closed immediately after the file is sent.
  See Also: forbid_site, permit_site, noguest_site.

& bcc_hidden
  Config parameter: bcc_hidden <ON(1)/OFF(0)>   Default: ON
  
  Specifies if +bcc for brandy_mail interface 'mail writing' will have anyone
  in the +bcc list not be able to see the 'To:' list in mail being sent.
  If this is disabled, then the reverse is in effect, where the only ones
  who can see the 'To:' list are those who are in the +bcc list.

& blacklist_max
  Config parameter: blacklist_max <value>    Default: 100000
  
  Defines the maximum value of Blacklisted hosts and blacklisted NoDNS entries
  that are allowed.  The value can be between 1000 and 5000000.  Keep in mind
  that the larger the value the slightly more overhead on player connects as
  this is a list that must be walked to compare against the connecting player.
  
  See Also: @blacklist

& blind_snuffs_cons
  Config parameter: blind_snuffs_cons <ON(1)/OFF(0)>  Default: OFF
  
  Specifies if the BLIND flag will snuff (surpress) the connected/disconnected
  messages when players connect/disconnect.  This applies if the room is
  set BLIND as well.  As always, (Blind) messages will show for wizards
  regardless.

& brace_compatibility
  Config parameter: brace_compatibility <yes/no>.  Default: NO
  
  This config parameter enables compatibility with other codebases when it
  comes to lit() and handling of curly braces. With this parameter enabled,
  the curly braces get shown when inside a lit(), without need for escaping
  them.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible
  
& break_compatibility
  Config parameter: break_compatibility <yes/no>.  Default: NO
  
  This config parameter enables backward compatability to the erraneous
  double-evaluation standard that @break and @assert had for the
  first argument.  This backward compatibility would only be relevant
  for all versions of Rhost 3.9 from its conception to the SVN 165 release.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& cache_depth
  Config parameter: cache_depth <depth>.  Default: 10.
 
  Specifies the depth of the database cache.  Each bucket in the cache is
  allowed to have this many entries before it will try to remove old entries.
  See Also: cache_width.

& cache_names
  Config parameter: cache_names <yes/no>.  Default: yes
  
  This defines if the cache uses object name caching.  This should not be
  changed.

& cache_trim
  Config parameter: cache_trim <yes/no>.  Default: NO
 
  Specifies whether or not the attribute cache is to be periodically trimmed
  back to its starting size.

& cache_width
  Config parameter: cache_width <depth>.  Default: ??
 
  Specifies the number of buckets in the database cache.  A hashing function
  is used to assign objects or attributes to a particular bucket, where a 
  linear search is performed.

& cap_articles
  Config parameter: cap_articles <string>.  Default: NULL
  
  Specifies the articles that should be ignored with the caplist() function
  with regarding the (T)itle option.
  
  See Also: cap_conjunctions, cap_preposition

& cap_conjunctions
  Config parameter: cap_conjunctions <string>.  Default: NULL
  
  Specifies the conjunctions that should be ignored with the caplist()
  function with regarding the (T)itle option.
  
  See Also: cap_articles, cap_preposition

& cap_preposition
  Config parameter: cap_preposition <string>.  Default: NULL
  
  Specifies the prepositions that should be ignored with the caplist()
  function with regarding the (T)itle option.
  
  See Also: cap_articles, cap_conjunctions

& check_interval
  Config parameter: check_interval <secs>.  Default: 600.
  
  Specifies how often (in seconds) the database is to be automatically
  scanned for inconsistencies and purged of references to destroyed objects.
  Any inconsistencies found are either fixed or recorded in the log file.
  
  See Also: check_offset, @dbck.

& check_offset
  Config parameter: check_offset <secs>.  Default: 300.
  
  Specifies how long after startup the first automatic database check is
  to be performed.  Subsequent checks are performed every check_interval
  seconds.
  
  See Also: check_interval, @dbck.

& cache_steal_dirty
  Config parameter: cache_steal_dirty <yes/no>.  Default: NO
  
  Specifies whether or not the cache manager may take a modified attribute
  and write it out when trying to insert a new attribute into the cache.

& clone_copies_cost
  Config parameter: clone_copies_cost <yes/no>.  Default: NO
  
  Indicates whether or not @cloned objects inherit the cost of the original.
  If disabled, @cloned objects cost the same as a @create that doesn't specify
  the object cost.  The new owner is charged the correct amount in either
  case.
  
  See Also: @clone.

& cluster_cap
  Config parameter: cluster_cap <value>.  Default: 10
  
  Specifies the delay in seconds when a cluster action (command) can be 
  triggered.  This is a GLOBAL setting and effects ALL clusters.  Cluster 
  actions are not target specific, but mush-wide.  This is to avoid 
  possible denial of service attacks.  Change at your own risk.
  
  See Also: clusterfunc_cap

& clusterfunc_cap
  Config parameter: clusterfunc_cap <value>.  Default: 1
  
  Specifies the delay in seconds when a cluster function action (function)
  can be triggered.  This is a GLOBAL setting and effects ALL clusters.
  Cluster function actions are not target specific, but mush wide.  This
  is to avoid possible denial of service attacks.  Change at your own
  risk, however unlike cluster_cap, this will be executed per command
  so the risk is greatly reduced.
  
  See Also: cluster_cap

& command_dark
  Config parameter: command_dark <value>.  Default: OFF(0)
  
  Specifies if objects with $-commands can be dark or not.  This only takes
  presedence if the @admin parameter PLAYER_DARK is set to OFF.  Otherwise,
  this config parameter is meaningless.  Setting this value to TRUE enables
  objects with $commands to be dark but if they can listen, DARK will not
  effect them.  Again, this is only meaningful if the PLAYER_DARK parameter
  is DISABLED.
  
  See Also: player_dark

& command_quota_increment
  Config parameter: command_quota_increment <amount>. Default: 1
  
  Specifies the number of commands by which the command quota for connected
  users each timeslice.  Each command a user types in (commands executed by
  machines do not count) decreases the quota by 1, and the user's commands are
  only executed if the quota is greater than zero.
  
  See Also: command_quota_max, wizcommand_quota_max, timeslice,
            @cmdquota

& command_quota_max
  Config parameter: command_quota_max <amount>. Default: 100
  
  Specifies the maximum value for the command quota for connected users.
  A user's command quota is only increased if it is below this value.
  Each command a user types in (commands executed by machines do not count)
  decreases the quota by 1, and the user's commands are only executed if the
  quota is greater than zero.
  
  See Also: command_quota_increment, wizcommand_quota_max, timeslice,
            @cmdquota

& compress_program
  Config parameter: compress_program <path>.  Default: /usr/ucb/compress
  
  Specifies the program to be run to compress the database file when it is
  written.  If database file compression is enabled, database dumps are piped
  through this program on their way out to disk.
  See Also: compresion, uncompress_program.

& compression
  Config parameter: compress <yes/no>.  Default: no
  
  Indicates whether or not the database is to be compressed using the
  compress_program when it is written, and whether or not to check for a
  compressed database to uncompress at startup.  
  See Also: compress_program, uncompress_program.

& config_access
  Config parameter: config_access <param> [!]<privilege> [[!]<privilege>]...
  
  Changes the privileges needed to change the specified configuration
  parameter.  The value 'disabled' indicates that the parameter may only
  be specified in the configuration file at startup.  Setting privileges
  to anything other than disabled or god is meaningless unless the 
  restriction on the @admin command is weakened.
  
  See Also: @admin, @list config_permissions, PERMISSIONS.

& conn_timeout
  Config parameter: conn_timeout <num>.  Default: 120
  
  Specifies how many seconds a new network connection may remain open before
  connecting to a character before being automatically disconnected.

& connect_file
  Config parameter: connect_file <path>.  Default: connect.txt
  
  Specifies the name of the file that a user sees immediately after connecting
  to the RhostMUSH if registration is not enabled.  This file normally 
  contains help on how to connect to or create a character, as well as the 
  WHO and QUIT commands.
  See Also: connect_reg_file

& connect_methods
  Config parameter: connect_methods <mask>.  Default: 0
  
  This specifies a bitwise mask to optionally disable the hardcoded connect
  commands.  The following bitwise masks must be added to disable them
  accordingly.
  
    1 -- Disable co (connect), cd (connect dark), ch (connect hidden)
    2 -- Disable cr (create)
    4 -- Disable reg (register)
  
  Add them to disable the types. '7' would disable all of them.
  
  Note of warning:  If you disable all connection attempts and have
  no other method of connecting enabled (such as the account management),
  then you nor anyone else will be able to log into the mush.  Use with
  caution!!!
  
  You may specify site ranges that are allowed to connect through this
  disabling with hardconn_site or hardconn_host.
  
  See Also: ACCOUNT MANAGEMENT, hardconn_site, hardconn_host, connect_perm

& connect_perm
  Config parameter: connect_perm <value>.   Default: 0
  
  Specifies the permission level of the player allowed to be connected
  to with the connect screen 'connect' command.  This is intended for
  use with the account handler subsystem.
  
  The following values are valid:
    0   - (default) anyone can connect
    1   - those set wanderer and guest can not connect
    2   - Guildmaster and higher allowed
    3   - Architect and higher allowed
    4   - Councilor and higher allowed
    5   - Wizard and higher allowed
    6   - Immorrtal and higher allowed
    7   - god(#1) allowed only
    >8  - No one allowed
  
  The additive is used to allow guests, but still applies to the above.
    100 - Allow guests (override) for above permissions.
  
  101 will only stop anyone with wanderer from connecting.
  105 will allow guests and wizard and higher to connect. 
  
  See Also: logout_cmd_access, account_login(), account_owner()
  
& connect_reg_file
  Config parameter: connect_reg_file <path>.  Default: connect_reg.txt
  
  Specifies the name of the file that a user sees immediately after connecting
  to the RhostMUSH if registration is enabled.  This file normally contains
  help on how to get a character (usually by sending e-mail to one of the
  wizards), how to connect to an existing character, as well as the WHO and
  QUIT commands.
  See Also: connect_file

& cpu_secure_lvl
  Config parameter: cpu_secure_lvl <value>.  Default: 0 (normal security)
  
  This specifies the level of security you wish to use if the max cpu cycles
  (defined by max_cpu_cycles) has been reached with CPU abuses.  The following
  security levels exist:
      0 - take no specific action.  Just keep stopping the CPU abuse as it 
          happens.  This uses the cpuintervalchk and cputimechk params.
      1 - Do what #0 shows, but also issue a @halt/all to the owner of the
          offending item and set the offending item HALT.
      2 - Do what #1 shows, but also set the offending owner/target FUBAR.
      3 - Do what #2 shows, but also set the offending owner/target NOCONNECT
          and drop his connection.
      4 - Do what #3 shows, and set site register only.
      5 - Do what #3 shows, and set site forbid.
  
  Use #3 only if you seem to be having a lot of problems.  #1 is generally
  good enough.  #5 if you really want to smash them like a bug.
  
  See Also: max_cpu_cycle, cpuintervalchk, cputimechk, cpu

& cpuintervalchk
  Config parameter: cpuintervalchk <value>.  Default: 80 (percent)
  
  Specifies the cpu load that should be set as the ceiling that a mush
  'process' can take up.  If it exceeds the cpu and exceeds the cputimechk
  value, the job is auto-aborted and the cpu returned to normal.  Valid range 
  is 10-100%.  It's generally wise to not exceed 90, nor is it wise to go much
  below 20.  For high-end machines, a range of 30-50 should be sufficient.
  
  See Also:  cputimechk, cpu_secure_lvl, max_cpu_cycle, cpu

& cputimechk
  Config parameter: cputimechk <value>.  Default: 60 (seconds)
  
  Specifies the time (in seconds) that a job can be at the CPU level
  specified by cpuintervalchk before the mush 'job' is aborted.  The valid
  range is between 10 and 3600 seconds (10 seconds to 1 hour).  It is generally
  wise not to go too high on this value unless you plan to run high-load
  functionality (like cleaning out mailboxes via brandy mailer *iew*)
  It is also good to not go too low on this value if you have a relatively
  slow cpu as most jobs won't work.  60 should work for slower end
  machines while 30 or less on higher end machines.
  
  See Also: cpuintervalchk, cpu_secure_lvl, max_cpu_cycle, cpu
  
& crash_database
  Config parameter: crash_database <path>.  Default: none
  
  Specifies the name of the database file that should be written when mush
  detects an internal error and is about to crash.  Note that the database
  may contain corrupted links of the error occurs in the middle of moving
  links about.
  Dumping a crash database is currently not implemented.

& create_max_cost
  Config parameter: create_max_cost <amount>.  Default: 505
  
  Specifies the maximum amount of money that is used in calculating the value
  of a created object.  Specifying more than this amount of money in a @create
  command will cause the excess to be wasted.
  See Also: create_min_cost, sacrifice_adjust, sacrifice_factor.

& create_min_cost
  Config parameter: create_min_cost <amount>.  Default: 10
  
  Specifies the minimum (and default) cost for creating an object.
  See Also: create_max_cost, sacrifice_adjust, sacrifice_factor.

& dark_sleepers
  Config parameter: dark_sleepers <yes/no>.  Default: yes
  
  Indicates whether or not disconnected players are to be considered 'dark',
  so that they do not show up when a player looks in the room that they are
  in.  Disconnected players can still be found by examining the room or by
  using [next()] to follow the contents chain for the room.

& default_home
  Config parameter: default_home <location>.  Default (player_starting_home)
  
  Sets the home location for objects which have an invalid home (whether
  because the home location was deleted, or is owned by another player and
  is not set ABODE) and the home of their owner is also invalid.  If this
  parameter is not set, the value of player_starting_home is used instead.
  See Also: player_starting_home.

& delim_null
  Config parameter: delim_null <yes/no>.   Default: no
  
  Specifies if '@@' is to be identified as a special output separator in
  nearly every function to work as a null output delimiter.  This is to
  help with MUX compatibility.
  
& descs_are_local
  Config parameter: descs_are_local <yes/no>.  Default: no
  
  This specifies if descriptions and anything passed through the did_it()
  processor are localized through the duration of the did_it() processing
  with regards to setq registers. By default, this is disabled as it
  could allow some flexability, but as it's a security risk, the option
  exists to disable this.   You may use pushregs() to muddle with the
  registers at your leasure.

& dig_cost
  Config parameter: dig_cost <amount>.  Default: 10
  
  Specifies how much the @dig command costs.

& door_file
  Config parameter: door_file <file>.  Default: door.txt
  
  Specifies the name of the file that is used when players use the @door
  socket interface command.  Anything that exists in door.txt is what will
  be allowed to connect to.  You must have a door.indx file created off
  this file for it to work.

& door_index
  Config parameter: door_index <file>.  Default: door.indx
  
  Specifies the index file that is used to cross-reference the door_file
  text file.

& down_file
  Config parameter: down_file <pathname>.  Default: down.txt
  
  Specifies the name of the file that is displayed when players attempt to
  connect to a non-wizard character when logins are disabled.
  See Also: @disable, down_motd_message.

& down_motd_message
  Config parameter: down_motd_message <message>.  Default: blank
  
  Sets the message that is displayed when a player attempts to connect to a
  non-wizard character when logins are disabled.  This message is displayed
  in addition to the contents of the down.txt file.
  See Also: @disable, down_motd_file.

& dump_interval
  Config parameter: dump_interval <amount>.  Default: 3600
  
  Specifies the time in seconds between automatic database dumps.
  See Also: dump_offset, output_database.

& dump_message
  Config parameter: dump_message <message>.  Default: blank
  
  Sets the message that is sent to everyone before the database is being
  dumped to disk, whether automatically or via the @dump command.
  See Also: @dump, postdump_message.

& dump_offset
  Config parameter: dump_offset <amount>.  Default: 0
  
  Specifies the time in seconds between startup and the first database dump.
  If zero, the value of the dump_interval parameter is used.
  See Also: dump_interval.

& earn_limit
  Config parameter: earn_limit <amount>.  Default: 10000
  
  Specifies the threshold at which earning additional money becomes difficult.
  Specifically, players with more than this much money no longer receive a
  paycheck for each day they connect, only receive one penny for sacrificing
  objects at temples, don't receive insurance payments for being killed, and
  don't find money lying in the streets.
  See Also: find_money_chance, paycheck.

& elements_compat
  Config parameter: elements_compat <yes/no>.  Default: no
  
  This will make elements() work like the built in elementsmux().  This is
  useful on new systems where you want elements() to behave like elementsmux()
  but be aware this will remove the Rhost compatible elements() code.
  
  Consider this option with caution.
  
& empower_fulltel
  Config parameter: empower_fulltel <yes/no>.  Default: no
  
  Indicates if the FULLTEL @power effects on the targeted player (default)
  or if it effects all object types.  If this parameter is enabled, the
  target which is @powered FULLTEL will then be able to teleport anything
  anywhere as long as it's a valid target, and as well as the target or
  destination is not #1, or cloaked.

& enable_tstamps
  Config parameter: enable_tstamps <yes/no>.  Default: no
  
  Indicates whether or not to enable the automatic timestamping of items
  when they are created or modified.

& enhanced_convtime
  Config parameter: enhanced_convtime <yes/no>.  Default: no
  
  Indicates if convtime() will allow enhanced formats to be processed
  with the convtime function.  Due to a slightly higher overhead this
  is disabled by default.

& enforce_unfindable
  Config parameter: enforce_unfindable <yes/no>.  Default: no
  
  Indicates whether or not to enforce hidden/dark so that unfindable
  will be properly hidden in locations with regards to objeval() or
  other similiar function calls.

& error_file
  Config parameter: error_file <file>.  Default: error.txt
  
  Indicates the file that will be read for the error (huh? messages) that
  are randomly generated.  Any element that starts with a '!' will be
  evaluated.  Error file code can not be traced.

& error_index
  Config parameter: error_index <file>.  Default: error.indx
  
  Indicates the file that will be used as the index key for the error_file.

& examine_flags
  Config parameter: examine_flags <yes/no>.  Default: yes
  
  Indicates whether or not the examine command should include an expanded
  flags list in the description of the object.
  See Also: examine.

& examine_public_attrs
  Config parameter: examine_public_attrs <yes/no>.  Default: yes
  
  Indicate whether or not the examine command should display the public
  attributes of the object by default when used by a player who does not
  control the object.  Regardless of the setting of this parameter, the
  short form is available with examine/brief and the long form with
  examine/long.
  See Also: examine.

& examine_restrictive
  Config parameter: examine_restrictive <value>.  Default: 0
  
  Specifies the 'bitlevel' that is restrictive from examining anything 
  they can't control.  If they fail, it returns that they can not examine
  the target and returns no information about the target.  This will also
  affect @decompile.
  
  The following levels exist to be settable:
          0  - default: no additional restrictions set.
          1  - mortal: guests/wanderers held to restrictions.
          2  - guildmaster: under guildmaster held to restrictions.
          3  - architect: under architect held to restrictions.
          4  - councilor: under councilor held to restrictions.
          5  - wizard: under wizard/royalty held to restrictions.
          6  - immortal: under immortal held to restrictions.
  
  There is nothing to block immortals as immortals are considered #1.
  The current setting is visible through @list options.

& exec_secure
  Config parameter: exec_secure <boolean>.  Default: 1
  
  Tells execscript() to escape all characters that are passed into it.  This
  is the default behavior.  If you specify '0' then it will only escape out
  non-alphanumeric characters.  Ergo, it will only then escape out characters
  that are not A-Z, a-z, or 0-9.
  
  See Also: execscript()

& execscriptpath
  Config parameter: execscriptpath <strings>.  Default: (empty)
  
  This parameter will specify a space separated list of alphanumerical 
  directories that you wish to have as subdirectories under the 'scripts'
  directory.  This only allows one level of subdirectories, only allows
  alpha-numerical characters and will not allow any other character 
  including wildcards.
  
  See Also: execscript()
  
& exit_attr_default
  Config parameter: exit_attr_default <dbref>.  Default: -1
  
  Specifies the default dbref that internal attributes that are processed
  through the standard 'handler' are evaluated.  The original desc of the
  target is passed as '%0' into this description.  This effects built-ins
  such as @succ, @osucc, @desc, @odesc, etc.  This is for exits only.
  
  You need to set the attribute (that will be passed as %0) DEFAULT to
  use attribute defaults on this object.
  
  See Also: room_attr_default, thing_attr_default, player_attr_default

& exit_flags
  Config parameter: exit_flags <flags>.  Default: blank
  
  Modifies the set of flags that an exit receives when it is created via the
  @open command or via the optional exit creation parameters of the @dig or
  @link commands.  Flags prefixed by a ! remove the indicated flag from the
  set.
  
  Note that flag names are case sensitive and in lower case.
  
  See Also: @list, exit_toggles, player_flags, robot_flags, room_flags, 
            thing_flags.

& exit_separator
  Config parameter: exit_separator <string>.   Default: %b%b
  
  Specifies the string that will separate exits by default when you look
  at a location.  It defaults to two spaces.  You may have up to 31
  characters separating exit names.
  
  See Also: format_exits
  
& exit_toggles
  Config parameter: exit_toggles <toggles>.  Default: blank
  
  Modifies the set of toggles that an exit receives when it is created via the
  @open command or via the optional exit creation parameters of the @dig or
  @link commands.  Toggles prefixed by a ! remove the indicated flag from the
  set.
  
  Note that toggle names are case sensitive and in lower case.
  
  See Also: @list, exit_flags, player_toggles, robot_toggles, room_toggles, 
            thing_toggles.

& exit_parent
  Config parameter: exit_parent <dbref>.  Default: #-1
  
  Specifies what the default global parent should be.  If a valid global
  exit_parent is defined, whenever new exits are @opened, they will 
  automatically be parented to the specified dbref#.  Permissions will not
  be checked.
  
  See Also: room_parent, thing_parent, player_parent, global_parent_obj,
            global_parent_exit

& exit_quota
  Config parameter: exit_quota <amount>.  Default: 1
  
  Sets how much quota it costs to create an exit (and also how much the
  remaining quota is increased when an exit is @destroyed.
  See Also: @quota, player_quota, room_quota, thing_quota, QUOTAS.

& exits_connect_rooms
  Config parameter: exits_connect_rooms <yes/no>.  Default: no
  
  Defines if exits linking one room to another will be the only requirement
  for the room to be non-floating.  This is handy if you do not always
  want to have everything linked to the starting room (indirectly).

& expand_goto
  Config parameter: expand_goto <yes/no>.  Default: no
  
  Specifies that all movement through exits should follow a 'goto' command
  for permissions and restrictions.

& fascist_teleport
  Config parameter: fascist_teleport <yes/no>.  Default: no
  
  If this parameter is set to yes, then players (and objects) may not
  teleport out of locations that they do not control or which are not set
  JUMP_OK.  If the teleporting player is inside an object, the room that
  ultimately contains the object is checked.  Going home is unaffected.

& file_object
  Config parameter: file_object <dbref>.  Default: -1
  
  Specifies the dbref# (without the leading #) of the object that will 
  evaluate the code (based on file_object's permissions/flags/etc), that
  will be displayed instead of the default txt files.  The following
  txt files are allowed to be overwritten by using the specified 
  attribute name on the file_object object.
  
    ATTRIBUTE     FILENAME        FUNCTION
    ------------- --------------- -------------------------------------------
    connect       connect.txt     What a user sees when initially connecting
    badsite       badsite.txt     What a user sees from a sitebanned site
    down          down.txt        What a user sees with logins disabled
    full          full.txt        What a user sees when the mush is full
    guest         guest.txt       What a guest sees upon connecting
    register      register.txt    What a user sees when site is register
    newuser       newuser.txt     What a new user sees upon first connecting
    regfail       create_reg.txt  What a user sees when register locked
    motd          motd.txt        What a user sees for the motd message
    wizmotd       wizmotd.txt     What a wizard sees for the motd message
    quit          quit.txt        What a user sees when they quit
    guestfail     noguest.txt     What a user sees when guest not allowed
    autoreg       autoreg.txt     What a user sees when autoreg is enabled
    autoreghost   areghost.txt    What a user sees when host is autoreg
  
  The following special attributes are used to handle the MAX values to site
  that you pass.  For example, if you specify that '3' max connections are
  allowed guests from the site, the following is an override that is provided
  to the player who reaches that maximum.   This is only relevant when you 
  use the 'max' option to any site restrictions.
   
    ATTRIBUTE       PERMISSION      FUNCTION
    -------------   --------------- ------------------------------------------
    site_noguest    NO_GUEST        Shown to player who hits max guests
    site_register   REGISTER        Shown to player who hits max registers
    site_forbid     FORBID          Shown to player who hits max forbids
    site_Forbidapi  FORBIDAPI       Shown to max connections for API
    site_noconnect  NOCONNECT       Shown to player set NO_CONNECT
    site_nopossess  NOPOSSESS       Shown to player set NO_POSSESS
  
  An empty evaluated attribute or a missing attribute will call the default
  txt file instead of the evaluation.  The following arguments are passed
  into the evaluation:
    %0 -- The numerical site host of the incomming connection.
    %1 -- The dns host entry (if availabe, else ip) of incoming connection.
    %2 -- The port that they're connected to on the mush
    %3 -- The player dbref#, if connected, otherwise shows '#-1'.
  
  All ansi and such will process normally.
  
  See Also: @list_file, file_object2, customized connect, NOCONNECT,
            NOPOSSESS

  
{ See 'wizhelp file_object2' or 'wizhelp customized connect' for connect mods }

& CUSTOMIZED CONNECT
& file_object2
  Config parameter: file_object <dbref>.  Default: -1    (CONTINUED)
  Topic: CUSTOMIZED CONNECT
  
  An additional feature of the file_object config parameter is the ability
  to design customized commands that a player can issue on the connect screen.
  They can be any command at all, and executes code at the permission level
  of the file_object AS the file_object itself.  So some thought needs to go
  with security with regards to this.
  
  Built-in logout_cmd_access commands (WHO, INFO, DOING, etc) may be accessed
  this way if you set the access of the command DARK.
    
  Note:  A player can not exceed 2000 character input in anyway at the connect
         screen or the mush will aggressively tag the player as someone who is 
         attempting to crash the mush, boot them off the server, and log their 
         attempt.  This was a common method to crash a mush years ago.
     
  The key variables that are used for this are:
    FAKECOMMANDS    -- This is the '|' delimited list of commands that the
                       user on the connect screen can use.  This is evaluated
                       as the file_object itself.  Sorry, commands can not
                       contain white spaces (spaces, tabs, etc).
    RUN_<command>   -- This is the command that the user at the connect
                       screen will be typing.  If you want the command 'bob'
                       to exist for the connect screen, then RUN_BOB will
                       be the attribute name.
  
  The following variables are recognized:
    %#/%!/%@/%n/%k  -- All will refer to the file_object.
    %0              -- The command typed at the connect screen.
    %1              -- The arguments to the command the player typed.
    %2              -- The player's numerical IP address.
    %3              -- The player's reverse DNS of their IP address.
    %4              -- The player's port that they are connecting on.
  
  If the command is not listed in FAKECOMMANDS, or if there is no associated
  RUN_<command> attribute, then it reacts as if it was an invalid command
  at the connect screen and goes to the default behavior.
   
  To design what commands are to be customized, you create a '|' delimited
  list on the file_object.  
  
  See Also: logout_cmd_access, account_login(), account_owner(), connect_perm
  
{ see 'wizhelp file_object3' or 'wizhelp customized connect2' for examples}
  
& CUSTOMIZED CONNECT2
& file_object3
  Config parameter: file_object <dbref>.  Default: -1    (CONTINUED)
  Topic: CUSTOMIZED CONNECT
  
  For the purpose of examples, we'll assume the file_object is #123.
  
  Example Setup:
    > think %# - [get(%#/test)]
    #111 - woop
    > @admin file_object=123     (notice no '#' for the definition)
    Set.
    > &FAKECOMMANDS #123=bob|job|[get(#111/test)]
    Set.
    > &RUN_WOOP #123=You typed: %0 and are on from %3
    Set.
    > &RUN_BOB #123=You typed: %0 with args %1
    Set.
    > &RUN_JOB #123=Current jobs: %r[u(jobobject/jobs)]
    Set.
  
  As shown, you have an amazing flexibility to customize your connect screen
  with any command you want.  You can not, however, interact with connect
  screen existing commands like 'connect' and so forth.  A small limitation
  to an otherwise flexible tool.
  
  See Also: @admin, file_object, CUSTOMIZED CONNECT, logout_cmd_access

& find_money_chance
  Config parameter: find_money_chance <amount>.  Default: 0
  
  Indicates the chance that players have of finding money when entering a
  new room.  The chance is 1 / find_money_chance, except that finding money
  is disabled if this parameter is set to zero.
  See Also: earn_limit, paycheck.

& flag_alias
  Config parameter: flag_alias <new alias> <flagname>
                    flag_alias <old alias> <flagname>
                    flag_alias <alias> !

  The first form defines <new alias> as a synonym for the flag <flagname>.  
  The second form will allow you to redefine the flag alias to the new flag 
  name.  The final form will remove the alias from the flag alias table.

& flag_name
  Config parameter: flag_name <newflagname> <oldflagname>
  
  Redefines what the given FLAG is called.  This config parameter is only
  useable with the mushname.conf file.  Use @flag to change them online.

& flag_access_set
  Config parameter: flag_access_set <flagname> <permission(s)>
  
  Sets an override for set permissions for the specified flag.  This is
  similiar to issuing @flagdef/set on the specified flag.
  
  See Also: flag_access_unset, flag_access_type, flag_access_see, @flagdef

& flag_access_unset
  Config parameter: flag_access_unset <flagname> <permission(s)>
  
  Sets an override for unset permissions for the specified flag.  This is
  similiar to issuing @flagdef/unset on the specified flag.
  
  See Also: flag_access_set, flag_access_type, flag_access_see, @flagdef

& flag_access_see
  Config parameter: flag_access_set <flagname> <permission(s)>
  
  Sets an override for see permissions for the specified flag.  This is
  similiar to issuing @flagdef/see on the specified flag.
  
  See Also: flag_access_unset, flag_accees_type, flag_access_set, @flagdef

& flag_access_type
  Config parameter: flag_access_type <flagname> <permission(s)>
  
  Sets a type restriction for set/unset permissions for the specified flag.  
  This is similiar to issuing @flagdef/type on the specified flag.
  
  See Also: flag_access_unset, flag_accees_see, flag_access_set, @flagdef

& float_precision
  Config parameter: float_precision <value>   Default: 6
  
  Specifies the floating point precision for decimal points in all math
  based floating point notation (like mul, fdiv, etc).  The range that
  is allowed is 1-48.  Anything over 48 is meaningless anyway due to
  limitations on floating point notation precision.
  
& float_switches
  Config parameter: float_switches <boolean>.    Default: no
  
  If penn_switches is enabled, this optionally allows the math to handle
  floating point numbers.  As floating math is slightly more computationally
  expensive, this option is disabled unless needed or wanted.
  
  Note: penn_switches must be enabled for this to work.
   
  See Also: penn_switches
  
& name_with_desc
  Config parameter: name_with_desc <boolean>.    Default: no
  
  This config defines if you should see the 'name' of an item when you look at
  it before the description that shows up.  This only affects things that you
  normally do not control (own or have permission over) and only affects
  things that you can actually see at your location.
  
& nand_compat
  Config parameter: nand_compat <yes/no>.    Default: no
  
  This config defines if the nand() function should be compatible with a
  previous broken implementation of RhostMUSH.  This is only for those who may
  depend on the 'broken' evaluation for their code, otherwise it's safe to keep
  it no.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& noauth_site
  Config parameter: noauth_site <addr> <mask>.
  
  Indicates that connections are to ignore AUTH lookups.  This is handy to
  avoid any type of timeout conditions or non-recognized conditions on
  poorly configured remote hosts.  You can check out what sites are having
  AUTH difficulties by reviewing the mush.log file.

& nobroadcast_host
  Config parameter: nobroadcast_host <!host> <host> ... <host>
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will not be monitored on site connections and
  disconnections.  This is handy for automated site connections where
  you don't necessarilly want to be spammed with all the site connection
  information.  

& nodns_site
  Config parameter: nodns_site <addr> <mask>.
  
  Indicates that connections are to ignore reverse DNS lookups.  This is 
  useful when remote sites have mangled DNS addresses or if they are
  configured wrong.  This also helps in conditions where you may be
  attacked with spoofed IP header information.  You can review DNS 
  difficulties by reviewing the mush.log file.
  
  See Also: @blacklist, @site, blacklist_nodns.txt

& hardconn_host
  Config parameter: hardconn_host <!host> <host> ... <host>
  
  This parameter specifies the hostnames that are allowed to use
  connect screen connect/create/register commands if they have been
  disabled with the use of the connect_methods admin parameter.
  
  Example:  @admin hardconn_host=localhost
  
  See Also: hardconn_site, connect_methods

& hardconn_site
  Config parameter: forbid_site <addr> <mask>
  
  This is used to specify the numerical address and mask of what is
  allowed to use connect screen connect/create/register commands if
  the connect_methods admin parameter is specified.
  
  See Also: connect_methods, hardconn_host, SITE LISTS, @site

& passapi_host
  Config parameter: passapi_host <!host> <host> ... <host>
  
  This parameter takes the hostname and allows passing the max_lastsite_api
  count value.  This does not allow bypassing forbidapi settings.
  
  Example:  @admin passapi_host=localhost
  
  See Also: passapi_site, @site
   
& forbidapi_host
& forbid_host
  Config parameter: forbid_host <!host> <host> ... <host>
                    forbidapi_host <!host> <host> ... <host>
  
  The forbidapi_host works like forbid_host, except it handles ONLY the
  api port connections.  It will not affect other connections to the mush.
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will not be allowed to connect and will be rejected
  upon socket connection. This works like 'forbid_site' but deals with DNS
  wildcard name conventions.  This will add or remove to existing or from
  existing site information already specified with forbid_host.  You may use
  '!ALL' to clear the forbid host table.
  
  You may specify an optional ceiling of allowed connects before the
  restriction takes effect by ending in '|#'.  Like '*.aol.com|3' will allow
  3 connections from aol.com at any one time, then enforce the restriction.
  Optional ceiling restrictions are only valid for NOGUEST, REGISTER, and 
  FORBID restrictions.
  
  Example:  @admin forbid_host=*.aol.com !*.compuserve.com *ego.com|3
            (forbids any site matching *.aol.com and removes *.compuserve.com)
            (will forbid *ego.com if more than 3 connections are seen)
            @admin forbid_host=!ALL
            (this clears the forbid_host list)
  
  Note:  If you used a ceiling, you must specify the ceiling in removing
         the site or it will not match it.  You may use @site/list to see
         the raw site information that you can use to remove the site.
   
  See Also: register_host, suspect_host, noguest_host, noautoreg_host, 
            validate_host, @site

& passapi_site
  Config parameter: passapi_site <addr> <mask>
  
  This parameter will bypass the site counter restriction for any site(s)
  matching.  This will not bypass the forbidapi_site parameter, but only
  bypasses the max_lastsite_api count value restriction.  This only effects
  API connections.
  
  See Also: API, forbidapi_site, SITE LISTS, @site
   
& forbidapi_site
& forbid_site
  Config parameter: forbid_site <addr> <mask>
                    forbidapi_site <addr> <mask>
  
  The forbidapi_site works like forbid_site, except it handles ONLY the
  api port connections.  It will not affect other connections to the mush.
  
  Indicates that connections are to be rejected from sites whose address
  matches the specified address when ANDed with the mask.  The contents of
  the file specified by badsite_file is sent immediately before closing
  the connection.  This directive may be used to restrict access to just the
  local network, or to prevent access from troublemaking sites.
  The default is for all sites to be allowed to connect, none forbidden.
  See Also: badsite_file, noguest_site, permit_site, register_site, 
            SITE LISTS.

& fork_dump
  Config parameter: fork_dump <yes/no>.  Default: yes
  
  Indicates whether or not database dumps are to be done by fork()ing off a
  separate process to perform the dump.  While enabling this parameter reduces
  the amount of time needed to perform the dump, it requires that the system
  have enough free swap space to hold a second copy of the running game.
  See Also: fork_vfork.

& fork_vfork
  Config parameter: fork_vfork <yes/no>.  Default: no
  
  Indicates whether or not the vfork() system call should be used in place of
  fork() when a database dump is to be performed.  This parameter is only
  checked if the fork_dump parameter is set to yes.
  See Also: fork_dump.

& format_compatibility
  Config parameter: format_compatibility <yes/no>.  Default: no
  
  In the past, TinyMUSH/PennMUSH changed the names of their format-related
  attributes from @format<term> to @<term>format. With this parameter enabled,
  the old format gets used in case compatibility with those old versions is
  needed.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& format_contents
  Config parameter: format_contents <yes/no>.  Default: no
  
  Indicates whether or not to allow user-definable content listings.  When
  in effect, if the ConFormat attribute exits, it will take presidence over
  the default Contents: information.
  
  See Also: format_exits, format_name

& format_exits
  Config parameter: format_exits <yes/no>.  Default: no
  
  Indicates whether or not to allow user-definable exit listings.  This 
  includes both ExitFormat and DarkExitFormat.  If either of these 
  attributes exist, it will take presidence over the default 'Exits'.
  
  See Also: format_contents, format_name, exit_separator

& format_name
  Config parameter: format_name <yes/no>.  Default: no
  
  Indicates whether or not to allow names of contents to be user-definable.
  This will, as all other format_* params, allow parent checks.
  
  See Also: format_contents, format_exits

& formats_are_local
  Config parameter: formats_are_local <yes/no>  Default: no
  
  Specifies if @conformat, @exitformat, @nameformat, and @darkexitformat are
  'local' with regards to setq() registers.  Without this being turned on,
  the possibility of these clobbering setq() registers are possible.  This
  could be a desireable effect, thus, it's a config parameter.
 
& full_file
  Config parameter: full_file <pathname>.  Default: full.txt
 
  Specifies the name of the file that is displayed when players attempt to
  connect to a non-wizard character when the number of connected players
  is not less than the number of players allowed by the max_players directive.
  See Also: full_motd_message, max_players.

& function_access
  Config parameter: function_access <function> [!]<priv> [[!]<priv>]...
 
  Changes the privileges needed to call the mush function <function>.
  If you do not have permission to call a function, the function
  returns the value "#-1 PERMISSION DENIED" instead of the value it
  would normally return.
  
  If you set the function IGNORE (ignore, ignore_royal, etc), it can
  allow the function to be OVERLOADED with a softcoded function of
  the same name.  Please see wizhelp on 'function overloading' for how
  to do this.
  
  Global hardcoded functions are identified by their name.  Ergo 'add'.
  
  Global softcoded @functions are identified by their name.  Ergo 'foot'.  
  
  Local softcoded @lfunctions are identified by owner + name. Ergo: '123_foot.'
  
  See Also: @list functions, FUNCTION LIST, PERMISSIONS, function_alias.

& function_alias
  Config parameter: function_alias <new alias> <function>
                    function_alias <old alias> <function>
                    function_alias <alias> !
  
  The first form establishes an alias of <new alias> for the function 
  name <function>.  This works like 'alias' does for commands.  The 
  second form will allow you to redefine a function alias to a new 
  function.  The third form removes the function alias.
  
  See Also: alias, function_access

& full_motd_message
  Config parameter: full_motd_message <message>.  Default: blank
 
  Sets the message that is displayed when a player attempts to connect to a
  non-wizard character when the number of connected players is not less than
  the number of players allowed by the max_players directive.  This message is
  displayed in addition to the contents of the full.txt file.
  See Also: down_motd_file, max_players.

& function_invocation_limit
  Config parameter: function_invocation_limit <num>.  Default: 2500
 
  This directive sets the maximum number of times that a command may make
  function calls.  If the invocation limit is exceeded, the string 
  '#-1 FUNCTION INVOCATION LIMIT EXCEEDED' is returned.  This limit is
  intended to prevent long hangs from creative uses of u() and iter().
  Note: @search is treated specially, each object examined with the
  eval=<arg> parameter is treated as a separate command for the purposes
  of the function invocation limit.

& function_max
  Config parameter: function_max <n7um>.  Default: 1000 (-1 unlimited)
  
  This parameter specifies how many global @functions can be defined in
  the game.  By default, 1000 can be defined before it will not allow
  any new definitions.  You may modify or delete functions once the
  max is reached, but can no longer add new ones.  You may specify this
  value to '-1' (negative one) to assign an unlimited number which was
  the previous behavior, however we feel 1000 is more than sufficient
  for even the most hairy code so was a good default.
  
  See also: @function, @lfunction, lfunction_max
 
& function_recursion_limit
  Config parameter: function_recursion_limit <num>.  Default: 50
 
  This directive sets the maximum number of nested function calls that
  may be made before the function call is aborted and the string
  '#-1 FUNCTION RECURSION LIMIT EXCEEDED' is returned.  Normally this is not
  a problem, but the u() function can be used to cause infinite recursion
  (unless blocked by a recursion limit)

& gconf_file
  Config parameter: gconf_file <file>.  Default: noguest.txt
  
  Specifies the file that will be displayed to players who try to connect
  guests from disallowed sites.  Disallowed sites are handled with use of
  the NOGUEST_SITE config parameter.

& gdbm_cache_size
  Config parameter: gdbm_cache_size <number>.  Default: 4096
  
  Specifies the size of the cache used by the text database in 1K blocks.

& gdbm_database
  Config parameter: gdbm_database <path>.  Default: none.
  
  Specifies the name of the file that stores the text portion of the
  database.  The text strings are stored in a binary format optimized for
  fast retrieval and storage rather than access with programs such as more.

& global_aconnect
  Config parameter: global_aconnect <number>.  Default: 0
  
  Specifies if the master room recognizes player connects.  If it is enabled,
  then any object inside the master room that has an @aconnect will be 
  triggered as if it was that player's own @aconnect who just connected.

& global_adisconnect
  Config parameter: global_adisconnect <number>.  Default: 0
  
  Specifies if the master room recognizes player disconnects.  If it is 
  enabled, then any object inside the master room that has an @adisconnect
  will be triggered as if it was that player's own @adisconnect who just 
  disconnected.

& global_ansimask
  Config parameter: global_ansimask <mask>.  Default: 2097151
  
  Specifies a mask of ansi codes you do *NOT* want to be able to use globally.
  This will strip them from all %c and ansi() substitutions.  All the colors
  starting with a '*' are background colors.   Any color you do *not* want
  to use you need to subtract from the '2097151' total.
  The masks are:
      BLACK      1             RED        2             GREEN      4         
      YELLOW     8             BLUE       16            MAGENTA    32        
      CYAN       64            WHITE      128          *BLACK      256        
     *RED        512          *GREEN      1024         *YELLOW     2048      
     *BLUE       4096         *MAGENTA    8192         *CYAN       16384      
     *WHITE      32768         HILITE     65536         INVERSE    131072    
      BLINK      262144        UNDERSCORE 524288
  
  Again, all colors starting with '*' are background colors.

& global_attrdefault
  Config parameter: global_attrdefault <dbref>.    Default: -1
  
  Specifies the default object that SET LOCKS are checked for when setting
  or clearing attributes.  To set this, the individual attribute must be
  set 'ATRLOCK' and a matching attribute must exist on the global_attrdefault.
  The original string attempted to be set is passed into the 'lock' attribute
  as '%0'.  The attribute on the lock must match the name of the attribute
  attempting to be set (or cleared).  If the lock (evaled) returns a 0 (zero),
  the lock fails and the attribute won't be allowed to be set (or cleared).
  If it returns any numerical value but a 0 (zero), then it will be allowed.
  
  This only effects setting or clearing the attribute directly.  It will not
  effect wiping.  This is the intended effect.
    
  See Also: ATRLOCK

& global_error_cmd
  Config parameter: global_error_cmd <yes/no>.   Default: no (0)
  
  This will specify if the global_error_obj error handling will handle
  commands and not just functions.  There is built in protection against
  looping but you should still be careful with the instance when using
  this option.
  
  See Also: global_error_obj

& global_error_obj
  Config parameter: global_error_obj <dbref>.    Default: -1
  
  Specifies the object that it looks for, to evaluate an attribute
  whenever a 'Huh? (Type 'help' for help)' would have shown up.
  The attribute is the VA attribute (settable by @va or &va), and
  will evaluate like you would in a @pemit, think, or other command.
  The enactor is %#, though it is evaluated by the object itself.
  This _CAN_ be a security risk if not done properly, but is done
  that way on purpose so that side-effects just require that object
  to be set SIDEFX and nothing else.  The string they typed will
  be passed as '%0'.  It will be unevaluated and 'as-is'.
  
  This feature can not be TRACEd.  If you wish to debug this code,
  execute it via think, @eval, or other syntax and not through
  the global error code itself.
   
  Why the VA attribute?  Why not?  I felt it was being all alone
  and left out of the fun ;)
  
  Example:
    > @admin global_error_obj=10
    Set.
    > @va #10=[pemit(%#,You typed '%0')]
    Set.
    > @pemit me=Test
    Test
    > @pmit me=Test
    You typed '@pmit me=Test'
  
  See Also: global_error_cmd

& global_clone_obj
  Config parameter: global_clone_obj <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global clone object'.  When a new item is created, dug
  pcreated, or in any form added to the db, all attributes on this
  object are copied to the target, newly created, item.
  
  Individual clone types (player, thing, room, exit) override the 
  generic global.
  
  See Also: global_clone_thing, global_clone_room, global_clone_exit,
            global_clone_player

& ancestor obj
& ancestor_obj
& global_parent_obj
  Config parameter: global_parent_obj <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global parent object'.  This works separate from
  @parent and 'global @parents'.  This object, if set, will have all
  it's attributes inherited to all object types in the database, minus
  garbage and/or recovery data types.
  
  The global_parent_TYPE params override the global setting.
  TYPES are one of: room, exit, thing, player
  
  The flow of attribute inheritance is:
  
      Self -> @parent -> Zone -> Global Parent Type -> Global Parent Object
  
  You may specify '@list options values global_parent*' to see values.
  
  See Also: room_parent, thing_parent, exit_parent, player_parent,
            global_parent_room, global_parent_thing, global_parent_exit,
            global_parent_player

& global_clone_exit
  Config parameter: global_clone_exit <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global clone exits'.  When a new exit is opened,
  or in any form added to the db, all attributes on this object are 
  copied to the target, newly created, exit.
  
  See Also: global_clone_thing, global_clone_room, global_clone_obj,
            global_clone_player

& ancestor exit
& ancestor_exit
& global_parent_exit
  Config parameter: global_parent_exit <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global parent object'.  This works separate from
  @parent and 'global @parents'.  This object, if set, will have all
  it's attributes inherited to all object types in the database, minus
  garbage and/or recovery data types.
  
  This only effects exits.
  
  You may specify '@list options values global_parent*' to see values.
  
  See Also: global_parent_room, global_parent_thing, global_parent_player
            global_parent_obj

& global_clone_room
  Config parameter: global_clone_room <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global clone rooms'.  When a new room is dug,
  or in any form added to the db, all attributes on this object are 
  copied to the target, newly created, room.
  
  See Also: global_clone_thing, global_clone_exit, global_clone_obj,
            global_clone_player

& ancestor room
& ancestor_room
& global_parent_room
  Config parameter: global_parent_room <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global parent object'.  This works separate from
  @parent and 'global @parents'.  This object, if set, will have all
  it's attributes inherited to all object types in the database, minus
  garbage and/or recovery data types.
  
  This only effects rooms.
  
  You may specify '@list options values global_parent*' to see values.
  
  See Also: global_parent_exit, global_parent_thing, global_parent_player
            global_parent_obj

& global_clone_thing
  Config parameter: global_clone_thing <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global clone things'.  When a new thing is created,
  or in any form added to the db, all attributes on this object are 
  copied to the target, newly created, thing.
  
  See Also: global_clone_room, global_clone_exit, global_clone_obj,
            global_clone_player

& ancestor thing
& ancestor_thing
& global_parent_thing
  Config parameter: global_parent_thing <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global parent object'.  This works separate from
  @parent and 'global @parents'.  This object, if set, will have all
  it's attributes inherited to all object types in the database, minus
  garbage and/or recovery data types.
  
  This only effects things.
  
  You may specify '@list options values global_parent*' to see values.
  
  See Also: global_parent_exit, global_parent_room, global_parent_player
            global_parent_obj

& global_clone_player
  Config parameter: global_clone_player <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global clone players'.  When a new player is pcreated,
  or in any form added to the db, all attributes on this object are 
  copied to the target, newly created, player.
  
  See Also: global_clone_room, global_clone_exit, global_clone_obj,
            global_clone_thing

& ancestor player
& ancestor_player
& global_parent_player
  Config parameter: global_parent_player <dbref>.    Default: -1
  
  Specifies the dbref# (without leading '#') of the object that is to
  be used for a 'global parent object'.  This works separate from
  @parent and 'global @parents'.  This object, if set, will have all
  it's attributes inherited to all object types in the database, minus
  garbage and/or recovery data types.
  
  This only effects players.
  
  You may specify '@list options values global_parent*' to see values.
  
  See Also: global_parent_exit, global_parent_room, global_parent_thing
            global_parent_obj

& good_name
  Config parameter: good_name <name>.
  
  Removes <name> from the list of names that may not be used as a player
  name, reversing the effect of a bad_name directive.  The name must match
  exactly (wildcard matching is not performed).

& goodmail_host
  Config parameter: goodmail_host <string>.  Default: (null)
  
  Specifies VALID email addresses for the autoregistration system.
  If an email specified matches this wildcarded list, it will ALWAYS ALLOW
  the autoregistation.  This will add or remove to existing or from existing 
  site information already specified with validate_host.  You may use '!ALL' 
  to clear the suspect host table.  
  
  This will override the 'validate_host' admin parameter.
   
  Example:  @admin validate_host=*aol.com !*compuserve.com
            (invalidates sites matching *aol.com and removes *compuserve.com)
            @admin goodmail_host=biff@aol.com
            (Validates biff@aol.com eventhough aol.com is disallowed)
            @admin goodmail_host=!ALL
            (this clears the goodmail_host list)
 
  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, 
             suspect_host, validate_host, @site


& guest_char_num
  Config parameter: guest_char_num <number>.  Default: (none)
  
  Indicates the database number of the guest character.  If set, the specified
  guest character is subject to additional restrictions (such as not being
  allowed to create or destroy objects).  The actual restrictions can be
  changed with the access config parameter using the no_guest permission.
  See Also: access.

& guest_file
  Config parameter: guest_file <path>.  Default: guest.txt.
  
  Specifies the file that is to be shown to people connecting to the
  guest character in place of the motd file.
  
  See Also: guest_char_num

& guest_namelist
  Config parameter: guest_namelist <val !val val>.  Default: (none)
  
  This is a special config parameter.  With this, you may override the current
  guest system and choose different players with different names.  You can
  only enter a player once, and you can not modify this if either a guest
  is currently connected, or the player you're trying to add is connected.
  You may specify '!ALL' to clear the list and return to the default naming.
  
  The list actually stores the dbref#'s of the players and will convert 
  the names in the list to the corresponding dbref#'s.  You may use names,
  dbref#'s, or aliases when you enter the names.  Again, it'll convert
  it to dbref#'s regardless of how you specify.
  
  You may randomize the selection if you have guest_randomize enabled.  
  
  Examples:
    > @admin guest_namelist=Fred Tom #123
    Entry updated.  3 added.
    > @admin guest_namelist=!Fred
    Entry updated.  1 removed.
  
  To display the current guest list at any time, you may use:
            @list guest
  
  Any players over 31 total added to the list will be ignored.
  
  See Also: guest_file, num_guests, guest_randomize

& guest_randomize
  Config parameter: guest_randomize <boolean>.   Default: off (0)
  
  This parameter will randomize guest connections to randomly select
  a guest based on the free list of guests currently available.  This
  also takes into account the guest_namelist.
  
  See Also: guest_namelist, num_guests

& guild_attrname
  Config parameter: guild_attrname <string>.  Default: Guild
  
  This specifies what attribute that the extra field in the DOING/WHO will
  show.  By default, this string holds 'Wanderer' (defined by guild_default)
  that is held within the Guild (@guild) attribute which can be changed
  by this parameter.
  
  See Also: guild_default, guild_hdr

& guild_default
  Config parameter: guild_default <string>.  Default: Wanderer
  
  This specifies what the default guild a person has in the WHO if they do
  not have an attribute 'Guild' set on themselves.
  
  This also will change the default GUILD a player has when they are
  created to whatever guild_default is defined as. (ansi is stripped).
  
  See Also: guild_attrname, guild_hdr

& guild_hdr
  Config parameter: guild_hdr <string>.  Default: Guild
  
  This specifies what shows up in the default WHO for the field for guild
  attributes.  Changing this field changes what shows up on the default
  DOING/WHO listing for RhostMUSH.  The default, as shown, is 'Guild'.
  
  See Also: guild_attrname, guild_default

& hackattr_nowiz
  Config parameter: hackattr_nowiz <ON(1)/OFF(0)>  Default: OFF
  
  Defines if '-DHACK_ATTR' was compiled in, that all attributes starting with
  '_' should be handled like any other attribute.  This means, that the 
  default setting of having all attributes starting with '_' will no longer be
  wizard only.
  
  See Also: hackattr_see

& hackattr_see
  Config parameter: hackattr_see <ON(1)/OFF(0)>  Default: OFF
  
  Defines if '-DHACK_ATTR' was compiled in, that all attributes starting with
  '_' should be seen by mortals.  This means, that the default setting of 
  having attributes starting with '_' will be follow the normal rules for
  created attributes in who can see them.
  
  See Also: hackattr_nowiz

& hasattrp_compat
  Config parameter: hasattrp_compat <value>.  Default: 0
  
  This config parameter enables MUX/TM3 'compatibility' of the hasattrp()
  function so that it _will_ check the target object as well as the parent-
  chain for matching attributes.  By default, it will not check the target.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& hastype_always_zero
  Config parameter: hastype_always_zero <value>. Default: 0

  By default, hastype() returns #-1 instead of 0 if an invalid object has
  been specified as its first parameter. This is mostly due to compatibility
  with past MU* servers.

  If you prefer to have hastype() return 0 if the object is invalid instead of
  returning #-1, set this parameter to 1.

  Hastype will always return #-1 if the specified *type* is invalid.

  See Also: help hastype

& heavy_cpu_max
  Config parameter: heavy_cpu_max <value>.  Default: 50
  
  Specifies how many iterations of heavy cpu used functionality can be called
  per command before disallowing it.  This helps against DoS based attacks.
  
  See Also: cpu_secure_lvl

& help_file
  Config parameter: help_file <path>.  Default: help.txt
  
  Specifies the name of the file containing the text used by the help command.
  
  See Also: help, help_index

& help_index
  Config parameter: help_index <path>.  Default: help.indx
  
  Specifies the name of the index file used by the help command.  This file
  must be generated by mkindex from the wizard help file.  The contents of
  this file are read in to a hash table when the game is started and whenever
  a @readcache command is executed.
  
  See Also: help, @readcache, help_file

& help_separator
  Config parameter: help_separator <string>.  Default: %b%b
  
  Specifies the default separator for help entries when displaying a list,
  including suggestions. 
  
  See Also: @dynhelp, dynhelp(), textfile(), exit_separator
  
& hide_nospoof
  Config parameter: hide_nospoof <ON(1)/OFF(0)>  Default: OFF
  
  Defines if you must control the target in order to see the NOSPOOF flag on
  the target.  This takes into account the VISUAL flag.  ie:  If you're
  set visual, you *still* must control the target to see the nospoof flag.
  
& hook_cmd
  Config parameter: hook_cmd <command> <hooks/!hooks>
  
  This admin parameter allows you to specify multiple hooks for commands
  or attributes in the .conf file or online via @admin.  This is an 
  alternative way to applying hooks besides the @hook command.
  The following hooks exist:
         - before      set up functionality BEFORE a command executes.
         - after       set up functionality AFTER a command executes.
         - permit      establish functionary lock of attribute/command.
         - ignore      establish ignore inheritance of attribute/command.
         - igswitch    specifies if command bypasses failed /switch notices.
         - fail        specified what happens instead of 'permission denied'
  
  For detailed information on how to set up hooks, please see wizhelp on:
                                HOOK SETUP
  
  See Also: HOOK SETUP, @hook, hook_obj, hook_offline
                      
& morgrification
& mogrify
& hook_mogrifiers
& hook_mogrify
  Config parameter: hook_obj (Topic: morgrify)
   
  This requires a valid hook_obj to be set.  See wizhelp on hook_obj.
  
  Mogrifiers are special conditionals for the hook object.  They will
  only mogrify say, pose, and @emit.  If they exist, they are always
  on.  The following morgrifiers are allowable:
         M_SAY    -- this handles 'say' and the '"' shorthand.
         M_POSE   -- this handles 'pose' and the ':'/';' shorthand.
         M_@EMIT  -- this handles '@emit' and the '\\' shorthand.
  
  When these attributes exist on the hook object, the command is
  then on morgrified.  If the morgrification returns an empty string,
  the command is not executed and is ignored.  Morgrification is done
  through function evaluation.  
  
  The following special arguments are allowable to the morgrifier.
    %0 - the 'finished' output of what say, pose, or @emit would show.
    %1 - the 'raw' output of what the target typed in.
    %2 - the dbref# of the target triggering the command.
    %3 - (Only for pose) -- boolean set to '1' if a pose/nospace (;)
    %4 - (Only for say) -- boolean set to '1' if say message is for
         the player-only ("You Say...")
  
  The only way to disable morgrification of a command is to move, or
  remove, the M_ attribute.
  
  See Also: @hook, hook_obj
   
& hook_obj
  Config parameter: hook_obj <dbref>.  Default: -1
  
  Specifies the valid dbref# that the hook information is stored.  All
  hooks are in the form <prefix>_<command/attribute>.  
  Attributes are stored in the form:
          I_<command> - ignore configuration
          P_<command> - permit configuration
          A_<command> - after configuration
          B_<command> - before configuration
         AF_<command> - fail configuration
         AO_<command> - after offline (connect screen) configuration 
          M_<command> - Morgrification.  See 'help hook_morgrify'
  Percent substitutions are handled differently than normal '@hooks' and
  can be seen with reviewing wizhelp on 'sub_override'.
  
  Percent substitutions can be added with the 'sub_include' parameter.
   
  The IGSWITCH does not require attributes.
   
  For detailed information on how to set up hooks, please see wizhelp on:
                                HOOK SETUP
  
  See Also: HOOK SETUP, @hook, hook_cmd, sub_override, sub_include,
            hook_offline, hook_morgrify
  
& hook_offline
  Config parameter: hook_offline <on/off>.  Default: off
  
  This option if enabled will allow connect screen (offline) player
  creates to trigger @pcreate/after and/or @register/after.  
  The attribute for this is special and will be AO_@pcreate 
  instead of A_@pcreate and AO_@register instead of A_@register
  
  Be aware that as these are offline hooks, %m for last command will
  not work properly.
  
  See Also: HOOK SETUP, @hook, hook_cmd, sub_override, sub_include,
            hook_offline
  
& hostnames
  Config parameter: hostnames <yes/no>.  Default: yes
  
  Indicates whether or not IP addresses should be replaced with host names
  where possible in the log file and wizard WHO report.

& icmd_obj
  Config parameter: icmd_obj <dbref>. Default: -1
  
  Sets the dbref of the ICMD Object, usable with @icmd/eval.
  See 'help @icmd'

& idle_interval
  Config parameter: idle_interval <secs>.  Default: 60
  
  Sets the interval between checks for idle users. 
  See Also: conn_timeout, idle_timeout.

& idle_message
  Config parameter: idle_message <yes/no>.  Default: yes
  
  Indicates if a wizard receives a message when they have idled beyond the
  idle_timeout and if they have gone dark or cloaked.
  See Also: idle_timeout, idle_wiz_cloak, idle_wiz_dark

& idle_stamp
  Config parameter: idle_stamp <yes/no>.  Default: no
  
  Specifies if it should stamp a CRC32 checksum of what the player typed and
  how many times they did it up to <idle_stamp_max> commands on the target
  player.  This effectively is an anti-idle detection mechanism that will
  quickly identify the commands typed by the player if they're the same
  and keep a count of how often the player has issued it.
  
  The attribute will be _IDLESTAMP on the player and will contain values
  similar to:
   
                2623071918:1 2166209533:1 1469448984:1 
  
  The value before the ':' is the CRC32 checksum of the command they typed.
  The value after the ':' is the number of times the command was issued.
  
  By default it keeps the last 10 unique commands a player types. 
  This value can be modified with 'idle_stamp_max' @admin param.
   
  See Also: idle_stamp_max
  
& idle_stamp_max
  Config parameter: idle_stamp_max <count>  Default: 10  
  
  Specifies how many commands are to be logged per player with a running 
  tally of how often they typed the command.  The command is a hashed
  value so you won't actually see what the player typed, only if what
  they typed matches what they previously typed.
  
  This value can be between 1 to 300.
  
  For more details see idle_stamp.
   
  See Also: idle_stamp

& idle_timeout
  Config parameter: idle_timeout <secs>.  Default: 3600 (one hour)
  
  Sets the amount of time that a player may remain idle before being
  automatically disconnected.  Players idle longer than this parameter are
  disconnected when the next check for idle players is done.  If this value
  is set to '-1', then the entire mush has UNLIMITED time on.  Keep in mind
  that this value will not effect currently connected players and only takes
  effect for players connecting after this value is set.
  See Also: conn_timeout, idle_interval.

& idle_wiz_cloak
  Config parameter: idle_wiz_cloak <yes/no>.  Default: no
  
  Indicates whether or not wizards who are idle for longer than the default
  timeout value are automatically CLOAKED, and then unCLOAKED when they
  type in their next command.  Wizards already set to be CLOAKED are not
  automatically unCLOAKED.  This admin parameter overrides idle_wiz_dark.
  See Also: idle_wiz_dark

& idle_wiz_dark
  Config parameter: idle_wiz_dark <yes/no>.  Default: no
  
  Indicates whether or not wizards who are idle for longer than the default
  timeout value are to automatically be set DARK, and then unDARKed when they
  type in their next command.  Wizards already set DARK are not automatically
  unDARKed.
  See Also: idle_wiz_cloak

& ifelse_compat
  Config parameter: ifelse_compat <yes>.  Default: no

  This config parameter, if enabled, makes the if() and ifelse() functions
  as well as the @skip, @if, and @ifelse commands behave as TRUE if their
  first argument is a normal string. This increases compatbility with other
  codebases, especially MUX, and removes the need to use t() in many of those
  situations.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible
 
& ifelse_substitutions
  Config parameter: ifelse_substitutions <yes/no>.  Default: no
  
  Specifies if ifelse() allows #$ substitutions.
  By default, this is disabled as it firstly breaks compatibility with
  older versions of RhostMUSH, and secondly, because it is a security
  risk if you do not code switch safely.
  
  See Also: switch_substitutions

& imm_nomod
  Config parameter: imm_nomod <yes/no>.  Default: no
  
  Indicates whether or not the NOMODIFY flag is accessable to immortals only
  or to both immortals and royalty (wizards).  If configured to be immortal
  only, this flag will resemble the 'CONSTANT' flag in TM 3.0.
  
  See Also: NOMODIFY

& include
  Config parameter: include <path>.  Default: none
  
  Reads and processes configuration directives from the named file.
  This directive is only valid during startup.

& includecnt
  Config parameter: includecnt <value>.  Default: 10
  
  Specifies the total number of times @include can be called within a single
  set of input.  A $command on an attribute is considered a single set of 
  input.  Try to keep this relatively low to avoid DoS attacks.
  
  See Also: includenest

& includenest
  Config parameter: includenest <value>.  Default: 3
  
  Specifies the total number of times @include can be nested within itself.
  Please try to keep this value somewhat low to avoid attacks on your mush.
  
  See Also: includecnt

& initial_size
  Config parameter: initial_size <value>.  Default: 1000
  
  This specific parameter specifies the initial starting size of the database
  structure when initially making the database.  This parameter is defaulted
  to disabled and should only be used if you know exactly what you're doing.
  1000 is a good default.

& input_database
  Config parameter: input_database.  Default: tinymush.db
  
  Specifies the name of the database file that is read in at startup.
  This file is used only as an input file, the parameter output_database
  controls where updated copies of the database are written.
  See Also: crash_database, gdbm_database, output_database.

& internal_compress_string
  Config parameter: internal_compress_string <yes/no>.  Default: no
  
  Specifies whether or not a simple bigram compression is to be performed on
  text strings in the database.  Enabling this directive shrinks the amount
  of space needed to store the database both on disk and in memory, but
  increases the amount of time needed to fetch and store back the string.

& inventory_name
  Config parameter: inventory_name <string>.  Default: backpack
  
  Specifies the string that is used to specify the name of the inventory type
  when ALT_INVENTORIES are enabled.  If no string is specified, the default
  of 'backpack' is used.  Ansi, tabs, and carriage returns are stripped.

& iter_loop_max
  Config parameter: iter_loop_max <value>.  Default: 100000
  
  The default loop maximum that iter() allows with the special substitution
  of :<value>:<method>:.  Such as ':100:>:' or ':0:<:'.  This should be
  careful on any modification because while function invocations are taken
  into account it is possible to use iter() without any evaluation per
  say.  So this is a necesssary evil and 100,000 is considered a good
  value to hit.
  
  Of note, anything over a million tends to trigger a 1 second CPU alarm
  so something to keep in mind based on the hardware.
  
  See Also: (normal 'help') iter()
  
& ip_address
  Config parameter: ip_address <address>.  Default: 0.0.0.0
  
  Specifies the IP address on which the game listens for new connections.
  See Also: port.

& kill_guarantee_cost
  Config parameter: kill_guarantee_cost <amount>.  Default: 100
  
  Specifies the amount of money you have to spend (ie. kill target = <amount>)
  to have a 100% chance of killing them (assuming there are no other factors,
  such as the victim being immortal or in a HAVEN room, etc).  The chance of
  a successful kill is <amount spent> / <kill_guarantee_cost>.
  See Also: kill, kill_max_cost, kill_min_cost, HAVEN, IMMORTAL, KILLING.

& kill_max_cost
  Config parameter: kill_max_cost <amount>.  Default: 100
  
  Specifies the maximum amount of money that may be usefully spent on a kill
  attempt.  Spending more than this amount does not improve the chance of
  success.  Setting this parameter to less than the kill_guarantee_cost
  parameter prevents 'automatic kills', as the kill will always have a chance
  of failing.
  See Also: kill, kill_guarantee_cost, kill_min_cost, HAVEN, IMMORTAL,
            KILLING.

& kill_min_cost
  Config parameter: kill_min_cost <amount>.  Default: 10
  
  Specifies the minimum (and default) cost for attempting to kill someone or
  something.
  See Also: kill, kill_guarantee_cost, kill_max_cost, HAVEN, IMMORTAL,
            KILLING.

& lastsite_paranoia
  Config parameter: lastsite_paranoia <value>    Default: 0
  
  Specifies the paranoia level you wish to have for continuous connections.
  The default of '0' will issue no additional protection.  The following
  values exist:
      1  - if threshold of max connections for min time reached, set the
           site register.
      2  - if threshold of max connections for min time reached, set the
           site forbid.
  
  The admin param 'max_lastsite_cnt' handles the max connections.  The
  admin param 'min_con_attempt' handles the min time reached.
    
  See Also: max_lastsite_cnt, min_con_attempt, pcreate_paranoia

& lattr_default_oldstyle
  Config parameter: lattr_default_oldstyle <on/off>  Default: off
  
  If enabled, this will 'snuff' the #-1 errors on lattr() and instead,
  return an empty (or null) string.  This is required for some older
  codebases for backward compatibility.

& lcon_checks_dark
  Config parameter: lcon_checks_dark <on/off>  Default: off
  
  If enabled, enforces dark/unfindable checks on lcon()/xcon() that
  would be applied to lwho().
  
& lfunction_max
  Config parameter: lfunction_max <num>.  Default: 20
  
  Specifies the maximum @lfunctions a player may define for their own
  local function pool.  This may be individually tweaked through the
  @limit command.
  
  See Also: @limit, max_vattr_limit, wizmax_vattr_limit, wizmax_dest_limit,
            vattr_limit_checkwiz, max_dest_limit, function_max

& list_access
  Config parameter: list_access <param> [!]<privilege> [[!]<privilege>]...
  
  Changes the access needed to the <param> option of the @list command.
  See Also: @list, PERMISSIONS.

& list_max_chars
  Config parameter: list_max_chars <value>.  Default: 1000000
  
  Specifies the maximum output in characters that the list() function can
  pump out.  This will effectively kill off every iteration of iter() and
  list still in progress as well.
  
  With the avent of larger LBUF's, there was a need to limit the output.
  Especially since with 64K lbufs, it was potentially possible to output
  BILLIONS of characters in a single command.  Rather... insane.
  
& listen_parents
  Config parameter: listen_parents <boolean>.  Default: 0
  
  Specifies if parents should process ^-listen patterns or not.  This can
  effectively be a bit more computationally expensive so only enable
  if you really need this feature.
  
& link_cost
  Config parameter: link_cost <amount>.  Default: 1.
  
  Specifies the cost of using the @link command to establish or change the
  link of an exit to its destination, the home of a player or an object, or
  the drop-to of a room.
  See Also: @link.

& lock_recursion_limit
  Config parameter: lock_recursion_limit <num>.  Default: 20
 
  Sets the maximum number of levels of indirection that may be used when
  using indirect locks.  If more than this many levels are used, the lock
  fails and the user gets an error message.

& log
  Config parameter: log [!]<logoption> [[!]<logoption>]...
  
  Specifies what types of events are to be logged to the logfile.
  
    accounting     - Write an accounting record to the log for each player
                     who disconnects.
    all_commands   - Record all commands executed except connect screen.
    bad_commands   - Record commands entered that did not match anything.
    buffer_alloc   - Record buffer allocates and frees.
    bugs           - Record internal inconsistencies found.
    checkpoints    - Record automatic database dumps.
    config_changes - Record uses of the @admin command.
    create         - Record creation of new players.
    killing        - Record uses of the kill and slay commands.
    logins         - Record connects to characters.
    network        - Record new and broken net connections.
    problems       - Record problems found with the database.
    security       - Record security-related events.
    shouts         - Record uses of the @wall command.
    startup        - Record information about game startup.
    wizard         - Record uses of dangerous commands like @toad.
    god            - Record everything done by #1.
    guest          - Record uses of all commands issued by guest
    wanderer       - Record uses of all commands issued by wanderer
    suspect        - Record uses of all commands issued by suspect
  
  See Also: log_options.

& LOGIN
  Flag: LOGIN([L]) (wizard and higher only)
  
  This flag allows the player to bypass the restrictions normally found with
  @disable logins.

& log_command_list
  Config parameter: log_command_list <cmd !cmd> (Default (none))
  
  This config parameter specifies individual commands to log.  If, for
  instance, @boot was being abused, you could use this to set up logging
  for anything or anyone who used @boot.  This parameter will accept
  wildcard name conventions.  This will add or remove to existing or from 
  existing command logging information already specified with log_command_list.
  You may use '!ALL' to clear the log_command_list.
  
  This can also log softcoded commands.
   
  Example:  @admin log_command_list=@boot @nuke @tel* +staff !@amove
            (logs all @boot, @nuke, @teleport, +staff, and removes @amove)
            @admin log_command_list=!ALL
            (this clears the log_command_list command logging parameter)
  
  See Also: log, suspect, @icmd

& login_to_prog
  Config parameter: login_to_prog <value>  (Default 1)
  
  Specifies that @programs continue even if a player QUIT's, LOGOUT's,
  or the mush @shutdowns, @reboots, or the server crashes.
  There is no danger with this parameter.
  
  See Also: PROG_ON_CONNECT TOGGLE

& noshell_prog
  Config parameter: noshell_prog <value>  (Default 0)
  
  Specifies if players (other than immortals) can shell from inside
  a @program.  In other words, if the player can use |<command> from
  inside a @program.  This can be understandably dangerous if @program
  is not carefully done.

& sidefx_maxcalls
  Config parameter: sidefx_maxcalls <value>  (Default 1000)
  
  Specifies the maximum number of sideeffects that are allowed to be
  called per command.  This helps avoid DoS based attacks.

& sidefx_returnval
  Config parameter: sidefx_returnval <value>  (Default 0)
  
  Specifies if sidefx that create items (dig, open, create), return the 
  dbref# of the item or if it returns a null.  If enabled, it returns the
  dbref#.
  
  Note:  For MUX/MUSH/PENN compatibility, it is wise to enable this.

& nospam_connect
  Config parameter: nospam_connect <value>  (Default 0)
  
  Specifies if people from FORBID sides are logged in the mushname.log file.
  Real twinkish players may try multiple connects to overload a log file and
  this config parameter will help remove that.
  
  The valid values for this are:
    0 - disabled (default)
    1 - enabled but still log site with counter once spam stops
    2 - do not log site (useful if you're being spammed by multiple sites)
   
  Keep in mind, this does not effect the MONITOR information on-line of people
  trying to connect from forbid sites, only the log file.

& noregist_onwho
  Config parameter: noregist_onwho <value>  (Default 0)
  
  This is a very simple parameter that will snuff the 'R' on register sites
  on the WHO.  There was complaints about this being annoying so this 
  parameter was done as it was a simple addition.

& lnum_compat
  Config parameter: lnum_compat <value>  (Default 0)
  
  Specifies if lnum()/lnum2() will work like MUX/PENN and return a null if 
  a '0' value is given to them.  This had to be a config parameter so that
  prior code did not break.
 
  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& log_maximum
  Config parameter: log_maximum <value>  Default: 1
  
  Specifies the number of times logtofile() can be called per command.
  This should be limited to a low number as the I/O for rapidly opening
  and closing files for logging purposes can become determental for the
  system.

& log_network_errors
  Config parameter: log_network_errors <yes/no>  (Default yes)
  
  This parameter specifies if logging of network errors should occur
  ingame.  This should not be cause of issues, but with bad network
  connectivity, this can lead to rather large logs regarding failed
  network drops.  In such a case it can be disabled.

& log_options
  Config parameter: log_options [!]<option> [[!]<option>]...
  
  Specifies the type of information to be included in each log entry.
  The possible values are:
    flags       - Include the flags set on a player or object.
    location    - Include the location of referenced players and objects.
    owner       - Include the owner of referenced players and objects.
    timestamp   - Include a timestamp in each log entry.
  See Also: log.

& logout_cmd_access
  Config parameter: logout_cmd_access [!]<option> [[!]<option>]...
  
  This parameter specifies the access for commands that can be executed at
  the connect screen.  Keep in mind, that this effects the command PERIOD
  and not JUST at the connect screen.  Examples of commands this effects
  would be WHO, DOING, INFO, etc.
  
  The following options have special meaning for permissions for commands
  for players at the connect screen:
    ignore  -- then players at the connect screen can still issue the 
               command, but connected players can not.
    dark    -- players connected can issue the command, but the command
               is 'ignored' for the connect screen.
    disable -- the command is disabled entirely equally.
  
  See Also: logout_cmd_alias

& logout_cmd_alias
  Config parameter: logout_cmd_alias <new alias> <command>
                    logout_cmd_alias <old alias> <command>
                    logout_cmd_alias <alias> !
  
  The first form specifies an alias for a command that is access at the 
  connect screen.  The second form will re-alias the alias to a new command.
  The third form will delete the alias.
  
  Examples would include WHO, DOING, INFO, QUIT, LOGOUT, etc.
  
  If you aliased 'who' to 'WHO' you can make the WHO non- case-sensitive. 
  
  See Also: logout_cmd_alias

& look_moreflags
  Config parameter: look_moreflags <yes/no>.  Default: NO
  
  Indicates whether 'examine' and it's ilk will have global attribute
  flags show up on attributes within []'s.  The default behavior is to
  have global attributes ignored.

& look_obey_terse
  Config parameter: look_obey_terse <yes/no>.  Default: YES
  
  Indicates whether or not the 'look' command obeys the TERSE flag when
  deciding how much information to display.  If set to yes, the
  terse_shows_contents, terse_shows_exits, and terse_shows_move_messages
  config options control the amount of information displayed for TERSE
  players.
 
  See Also: terse_shows_contents, terse_shows_exits, 
            terse_shows_move_messages.

& machine_command_cost
  Config parameter: machine_command_cost <number>.  Default: 64
  
  Sets the cost for running a command from a machine, as opposed to running
  it interactively.  Each command run has a one in <number> chance of being
  charged one coin for machine overhead.

& manlog_file
  Config parameter: manlog_file <string>.  Default: manual_log
  
  Specifies what the filename is that the manual @log (@log/manual) is 
  written to.  The file has to be in the current directory and a '.txt'
  extension is automatically added on whatever filename you have specified.
  Special files like 'help.txt' are protected.

& map_delim_space
  Config parameter: map_delim_space <value>.  Default: YES
  
  Verifies that the output delimeter is a space by default.  If this is
  set to 0 (or NO/FALSE), the output delimeter is defaulted to a NULL.

& match_own_commands
  Config parameter: match_own_commands <yes/no>.  Default: NO
  
  Specifies whether or not objects search themselves for $-commands when a
  command does not match an exit or an internal command.  In order for
  players to search themselves for commands, both match_own_commands and
  player_match_own_commands must be set to yes.
  See Also: player_match_own_commands, player_match_commands.

& master_room
  Config parameter: master_room <roomnum>.  Default: (none)
  
  Specifies the room that is searched for exits if a command does not match
  an exit in the current room, and for $-command if a command does not match
  any $-commands that are available to the player in his current location.
  
  See Also: global_aconnect, global_adisconnect

& max_cpu_cycles
  Config parameter: max_cpu_cycles <num>.  Default: 3
  
  Specifies the total sequential cpu slams a target may issue before higher
  security practices (cpu_secure_lvl) are issued.  If you tend to have a lot
  of abuse and are overly paranoid, you may wish to set this value to 2 or
  even 1.
  
  See Also: cpu_secure_lvl, cpuintervalchk, cputimechk, cpu

& max_dest_limit
  Config parameter: max_dest_limit <num>.  Default: 1000
  
  Specifies the maximum times a non-wizard (full wizard/bitlevel 5) may be
  able to @destroy something.  Once this limit is reached, they will no
  longer be able to issue the @destroy command.  This limit may be increased
  globally or individually per player (by using @limit).  If this value is
  set to '-1' it will default to infinite.
  
  See Also: @limit, max_vattr_limit, wizmax_vattr_limit, wizmax_dest_limit,
            vattr_limit_checkwiz, lfunction_max

& max_folders
  Config parameter: max_folders <value>.   Default: 20
  
  Specifies the total number of mail folders that a player may have at
  any given time.  The player may never have more than max_folders.

& max_lastsite_api
  Config parameter: max_lastsite_api <num>.  Default: 60
  
  Sets the maximum number of times a site can connect to the API handler
  in a given minute.  The range for this value must be between 1 and 500.
  
  The maximum average connections an API handler can accept is around 400
  on a somewhat slower system.
  
  Be aware that if you hit MAX connections for a given IP in a minute,
  that connection will automatically be set FORBID for security reasons.
  
  See Also: forbidapi_host, forbidapi_site
 
& max_lastsite_cnt
  Config parameter: max_lastsite_cnt <num>.  Default: 20
  
  Sets the maximum number of times a site can connect in a predefined period.
  If the site reaches that threshold, then depending on how the parameter
  'lastsite_paranoia' is configured will define how the site is dealt with.
  The parameter 'min_con_attempt' defines in what time frame the connections
  will be counted.
  
  See Also: lastsite_paranoia, min_con_attempt

& max_name_protect
  Config parameter: max_name_protect <num>.  Default: 0
  
  This specifies how many names a player may protect.  The value range
  is locked in between 0 and 100.  This refers to the @protect command.
  
  See Also: @protect

& max_pcreate_lim
  Config parameter: max_pcreate_lim <num>.  Default: -1 (unlimited)
  
  Sets the maximum number of pcreates allowed in a given period of time.
  The time is set by 'max_pcreate_time'.  This is to help avoid DoS based
  attacks.
  
  See Also: max_pcreate_time, register_site, register_host

& max_pcreate_time
  Config parameter: max_pcreate_time <num>.  Default: 60 (seconds)
  
  When max_pcreate_lim is a positive integer value, this tells how many
  players can be created at the connect screen in this given period
  of time.  The number allowed to be created is specified with the
  parameter 'max_pcreate_lim'.  This is to help avoid DoS based attacks.
  
  See Also: max_pcreate_lim

& max_percentsubs
  Config parameter: max_percentsubs <num>.  Default: 1000000
  
  Sets the maximum number of percent-substitutions that are allowed to
  be called in a singular command.  This includes, but is not limited to,
  ansi-substitution, %0-%9, setq registers via %q, and attribute calls
  such as %va.

& max_players
  Config parameter: max_players <num>.  Default: -1 (unlimited)
 
  Sets the maximum number of players that may be connected at any one time
  Note that wizards are allowed to login even if they would exceed the limit,
  and that this limit does not override any limits imposed by the system
  running the RhostMUSH (such as the maximum number of net connections a 
  process may have).  Players connecting when there are max_players players 
  connected receive the contents of the file named by the full_file 
  directive, and the full_motd_message (also settable via @motd/full), and 
  are disconnected.
  See Also: @motd, full_file, full_motd_message.

& max_sitecons
  Config parameter: max_sitecons <num>.  Default: 50
  
  Sets the maximum number of concurrent connections a unique site can have
  at any given time.  This is useful to avoid network spamming or DoS based
  attacks.

& max_vattr_limit
  Config parameter: max_vattr_limit <num>.  Default: 10000
  
  Specifies the maximum times a non-wizard (full wizard/bitlevel 5) may be
  able to create *new* attributes.  A new attribute is defined as an 
  attribute name that hasn't previously been created that does not exist
  in the hash table.  Thus, any attribute that was already declared or
  any attribute that is pre-defined (like @va) will not be effected by this.
  Specifying the value to '-1' makes it infinite.
  
  See Also: @limit, max_dest_limit, wizmax_dest_limit, wizmax_vattr_limit,
            vattr_limit_checkwiz, lfunction_max

& maximum_size
  Config parameter: maximum_size <value>.    Default: -1
  
  This config parameter is only alloweable in the .conf file and determines
  what limit (if any) should be placed on the cap of the total number of
  objects the database should have.  The default of '-1' specifies no limit.

& min_con_attempt
  Config parameter: min_con_attempt <num>.  Default: 60
  
  Specifies how many seconds between connections are allowed.  If the
  threshold is reached in under the time allotted, then a predetermined
  rule is used against that site.
  
  The number of connections between the threshold time is defined with
  the admin parameter 'max_lastsite_cnt' and the rule to be applied is
  defined with 'lastsite_paranoia'.
  
  See Also: lastsite_paranoia, max_lastsite_cnt

& money_lim_off
  Config parameter: money_lim_off <num>.   Default: 0
  
  Sets the ammount of gold respectable to the @depowers NOGIVE and NOSTEAL
  for the 'OFF' state.

& money_lim_gm
  Config parameter: money_lim_gm <num>.   Default: 500
  
  Sets the ammount of gold respectable to the @depowers NOGIVE and NOSTEAL
  for the 'GUILDMASTER' state.

& money_lim_arch
  Config parameter: money_lim_arch <num>.   Default: 2000
  
  Sets the ammount of gold respectable to the @depowers NOGIVE and NOSTEAL
  for the 'ARCHITECT' state.

& money_lim_counc
  Config parameter: money_lim_counc <num>.   Default: 5000
  
  Sets the ammount of gold respectable to the @depowers NOGIVE and NOSTEAL
  for the 'COUNCILOR' state.

& money_name_plural
  Config parameter: money_name_plural <string>.  Default: pennies
  
  Specifies the string to use to describe the coin of the realm when they
  are being referred to plurally (such as: 'You have <number> pennies.', where
  <number>  is not 1).
  See Also: money_name_singular.
 
& money_name_singular
  Config parameter: money_name_singular <string>.  Default: penny
  
  Specifies the string to use to describe the coin of the realm when they
  are being referred to singularly (such as: 'You found a penny!').
  See Also: money_name_plural.

& motd_file
  Config parameter: motd_file <pathname>.  Default: motd.txt
  
  Specifies the name of the file to be shown to players immediately after they
  connect to their characters.
  See Also: @readcache, newuser_file, motd_message.

& motd_message
  Config parameter: motd_message <message>.  Default: blank
  
  Sets the MOTD message that is displayed to all characters when they log in.
  This message is displayed in addition to the contents of the motd.txt
  file.  It can be changed with the @motd command and examined by the
  @listmotd command.
  See Also: @listmotd, @motd, motd_file.

& mtimer
  Config parameter: mtimer <value>.  Default: 10 (miliseconds)
  
  This specifies the queue interval that you wish to have for the timer
  for each queue slice.  The default is 10 miliseconds.  You may specify
  a multiple of 10 starting at '1' for 1 second up to 1000 for 1 milisecond.
  
  So valid values are: 1, 10, 100, 1000.
  
  Due note, due to the single threaded engine of a mush and the overhead 
  involved with all the processing and checks, setting the value to 1000
  will occasionally lag a few miliseconds and not be a true 1/1000 value.
  
  The lag will include, but not be limited to network latency.  When you
  consider that most network latency is 20 ms, 1/1000th ms will most
  likely be very noticeable :)
  
  Anything up to and including 100 should be mostly fine however, minus
  again network latency.
   
  Specifying an invalid value will revert to the previous value.
  
  Rhost's default is 10 miliseconds.
  MUX2's default is 10 miliseconds.
  PennMUSH and TinyMUSH3's default is 1 second.
  
  See Also: @ps, pid()
 
& mud_name
  Config parameter: mud_name <string>.  Default: RhostMUSH
  
  Specifies the mud name that is transmitted to a remote RWHO server when
  reporting information.
  See Also: rwho_dump_interval, rwho_host, rwho_info_port, rwho_pasword,
            rwho_transmit, muddb_name

& muddb_name
  Config parameter: mudb_name <string>.  Default:  RhostMUSH
  
  Specified the db name associeted as the base-string for the mail and
  bbs/news systems.  This includes the main db files, and the flatfile
  dump files.  This does not effect the db name the game, itself, uses.
  
  See Also: mud_name

& must_unlquota
  Config parameter: must_unlquota <value>  (Default 0)
  
  Specifies if a wizard is forced to @quota/unlock a player before they give
  them @quota.  This is done for added security incase you wish to limit
  @quota/unlock and @quota/lock to immortal or #1 access only.  This will
  then restrict who can give a locked player quota to a higher degree.
 
& mux_child_compat
  Config parameter: mux_child_compat <bool>  Default: no (0)
  
  Specifies if children() should follow the 'broken' method of mux/tm3's
  children() and return a null string if no children are found instead
  of #-1 (which follows parent()).

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& mux_lcon_compat
  Config parameter: mux_lcon_compat <bool>  Default: no (0)
  
  Specifies if lcon() returns null (an empty string) if there is no
  contents.  The default behavior is that it returns #-1 if there is
  no contents.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& newpass_god
  Config parameter: newpass_god <1|0|777>.  Default: 0 
  
  This is only valid in the config file.  If specified, it will allow
  an immortal to newpassword the #1 character ONCE during that reboot
  session.  NOTE.  This is NOT a yes/no issue.
  
  The following values are recognized:
      0    - Disabled (default).  This makes this parameter ignored.
      1    - @newpassword for #1 enabled.  It allows IMMORTAL to @newpassword
             #1 for ONE TIME ONLY during THAT BOOT CYCLE ONLY.
      777  - This will automatically newpassword #1 to 'Nyctasia'.
             This will also encrypt the password with DES encryption.
   
  Please keep in mind to disable the 'newpass_god' option in the 
  netrhost.conf file after this is properly set to avoid it being 
  re-enabled or re-set during the next reboot. 
  
  This option can not be activated via @admin.  This option can not be
  set via the admin_object.  This option MUST BE SET in the netrhost.conf
  file only!!!

& news_file
  Config parameter: news_file <path>.  Default: news.txt
  
  Specifies the name of the file containing the text used by the news
  command.
  See Also: news, news_index

& news_index
  Config parameter: news_index <path>.  Default: news.indx
  
  Specifies the name of the index file used by the news command.  This file
  must be generated by mkindex from the news file.  The contents of this
  file are read in to a hash table when the game is started and whenever a
  @readcache command is executed.
  See Also: news, @readcache, news_file

& newuser_file
  Config parameter: newuser_file <filename>.  Default: newuser.txt
  
  Specifies the file to be shown to new players immediately after they
  create their characters, in place of the MOTD file.  This file should
  contain information about the basic commands and how to get help.
  See Also: @readcache, motd_file.

& no_startup
  Config parameter: no_startup <yes/no>.  Default: no
  
  This is only valid in the config file.  This specifies if at boot/reboot
  time, if @startups will not be triggered.  

& noautoreg_host
  Config parameter: noautoreg_host <!host> <host> ... <host>
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will not be able to autoregister from that site.
  This works like 'noautoreg_site' but deals with DNS wildcard name 
  conventions.  This will add or remove to existing or from existing site 
  information already specified with noautoreg_host.  You may use '!ALL' 
  to clear the noautoreg host table.
  
  Example:  @admin noautoreg_host=*.aol.com !*.compuserve.com
            (blocks autoreg matching *.aol.com and removes *.compuserve.com)
            @admin noautoreg_host=!ALL
            (this clears the noautoreg_host list)
  
  See Also:  forbid_host, noguest_host, register_host, suspect_host, 
             validate_host, forbidapi_host, @site

& noautoreg_site
  Config parameter: noautoreg_site <site> <mask>
  
  Establishes sites that are not permitted to use autoregistration.
  This is effectively the same as forbid_site but only effects the
  built-in autoregistration.
  
  See Also: forbid_site, forbidapi_site

& noguest_host
  Config parameter: noguest_host <!host> <host> ... <host>
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will not be able to connect to guest characters.
  This works like 'noguest_site' but deals with DNS wildcard name 
  conventions.  This will add or remove to existing or from existing site 
  information already specified with noguest_host.  You may use '!ALL' 
  to clear the noguest host table.
  
  You may specify an optional ceiling of allowed connects before the
  restriction takes effect by ending in '|#'.  Like '*.aol.com|3' will allow
  3 connections from aol.com at any one time, then enforce the restriction.
  Optional ceiling restrictions are only valid for NOGUEST, REGISTER, and 
  FORBID restrictions.
  
  Example: @admin noguest_host=*.aol.com !*.compuserve.com *ego.com|3
           (no-guests any site matching *.aol.com and removes *.compuserve.com)
           (will deny guests on *ego.com if more than 3 connections are seen)
           @admin noguest_host=!ALL
           (this clears the noguest_host list)
  
  Note:  If you used a ceiling, you must specify the ceiling in removing
         the site or it will not match it.  You may use @site/list to see
         the raw site information that you can use to remove the site.
   
  See Also:  forbid_host, suspect_host, register_host, noautoreg_host, 
             validate_host, forbidapi_host, @site

& noguest_site
  Config parameter: noguest_site <site> <mask>
  
  Establishes sites that are not permitted to use the guest characters.
  This is effectively the same as forbid_site but only effects guests.
  
  See Also: forbid_site, forbidapi_site

& nonindxtxt_maxlines
  Config parameter: nonindxtxt_maxlines <value>.    Default: 200
  
  This defines the total number of lines that a non mkindx'd .txt file can have
  before it is summarilly ignored from being loaded into the mush's memory
  stack.
  
  This is a security option and should not be modified unless you know what you
  want to do.  This is intended for DoS protection.

& notify_recursion_limit
  Config parameter: notify_recursion_limit <num>.  Default: 20
 
  Sets the maximum number of times that the notify() routine may be called
  recursively.  A recursive call is made whenever a message heard by an
  object is to be forwarded to its contents.

& notonerr_return
  Config parameter: notonerr_return <yes/no>.  Default: yes
  
  This indicates if the string '#-1' will return a '0' with boolean logic
  such as not(), and(), or(), etc.  With this disabled, '#-1' is returned
  as a dbref# check and returned as '1'.

& oattr_enable_altname
  Config parameter: oattr_Enable_altname <yes/no>.  Default: no
  
  Specifies if alternate names are looked up when you move through exits.
  The alt name is defined by an attribute with the 'oattr_uses_altname'
  config parameter.
  
  See Also: oattr_uses_altname

& oattr_uses_altname
  Config parameter: oattr_uses_altname <string>.  Default: _NPC
  
  Specifies the alternate name used if oattr_enable_altname is enabled.
  The alternate name is seen with exit movement for OSUCC, OFAIL, and
  ODROP.  This is handy for RP situations.
  
  See Also: oattr_enable_altname

& objid_localtime
  Config parameter: objid_localtime <yes/no>.  Default: NO
  
  Specifies if objid should evaluate based on localtime or GMtime.
  Keep in mind if you set localtime it likely will not be portable
  to a different server or if you change the time of the system
  to another time.  Setting this to 'no' should make it compatible
  regardless of the time of the server.
  
  See Also: objid_offset

& objid_offset
  Config parameter: objid_offset <value>.    Default: 0
  
  Specifies the offset to apply to objid references incase you wish
  to move between systems and the normal method of GMtime doesn't
  seem to fully work.  It's not uncommon to have it off by 3600
  seconds based on some system settings.
  
  This is only meaningful if you have objid_localtime set to '0'.
  
  See Also: objid_localtime.
& offline_reg
  Config parameter: offline_reg <yes/no>.  Default: NO
  
  Indicates if you desire to use autoregistration.  When turned on, it
  enables the connect screen 'register' command.  The syntax of this
  command is: 'register <character> <email>'.  It is used in junction
  with register_site as it's pretty pointless to have autoregistration
  on when they can just create a character at will.

& old_elist
  Config parameter: old_elist <yes/no>.  Default: NO
  
  This forces elist() to work like the older version which would allow
  a double-eval for the first list.  This is considered a security risk
  but is allowed as a paramter for backward compatibility for games.
  
& online_reg
  Config parameter: online_reg <yes/no>.  Default: NO
  
  Indicates if you desire to use autoregistration.  When turned on, it
  enables the on-line guest characters to use the @register command
  to register for a character.  It is used in junction with register_site
  as it's pretty pointless to have autoregistration on when they can
  just create a character at will.

& open_cost
  Config parameter: open_cost <amount>.  Default: 1
  
  Indicates the cost of using the @open command to open a new exit.
  If a destination for the new exit is specified and the link is successful,
  then the link_cost is also charged.
  See Also: @open, link_cost.

& output_database
  Config parameter: output_database <pathname>.  Default: none
  
  Specifies the file to which te database is to be written when writing
  checkpoint dumps or writing the final dump after receiving a @shutdown
  command.
  See Also: @dump, @shutdown, checkpoint_database, input_database.

& output_limit
  Config parameter: output_limit <amount>.  Default: 16384
  
  Indicates the maximum number of characters that a connected player may have
  queued for output.  As queued output is normally transmitted once each
  second, this parameter limits the amount of output that can be generated by
  a single command or a set of commands executed in rapid succession.  It also
  prevents the output queues from growing without limit when the network does
  not accept new output on a particular connection or connections.  If new
  output would cause the amount of queued output to exceed this parameter,
  the oldest pending output is discarded until the amount of pending output
  is less than this parameter.

& page_cost
  Config parameter: page_cost <amount>.  Default: 10
  
  Specifies the cost of using the page command.
  See Also: page.

& null_is_idle
  Config parameter: null_is_idle <boolean>.  Default: 0
  
  This parameter, if enabled, will treat '@@' like IDLE with regards to 
  updating a player's idle time.  This is mostly because players can't
  seem to be able to do a simple modification in their client to change
  '@@' to 'idle', so this will do it for them.  
  
& num_guests
  Config parameter: num_guests <ammount>.  Default: 0
  
  Specifies the total number of guest characters allowed to connect at one 
  time.  Do note that each and every guest will be unique and that if more 
  are required, more need to be @pcreated.
  
  See Also: guest_namelist, guest_randomize

& comcost
  Config parameter: comcost <ammount>.  Default: 5
  
  Specifies the cost of using the channel system.  Do note that the channels
  'public' and 'sting' are free of charge.

& wall_cost
  Config parameter: wall_cost <ammount>.  Default: 250
  
  Specifies the cost of using a @wall if you're not privileged.
  Privalaged is defined of having at least a GUILDMASTER bit.

& paranoid_allocate
  Config parameter: paranoid_allocate <yes/no>.  Default: no

  Controls whether or not the game performs a consistency check on the entire
  set of xbuf buffers each time one is allocated or freed.  This check
  involves making sure that nobody has written to the memory immediately 
  before and after each buffer.  Normally, only the buffer being allocated or
  freed is checked.

& paranoid_exit_linking
  Config parameter: paranoid_exit_linking <yes/no>.  Default: no
  
  Specifies whether or not exits must be controlled by the enactor to be
  able to be linked.  The normal behavior is that anyone may link an unlinked
  exit and that exit will automatically be owned by the person linking it.
  With this enabled, you may only link an unlink exit if you control the
  exit and after linking, the owner remains the same (i.e.  does not change).
  
  Check help on '@link' for more information on exit linking.

& parent_follow
  Config parameter: parent_follow  <yes/no>.   Default: yes
  
  Specifies, that if you control the target, you get to see the entire parent
  chain of the target with the parents() function.
  
  Note: Setting this to no (0) will return the default behavior of requiring
        control of each parent in order to view it, which I found too 
        restrictive.
  
  
& parentable_control_lock
  Config parameter: parentable_control_lock <yes/no>.  Default: no
 
  Specifies whether or not @locks will be inheritable from their parents.

& partial_conn
  Config parameter: partial_conn <yes/no>.  Default: yes
  
  Specifies the triggering of the @aconnects when a player connects if they
  are already connected to the game on a different port/descriptor.  If this
  is disabled, then @aconnects are only triggered when someone connects
  w/o currently being on.
  
  See Also: partial_deconn

& partial_deconn
  Config parameter: partial_deconn <yes/no>.  Default: no
  
  Specifies the triggering of the @adisconnects when a player disconnects
  when they are still connected to the game on a different port/descriptor.
  If this is enabled, then @adisconnects will always be triggered when
  someone disconnects, weither they still have a player on or not.
  
  See Also: partial_conn

& paycheck
  Config parameter: paycheck <amount>.  Default: 0
  
  Specifies the default amount of money that players receive each day they
  connect.  This parameter may be overridden by setting the ALLOWANCE
  attribute on the player to a different value.
  See Also: @allowance, earn_limit, starting_money.

& pcreate_paranoia
  Config parameter: pcreate_paranoia <value>.  Default: 0 (none)
  
  Specifies the paranoia level you wish to have for connect screen creation.
  The default of '0' will issue no additional protection.  The following
  values exist:
      1  - if threshold of connect screen creations are reached, set the
           site register.
      2  - if threshold of connect screen creations are reached, set the
           site forbid.
  
  The admin param 'max_pcreate_lim' handles the max connections.  The
  admin param 'max_pcreate_time' handles the min time reached.
    
  See Also: max_pcreate_lim, max_pcreate_time, pcreate_paranoia,
            lastsite_paranoia

& pemit_any_object
  Config parameter: pemit_any_object <yes/no>.  Default: no
  
  Indicates whether or not players may @pemit to faraway objects they do not
  control.  It does not affect @pemits to faraway players, the
  pemit_far_players directive is used for that purpose.
  See Also: pemit_far_players.

& pemit_far_players
  Config parameter: pemit_far_players <yes/no>.  Default: no
  
  Controls whether or not players may use the @pemit command to send messages
  to other connected players that are not in the same room.  The rules and
  costs for this form of @pemit are the same as for page.
  See Also: pemit_any_object.

& penn_playercmds
  Config parameter: penn_playercmds <yes/no>.  Default: no
  
  Indicates that if player_match_own_commands, player_match_commands, and 
  match_own_commands are all enabled, that players will only be able to use
  $commands on other players if they are in their inventory.  They will still
  be able to use their own $commands.

& penn_setq
  Config parameter: penn_setq <yes/no>.   Default: no
  
  Enables setq/setr compatibility with PennMUSH.  This effectively allows
  the use of:
                  setq(label,blah) in addition to setq(1-9/a-z,blah)
                  setr(label,blah) in addition to setr(1-9/a-z,blah)
  
  This effectively mimic's the Rhost built in setq(+,blah,label) option.
  This will still allow the setq/setq with the + and ! options to work
  as expected.

& penn_switches
  Config parameter: penn_switches <yes/no>.  Default: no
  
  Indicates if you wish to use the PENN method of switch() and switchall() or
  the MUSH/MUX/RHOST method of switch() and switchall().  If you decide to
  use the PENN method, then, like @switch, it will evaluate < and > as 
  a lessthan and greaterthan match conditionals.  The default is to have
  PENN compatibility disabled.
  
  The default behavior of this is to use integer math only.  If you wish
  to allow floating point math, float_switches must also be enabled.
  
  See Also: float_switches
  
& permit_site
  Config parameter: permit_site <addr> <mask>.
  
  Indicates that connections are to be accepted and registration is not to be
  enforced from sites whose address matches the specified address when ANDed
  with the mask.  This directive is typically used to enable connections from
  a few selected hosts or subnets that would otherwise be disallowed by a
  forbid_site directive.  The default is all sites permitted, none forbidden.
  See Also: badsite_file, forbid_site, register_site, forbidapi_site, 
            SITE LISTS.

& player_attr_default
  Config parameter: player_attr_default <dbref>.  Default: -1
  
  Specifies the default dbref that internal attributes that are processed
  through the standard 'handler' are evaluated.  The original desc of the
  target is passed as '%0' into this description.  This effects built-ins
  such as @succ, @osucc, @desc, @odesc, etc.  This is for players only.
  
  You need to set the attribute (that will be passed as %0) DEFAULT to
  use attribute defaults on this object.
  
  See Also: room_attr_default, thing_attr_default, exit_attr_default

& player_flags
  Config parameter: player_flags <flags>.  Default: blank
  
  Modifies the set of flags that a player receives when it is created via the
  @pcreate command or via the connection screen.  Flags prefixed by a ! remove
  the indicated flag from the set.  
  
  Note that flag names are case sensitive and in lower case.
  
  See Also: @list, player_toggles, exit_flags, robot_flags, room_flags, 
            thing_flags.

& player_toggles
  Config parameter: player_toggles <toggles>.  Default: blank
  
  Modifies the set of toggles that a player receives when it is created via the
  @pcreate command or via the connection screen.  Toggles prefixed by a ! 
  remove the indicated toggle from the set.  
  
  Note that toggle names are case sensitive and in lower case.
  
  See Also: @list, player_flags, exit_toggles, robot_toggles, room_toggles, 
            thing_toggles.

& player_dark
  Config parameter: player_dark <value>.  Default: 1
  
  When set, allows players to set themselves dark and to effect objects puppet
  and listening dark in such a manner that wizards normally are (more or less)
  When off, it behaves differently by not allowing players to set themselves
  dark and by ignoring dark flags on puppets and any listening object.

& player_listen
  Config parameter: player_listen.  Default: no
  
  Indicates whether the Listen, Aahear, Ahear, and Amhear attributes on
  player objects are to be obeyed.
  
  Note:  This admin parameter is dangerous to set as it could cause recursion!

& player_match_own_commands
  Config parameter: player_match_own_commands <yes/no>.  Default: no
  
  Specifies whether or not players should check themselves for $-commands.
  This parameter is only checked if the match_own_commands parameter is
  set to yes.
  See Also: match_own_commands. player_match_commands

& player_match_commands
  Config parameter: player_match_commands <yes/no>. Default: no
  
  Specifies whether or not players should be checked for $-commands or
  any type of listen command (such as ^commands), @listen, or @ahear.
  See Also: match_own_commands, player_match_own_commands

& player_name_spaces
  Config parameter: player_name_spaces.  Default: 0
  
  Sets the ability for players to have spaces in their names.

& player_parent
  Config parameter: player_parent <dbref>.  Default: #-1
  
  Specifies what the default global parent should be.  If a valid global
  player_parent is defined, whenever new player are created, either by
  @pcreate or at the connect screen or any other method, they will
  automatically be parented to the specified dbref#.  Permissions will not
  be checked.
  
  See Also: room_parent, thing_parent, exit_parent, global_parent_obj,
            global_parent_room, global_parent_thing, global_parent_exit,
            global_parent_player

& player_queue_limit
  Config parameter: player_queue_limit.  Default: 100
  
  Sets the maximum number of commands that non-wizard players may have on the
  queue at one time.  An attempt to queue more commands than allowed will
  halt the object performing the command.
  
  See Also: wizard_queue_limit

& player_quota
  Config parameter: player_quota <amount>.  Default: 1
  
  Sets how much quota it costs to create a robot player (and also how much the
  remaining quota is increased when a robot is @destroyed.
  See Also: @quota, exit_quota, room_quota, thing_quota, QUOTAS.

& player_starting_home
  Config parameter: player_starting_home.  Default: <player_starting_room>
  
  Specifies the room to which the home of new players is set.  If this
  parameter has not been set, then the value of the player_starting_room
  parameter is used instead.
  See Also: default_home, player_starting_room, @pcreate, player_flags.

& player_starting_room
  Config parameter: player_starting_room.  Default: 0
  
  Specifies the room that new players start out in.  If the
  player_starting_home parameter has not been set, then player_starting_room
  is used for both.
  See Also: player_starting_home, @pcreate, player_flags.

& plushelp_file
  Config parameter: plushelp_file <path>.  Default: plushelp.txt
  
  Specifies the name of the file containing the text used by the +help command.
  
  See Also: help, plushelp_index, help_file, help_index

& plushelp_index
  Config parameter: plushelp_index <path>.  Default: plushelp.indx
  
  Specifies the name of the index file used by the +help command.  This file
  must be generated by mkindex from the wizard +help file.  The contents of
  this file are read in to a hash table when the game is started and whenever
  a @readcache command is executed.
  
  See Also: help, @readcache, plushelp_file, help_file, help_index

& proxy_checker
  Config parameter: proxy_checker <bitwise>.    Default: 0
  
  The proxy_checker is a bitwise mask to allow optional proxy detection and
  possible blockiing of sites that match a proxy.  The proxy detection is
  semi-accurate, will not detect all proxies, and can give false positives
  for other non-proxy sites.  Phone-based connections will be seen as
  proxies (since they essentially are).
  
  The following values exist:
    0  - Disable the checker alltogether (default)
    1  - Just detect and alert possible proxies.
    2  - Disallow guest connections from the possible proxies.
    4  - Disallow registration (player creation) from the possible proxy.
    6  - (2 & 4) essentially disallow guest and registration.
  
  Due to the fact this is hit and miss, there is no method for forbidding
  for the proxy checker.  Plese be aware, as this WILL give you false
  positives, issuing option 2 or 4 (or an option of 6 which combines them)
  can effectively block innocent players.  The option however, is there
  anyway.
  
  You may use the @admin site restrictions 'passproxy_site' and 
  'passproxy_host' to set up site restrictions that automatically bypass
  these proxy checks.
  
  See Also: passproxy_site, passproxy_host, @site, @admin

& api_port
  Config parameter: api_port <port>.  Default: -1
  
  Specifies the IP port on which the API handler for the game listens 
  for new connections.  This must be a unique port ID and not match
  the other 'port' config option.
  
  See Also: ip_address, port, api_nodns

& api_nodns
  Config parameter: api_nodns <boolean>.  Default: 0
  
  Specifies that API connections should not use the DNS lookup.  Please
  not that AUTH lookups automatically do not occur for API connections.
  
  See Also: api_port, @blacklist, blacklist_nodns.txt

& port
  Config parameter: port <port>.  Default: 6250
  
  Specifies the IP port on which the game listens for new connections.
  See Also: ip_address, api_port.

& posesay_funct
  Config parameter: posesay_funct <yes/no>.  Default: no
  
  Specifies if the SPEECH_PREFIX and SPEECH_SUFFIX attributes evaluate
  functions.  As this could potentially be cpu intensive, by default this
  is disabled.  If these attributes break cpu alerts, the cpu alerter
  will stop it then set the attribute NO_COMMAND so it won't be 
  processed again.
  
& postdump_message
  Config parameter: postdump_message <message>.  Default: blank
  
  Sets the message that is sent to everyone after a database dump
  whether automatically or via the @dump command.
  See Also: @dump, dump_message.

& power_access
  Config parameter: power_access <power> [!]<privilege> [[!]<privilege>]...
  
  Changes the access rights to the named power.
  See Also: @list powers, PERMISSIONS.

& public_flags
  Config parameter: public_flags <yes/no>.  Default: yes
  
  If enabled, indicates that players may get the flags of any object with the
  flags() function call.  Otherwise, they may only get the flags for objects
  that are examinable by them.  This parameter also affects ltoggles() and
  the like as well.
  
  See Also: flags().

& power_objects
  Config parameter: power_objects <boolean>.  Default: 0
  
  If enabled, then non-players will be checked for @powers and @depowers in
  addition to the owner.  The higher power (for @power) or harsher restriction
  (for @depower) between the two will be chosen.
  
  This is required for the @api command and the API subsystem to function.
  
  See Also: @api
  
& protect_addenh
  Config parameter: protect_addenh <boolean>.  Default: 0
  
  If enabled, allows @protect/add to be given an argument to add names to and
  not just the current player's name.
  
& queue_active_chunk
  Config parameter: queue_idle_chunk <num>.  Default: 0
  
  Specifies the number of commands to be run from the player queue when the
  check for network traffic indicates that there is data needing to be
  read from or written to the network.
  See Also: queue_idle_chunk.

& queue_compatible
  Config parameter: queue_compatible <yes/no>.  Default: no
  
  Specifies if the Semaphore count is allowed to go negative.  If enabled,
  then Semaphore is allowed to be decremented by one every time @notify
  is called, weither you have anything to queue or not.  Otherwise, it
  will not decrement this attribute.

  See Also: brace_compatibility, break_compatibility, format_compatibility,
            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,
            nand_compat, queue_compatible

& queue_idle_chunk
  Config parameter: queue_idle_chunk <num>.  Default: 3
  
  Specifies the number of commands to be run from the player queue when the
  check for network traffic indicates that there is no data needing to be
  read from or written to the network.
  See Also: queue_active_chunk.

& quiet_look
  Config parameter: quiet_look <yes/no>.  Default: yes
  
  Indicates whether or not players are shown the attributes set on an object
  when they look at it.  Best left enabled.

& quiet_whisper
  Config parameter: quiet_whisper <yes/no>.  Default: yes
  
  Indicates whether or not whispers are completely invisible except to the
  whispered-to player, or if a '<whisperer> whispers something to
  <recipient>.' message is displayed to everyone else in the same room.
  See Also: whisper.

& quit_file
  Config parameter: quit_file <filename>.  Default: quit.txt
  
  Specifies the name of the file that is displayed to users after they QUIT
  but before the network connection is closed.
  See Also: QUIT, @readcache.

& quota_cost
  Config parameter: quota_cost <amount>.  Default: 1
  
  Indicates how much adding one object to the database charges against the
  player's quota.
  See Also: @create, @destroy, @dig, @open, @quota, QUOTAS.

& quotas
  Config parameter: quotas <yes/no>.  Default: no
  
  Indicates whether or not building quotas are enforced and maintained.
  Quotas are stored as a relative number, ie. number of objects that the
  player may create, not the total number that the player may create.
  If quotas are turned off and turned back on later, any building or
  @destroying that occurs in the interim does not affect the quotas.
  See Also: @allquota, @create, @destroy, @dig, @open, @quota, QUOTAS,
            quota_cost.

& read_remote_desc
  Config parameter: read_remote_desc <yes/no>.  Default: no
  
  Indicates whether or not the descriptions of faraway objects are available
  to players that don't control them via the examine command and get()
  function.
  See Also: examine, get().

& read_remote_name
  Config parameter: read_remote_name <yes/no>.  Default: no
  
  Indicates whether or not the names of faraway objects are available
  to players that don't control them via the examine command and get()
  function.
  See Also: examine, get().
 
& recycling
  Config parameter: recycling <yes/no>.  Default: yes
  
  Indicates whether or not object destruction, recycling, reuse is enabled.
  Don't change it.

& register_create_file
  Config parameter: register_create_file <filename>.  Default: create_reg.txt
  
  Specifies the name of the file that is shown to players who attempt to
  create a new character when registration is in force from their site.
  See Also: @list_file, @readcache, register_site.
 
& register_host
  Config parameter: register_host <!host> <host> ... <host>
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will be marked as registration and will not be able
  to create a character.  This works like 'register_site' but deals with DNS 
  wildcard name conventions.  This will add or remove to existing or from 
  existing site information already specified with register_host.  You may 
  use '!ALL' to clear the register host table.
  
  You may specify an optional ceiling of allowed connects before the
  restriction takes effect by ending in '|#'.  Like '*.aol.com|3' will allow
  3 connections from aol.com at any one time, then enforce the restriction.
  Optional ceiling restrictions are only valid for NOGUEST, REGISTER, and 
  FORBID restrictions.
  
  Example: @admin register_host=*.aol.com !*.compuserve.com *ego.com|3
           (registers any site matching *.aol.com and removes *.compuserve.com)
           (will register cons on *ego.com if more than 3 connections are seen)
           @admin register_host=!ALL
           (this clears the register_host list)
  
  Note:  If you used a ceiling, you must specify the ceiling in removing
         the site or it will not match it.  You may use @site/list to see
         the raw site information that you can use to remove the site.
  
  See Also:  forbid_host, suspect_host, noguest_host, noautoreg_host, 
             validate_host, forbidapi_host, @site

& register_site
  Config parameter: register_site <addr> <mask>.
  
  Indicates that registration is to be enforced for sites whose address
  matches the specified address when ANDed with the mask.
  See Also: forbid_site, forbidapi_site, noguest_site, permit_site, 
            REGISTRATION, SITE LISTS.

& regtry_limit
  Config parameter: regtry_limit <count>.  Default: 1
  
  Specifies the number of times that a user is allowed to try to register
  for a character before that command is disabled for that particular
  connection.

& restrict_home
  Config parameter: restrict_home <value>.  Default: 0 (unrestricted)
  
  Specifies the restrictions that the commands 'home' and 'go home' will 
  entitle.  As 'home' is a special command it is not accessable with the
  normal '@admin access' parameter.  Thus, this parameter has been added
  to alleviate that missing functionality.  To set the permission, you must
  add the values together (& mask) so that the total value will include
  all the values.  The following values exist:
  
    UNRESTRICTED ............ 0            IGNORE ALL ................ 256
    GOD & HIGHER ............ 1            IGNORE UPTO IMMORTAL ...... 16384
    IMMORTAL & HIGHER ....... 8            IGNORE UPTO WIZARD ........ 8192
    WIZARD & HIGHER ......... 2            IGNORE UPTO COUNCILOR ..... 4096
    COUNCILOR & HIGHER ...... 32           IGNORE UPTO ARCHITECT ..... 2048
    ARCHITECT & HIGHER ...... 4            IGNORE UPTO GUILDMASTER ... 1025
    GUILDMASTER & HIGHER .... 64           IGNORE MORTAL ............. 512
    ROBOT FLAG .............. 16           
  
  To set up permissions so that only things set robot and councilors could
  use it you would type the command:
  
    @admin restrict_home=48
  
  See Also: access, function_access, restrict_home2
    
& restrict_home2
  Config parameter: restrict_home2 <value>. Default: 0 (unrestricted)
  
  Allows distabling the home command for players set NO_CODE. If this
  parameter is set to 1, those players will not be able to go home.

& restrict_sidefx
  Config parameter: restrict_sidefx <value>.  Default: 0 (unrestricted)
  
  Specifies the bitlevel that is able to use the side-effect functions.
  The side-effect functions are:
      TEL    SET    PEMIT    LINK    CREATE    DIG    OPEN    EMIT
      OEMIT  CLONE  LEMIT    PARENT  LOCK      REMIT  WIPE    DESTROY
      ZEMIT  NAME
  
  The values you can set for restrictions are as follows:
    0 - open (no restrictions)     4 - Councilor and higher
    1 - Non-Wanderers/Non-Guests   5 - Royalty and higher
    2 - Guildmaster and higher     6 - Immortal and higher
    3 - Architect and higher       7 - God only
  
  Setting the value above 7 basically makes it inaccessable by anyone.
  
  See Also: sideeffects

& retry_limit
  Config paramater: retry_limit <count>.  Default: 3
  
  Specifies the number of times that a user is allowed to try to connect to
  an existing player before being disconnected.
  See Also: conn_timeout.
 
& robot_cost
  Config paramater: robot_cost <amount>.  Default: 1000
  
  Specifies the cost of using the @robot command to create a robot.
  See Also: @robot, ROBOT.

& robot_flags
  Config parameter: robot_flags <flags>.  Default: ROBOT
  
  Modifies the set of flags that a robot receives when it is created via
  the @robot command.  Flags prefixed by a ! remove the indicated flag from
  the set.
  
  Note that flag names are case sensitive and in lower case.
  
  See Also: @list, robot_toggles, exit_flags, player_flags, room_flags, 
            thing_flags.

& robot_toggles
  Config parameter: robot_toggles <toggles>.  Default: blank
  
  Modifies the set of toggles that a robot receives when it is created via
  the @robot command.  Toggles prefixed by a ! remove the indicated toggle from
  the set.
  
  Note that toggle names are case sensitive and in lower case.
  
  See Also: @list, robot_flags, exit_toggles, player_toggles, room_toggles, 
            thing_toggles.

& robot_speech
  Config parameter: robot_speech: <yes/no>.  Default: yes
  
  Indicates whether or not robot characters are allowed to use the speech,
  pose, and emit commands in areas not controlled by their owner.
  See Also: @robot, ROBOT.

& room_aconnect
  Config parameter: room_aconnect <value>.  Default: 0
  
  Specifies if individual rooms (and their parents) trigger @aconnects
  when a player connects at that location.  This follows standards for
  dark/wizcloak/supercloak.
  
  See Also: room_adisconnect

& room_adisconnect
  Config parameter: room_adisconnect <value>.  Default: 0
  
  Specifies if individual rooms (and their parents) trigger @adisconnects
  when a player disconnects at that location.  This follows standards for
  dark/wizcloak/supercloak.
  
  See Also: room_aconnect

& room_attr_default
  Config parameter: room_attr_default <dbref>.  Default: -1
  
  Specifies the default dbref that internal attributes that are processed
  through the standard 'handler' are evaluated.  The original desc of the
  target is passed as '%0' into this description.  This effects built-ins
  such as @succ, @osucc, @desc, @odesc, etc.  This is for rooms only.
  
  You need to set the attribute (that will be passed as %0) DEFAULT to
  use attribute defaults on this object.
  
  See Also: exit_attr_default, thing_attr_default, player_attr_default

& room_flags
  Config parameter: room_flags <flags>.  Default: blank
  
  Modifies the set of flags that a room receives when it is @dug.
  Flags prefixed by a ! remove the indicated flag from the set.
  
  Note that flag names are case sensitive and in lower case.
  
  See Also: @list, room_toggles, exit_flags, player_flags, robot_flags, 
            thing_flags.

& room_toggles
  Config parameter: room_toggles <toggles>.  Default: blank
  
  Modifies the set of toggles that a room receives when it is @dug.
  Flags prefixed by a ! remove the indicated toggle from the set.
  
  Note that toggle names are case sensitive and in lower case.
  
  See Also: @list, room_flags, exit_toggles, player_toggles, robot_toggles, 
            thing_toggles.

& room_parent  
  Config parameter: room_parent <dbref>.  Default: #-1
  
  Specifies what the default global parent should be.  If a valid global
  room_parent is defined, whenever new rooms are @dug, they will
  automatically be parented to the specified dbref#.  Permissions will not
  be checked.
  
  See Also: player_parent, thing_parent, exit_parent, global_parent_obj,
            global_parent_room, global_parent_thing, global_parent_exit,
            global_parent_player

& room_quota
  Config parameter: room_quota <amount>.  Default: 1
  
  Sets how much quota it costs to dig a room (and also how much the
  remaining quota is increased when a room is @destroyed.
  See Also: @quota, exit_quota, player_quota, thing_quota, QUOTAS.

& rooms_can_open
  Config parameter: rooms_can_open <yes/no>.  Default: no
  
  When this config parameter is set to yes/1, rooms are able to use the
  @open command and open() function (if sideeffects are enabled).
  This helps with MUX compatiblilty. The resulting new exit will be owned
  by the owner of the room, and will appear in the room opening it.

& roomlog_path
  Config parameter: roomlog_path <string>.  Default: roomlogs
  
  Specifies the path (based off the game directory) where room logs
  are kept.  Room logs are from the LOGROOM toggle.

& rwho_data_port
  Config parameter: rwho_data_port <number>.  Default: 0
  
  Sets the port number that is used to retrive RWHO information from the
  remote RWHO server in response to a user entering the RWHO command.
  If zero, the RWHO command is disabled.  Use of this parameter is *STRONGLY*
  discouraged unless you are on the same local network as the RWHO server,
  as network problems and delays will hang the RhostMUSH, affecting all 
  connected users.  Support for the RWHO command is a compile-time option.
  See Also: RWHO, rwho_host.

& rwho_dump_interval
  Config parameter: rwho_dump_interval <secs>.  Default: 241
  
  Sets the number of seconds between RWHO dumps, during which the RhostMUSH 
  sends an 'I am alive' message and a list of all connected users to the 
  remote RWHO server.
  See Also: mud_name, rwho_host, rwho_info_port, rwho_password, rwho_transmit.

& rwho_host
  Config parameter: rwho_host <hostname/ip_address>.  Default: 36.21.0.69
  
  Sets the host name or IP address of the remote RWHO server.
  See Also: mud_name, rwho_data_port, rwho_info_port, rwho_password,
            rwho_transmit.

& rwho_info_port
  Config parameter: rwho_info_port <number>.  Default: 6888
  
  Sets the port number to be used when sending data to the remote RWHO
  server.
  See Also: mud_name, rwho_host, rwho_password, rwho_transmit.

& rwho_password
  Config parameter: rwho_password <string>.  Default: something wrong.
  
  Sets the password that is used when sending data to a remote RWHO server.
  You must receive the value for this parameter from the administrator
  of the RWHO server that you are using.
  See Also: mud_name, rwho_host, rwho_info_port, rwho_transmit.

& rwho_transmit
  Config parameter: rwho_transmit <yes/no>.  Default: no
  
  Indicates whether or not to transmit data to a remote RWHO server.
  See Also: @list, mud_name, rwho_host, rwho_info_port, rwho_password.

& sacrifice_adjust
  Config parameter: sacrifice_adjust <amount>.  Default -1.
  
  This parameter is part of the formula that is used to determine an object's
  value given the amount spent on its creation.  The formula is:
 
     value = (cost / sacrifice_factor) + sacrifice_adjust.
 
  The inverse formula is used to determine how much the owner receives when
  @destroying an object.
  See Also: @create, @destroy, SACRIFICING, sacrifice_factor.

& sacrifice_factor
  Config parameter: sacrifice_factor <amount>.  Default 5.
  
  This parameter is part of the formula that is used to determine an object's
  value given the amount spent on its creation.  The formula is:
 
     value = (cost / sacrifice_factor) + sacrifice_adjust.
 
  The inverse formula is used to determine how much the owner receives when
  @destroying an object.
  See Also: @create, @destroy, SACRIFICING, sacrifice_adjust.

& safe_wipe
  Config parameter: safe_wipe <yes/no>.  Default: no
  
  This parameter specifies if the SAFE and INDESTRUCTABLE flags will stop
  @wipe from working on that specific target that has either of those flags.

& safer_ufun
  Config parameter: safer_ufun <yes/no>.  Default: no
  
  If this is enabled, then any attribute that is evaluated on something that
  you do not control will be evaluated either at your level or the object
  level, whatever level is the LOWER level.  This only impacts items that
  are inherit.
  
  See Also: unsafe (attribute flag)

& unsafe
  See: 'help attribute flag'

& safer_passwords
  Config parameter: safer_passwords <yes/no>.  Default: no
  
  This parameter will enforce harder passwords to be set.  When enabled, all
  new passwords will have to be at least 5 (for DES) or 14 (for SHA512)  
  characters long, have at least one lowercase and uppercase letter, and 
  require a special character which is non-alphanumeric or ', or -.
  
  DES passwords are 8 characters or less.
  
  SHA512 passwords (default) are 160 characters or less.
  
  Both passwords will use a simplistic entropy check that enforces non
  sequential passwords of uniqueness.
 
  Note:  Guest players still are allowed 'guest' as their password.
  
  See Also: @password, @newpassword

& sconnect_cmd
  Config parameter: sconnect_cmd <string>.   Default: (NULL)
  
  This will specify the special command that will allow changing the 
  percevied hostname of the currently connected socket.  This is intended
  to be used with SCONNECT or similar SSL proxy software to change the
  IP address of the incoming connection.  The command is CASE SENSITIVE
  and can be up to 31 characters long.  It is strongly recommended to
  make this something hard to guess, long, and randomized.
  
  Only sites that match the sconnect_host parameter will be able to
  be matched against this command.  If sconnect_host is not set to
  anything it will default to localhost.
  
  Sites that manage to figure out your sconnect cmd will cause SSL 
  connectivity to be disabled as it does this for DoS/intrusion protection. 
  
  Only sites that pass sconnect_host can attempt to issue your
  unique key for SCONNECT.
   
  This requires sconnect_reip to be enabled.
  
  See Also: sconnect_host, sconnect_reip

& sconnect_reip
  Config parameter: sconnect_reip <on/off>    Default: off (0)
  
  This will enable the ability to use SCONNECT re-iping of the
  currently connected descriptor.  If this is enabled, then the
  command matching 'sconnect_cmd' will be used to specify the new
  IP/DNS address you wish displayed for that currenct connection.
  
  This is intended for SCONNECT or similar proxy connections to
  the mush.
  
  See Also: sconnect_cmd, sconnect_host

& sconnect_host
  Config parameter: sconnect_host <host(s)>   Default: localhost
  
  This specifies the hosts that you wish to be allowed to use
  the sconnect_cmd command to remap what the displayed IP/DNS
  address that the connected player is coming from.  This is
  intended for SCONNECT or proxy connections where you wish
  to hard-set the real IP of where they are coming from.
  
  See Also: sconnect_cmd, sconnect_reip 
  
& search_cost
  Config parameter: search_cost <amount>.  Default: 100
  
  Specifies how much commands that scan the entire database (such as @find,
  @search, and stats with a playername) cost.
  See Also: stats, @find, @search.

& secure_atruselock
  Config parameter: secure_atruselock <yes/no>.  Default: no
  
  Specifies if ATTRIBUTE USELOCKS (see help attribute uselock) can be set
  globally without restriction, or if it will require the IMMORTAL ONLY
  @toggle 'ATRUSE' to be set on the target before they can set attributes
  USELOCK.  This may or may not be required because attribute uselocks,
  if abused, can eat up some cpu utilization (but nothing to overly hang
  because of the CPU protections).

& secure_dark
  Config parameter: secure_dark <yes/no>.  Default: no
  
  Specifies weither non-wizards (below level 5) can set the dark flag
  on themselves.  Keep in mind that the admin parameter 'player_dark'
  if disabled will make this flag moot.

& secure_functions
  Config parameter: secure_functions <value>.  Default: 0
  
  Specifies the or-mask of the functions you want to improve security on.
  Normally, these functions will be evaluated as per the enactor when
  fetching attributes from a foreign location.  With this enabled, it will
  evaluate as per the target in question that it's fetched from.  This is
  given as an admin parameter so that compatibility does not break.
  
  Valid or-masks are as follows:
    FOREACH    -  1      WHILE      -  2       FOLD       -  4
    FILTER     -  8      MAP        - 16       STEP       - 32
    MIX        - 64
  
  To enable enhanced security on FOREACH and MIX you would use '65'.
  Example:
    > @admin secure_functions=65
  
  @list options will display the current settings for this parameter.
  
  See Also: @list

& secure_jumpok
  Config parameter: secure_jumpok <value>.  Default: 0
  
  Specifies the permissions of someone being able to set the JUMP_OK flag.
  The following exist for permission levels:
     0  - Everyone can set it on everything.
     1  - Mortals can only set it on type ROOMS.
     2  - Architect and higher can set it only.
     3  - Architects can only set it on type ROOMS.
     4  - Councilors and higher can set it only.
     5  - Councilors can only set it on type ROOMS.
     6  - Royalty and higher can set it only.
     7  - Royalty can only set it on type ROOMS.
     8  - Immortal and higher can set it only.

& see_owned_dark
  Config parameter: see_owned_dark <yes/no>.  Default: yes
  
  Specifies whether or not players see their own DARK objects when they
  look at a room.  It does not affect the inventory or examine commands,
  both of which show all objects.

& sha2rounds
  Config parameter: sha2rounds <value>.    Default: 5000
  
  This specifies the rounds of recursion that the SHA2 encryption for
  passwords will use when encrypting passwords.  Please be aware that
  this is arthremetically expensive and the larger the value the longer
  it takes to both encrypt and decrypt passwords.  5000 is generally
  considered safe and is actually the default standard for UNIX system
  passwords for the Linux archtype.
  
  If you're paranoid you may set a higher range, up to 999999.
  
  This requires GLIBC 2.7 or higher.  If you do not have the right
  version of GLIBC it will fall back to the much less secure, but
  viable DES encryption method.
 
& showother_altname
  Config parameter: showother_altname <yes/no>.  Default: no
  
  This config parameter specifies if people can see 'Equipment' that a player
  has by looking at them.  If this is toggled on, anything that a player
  has that is toggled WORN or WIELDED will show up as Equipment.

& shs_reverse
  Config parameter: shs_reverse <yes/no>.  Default: no
  
  This config parameter specifies if the SHA encryption via digest() is
  in SHS_REVERSE mode.  Some systems reverse the encryption methodology
  and this is to allow it to be compatable to systems that do.
  
  This is only effective when OpenSSL is not enabled by default.
  This is only meaningful to digest() and the SHA code.

& sideeffects
  Config parameter: sideeffects <value>.  Default: 32 (just LIST)
  
  This config parameter specifies what side-effects you want enabled.

  Sideeffects may either be specified through a space delimited list
  of keywords (i.e. OPEN SET CREATE) or through the use of a bitmask.
  
  The following is a list of keywords and their bitmask equivalents:
#define SIDE_EXECSCRIPT  0x04000000 /* execscript() sideeffect */
#define SIDE_ZONE        0x08000000 /* zone() sideeffect function */
#define SIDE_LSET        0x10000000 /* lset() sideeffect function */
#define SIDE_TOTEMSET    0x20000000 /* totemset() sideeffect function */

  
  none    - 0    OPEN    - 128    WIPE     - 32768    MOVE       - 8388608
  SET     - 1    EMIT    - 256    DESTROY  - 65536    CLUSER_ADD - 16777216
  CREATE  - 2    OEMIT   - 512    ZEMIT    - 131072   MAILSEND   - 33554432
  LINK    - 4    CLONE   - 1024   NAME     - 262144   EXECSCRIPT - 67108864
  PEMIT   - 8    PARENT  - 2048   TOGGLE   - 524288   ZONE       - 134217728
  TEL     - 16   LOCK    - 4096   TXLEVEL  - 1048576  LSET       - 268435456
  LIST    - 32   LEMIT   - 8192   RXLEVEL  - 2097152  TOTEMSET   - 536870912
  DIG     - 64   REMIT   - 16384  RSET     - 4194304
     
  To enable both SET and OPEN using a bitmask you would set the value
  to '129' (128 + 1).
  
  To enable all of MUX's side-effects:  131135     (or keyword MUX)
  To enable all of PENN's side-effects: 458719     (or keyword PENN)
  To enable all side-effects:           1073741823 (or keyword ALL)
  To disable all side-effects:          0          (or keyword NONE)
  
  When specifying sideeffects using keywords, the '!' operand can be
  used to negate a given sideeffect (i.e. !OPEN)

  'help sideeffects' will show you what goes to what.
  'wizhelp sideeffects_examples' will give examples of usage.
  
  See Also: restrict_sidefx, sideeffects_txt, sideeffects_examples

& sideeffects_examples
  Explanatory Field Only:
   
  Compatability options:
    PENN = SET CREATE LINK PEMIT TEL DIG OPEN EMIT OEMIT CLONE PARENT
           LOCK LEMIT REMIT WIPE ZEMIT NAME
    MUX  = SET CREATE LINK PEMIT TEL LIST ZEMIT
  
  Bitmask Examples:
    SET, CREATE, MOVE     : 1 + 2 + 8388609 = 8388611
    PARENT, LEMIT, TOGGLE : 2048 + 8192 + 524288 = 534528
  
  Keyword Examples:
    SET, CREATE, MOVE     : SET CREATE MOVE
    PARENT, LEMIT, TOGGLE : PARENT LEMIT TOGGLE
    PENN but not OPEN     : PENN !OPEN
    MUX and MOVE          : MUX MOVE
    
  See Also: restrict_sidefx, sideeffects_txt, sideeffects
  
& sideeffects_txt
  Config parameter: sideeffects_txt   (no arguments)
  
  This is used to display (via the config() function) the sideeffects
  that are currently being used.  This is only for display, and is
  intended to give a user-friendly string list of the parameters.
  
  See Also: sideeffects

& signal_action
  Config parameter: signal_action <default|resignal|retry>.  Default: default
  
  Specifies what action to take when a fatal signal is received.  The
  possibilities are:
     default  - Don't catch fatal signals.  Nothing will be cleaned up and a
                coredump will be produced.
     resignal - Log the error, produce a panic dump, close all files and
                network connections, and resignal the signal from the signal
                handler.  The second instance of the signal will produce a
                coredump, although the portion of the stack before the signal
                may be unreadable.
     retry    - Log the error, produce a panic dump, close all files and
                network connections, and return to the point where the signal
                originated.  Retrying the failed operation should produce
                a coredump, although the stack may or may not be readable.
  
  See Also: @admin, signal, signal_object, signal_object_type, signal_crontab

& signal_crontab
  Config parameter: signal_crontab <bool>  Default: no (0)
  
  This parameter specifies if you load in a predefined 'cron' file at the
  signal.  This is useful for tying in outside mush processing into the
  standard queue cycle.  For example, tying in the unix crontab right
  into the mush itself.
  
  The file that is read is in the game directory.  cron/rhost.cron
  
  The syntax of the cron/rhost.cron file is:
          username                (or dbref# can work as well)
          command1;command2
          command
          command
          command
  
  You can have up to 20 lines of commands after the target specified.
  If you wish to have a non-player, use its dbref#.  Any line after
  20 lines will be ignored and flag a warning in the netrhost.gamelog
  file.
  
  See Also: @admin, signals, signal_action, signal_object, signal_object_type

& signal_object
  Config parameter: signal_object <dbref>.                        Default: -1
  
  This configuration parameter specifies the #dbref of the object to trigger
  when the rhost process receives a SIGUSR1 signal from the console.  When
  this occurs, the object's SIG_USR1 attribute is triggered.
  
  The type of execution is handled with the signal_object_type parameter.
  
  Example:
    > @admin signal_object = 10
    Set.
    > @admin signal_object_type=1
    Set.
    > &SIG_USR1 #10 = @wall The game has just received a SIGUSR1!
    Set.
    # kill -SIGUSR1 1234
    Announcement: Signal Object shouts "The game has just received a SIGUSR1!"
    > @admin signal_object_type=0
    Set
    > &SIG_USR1 #10 = [remit(#0,I've been rebooted!)]
    Set.
    # kill -SIGUSR1 1234
    I've been rebooted! (seen in room #0)
  
  See Also: config parameters, signals, @admin, signal_object_type,
            signal_crontab

& signal_object_type
  Config parameter: signal_object_type <boolean>              Default: 0
  
  This specifies if the SIG_USR1 attribute will be executed as a function
  or triggered as a list of commands.  For various security related reasons
  (such as putting @reboot or @shutdown in the SIG_USR1 attribute) this
  is currently set to only evaluate as a function.  If you wish to enable
  it to issue commands, it is _STRONGLY RECOMMENDED_ that the object in
  question is immortal (or even #1 owned) and can not be modified by anyone
  outside your circle of trust.
  
  See Also: config parameters, signals, @admin, signal_object, signal_crontab

& space_compress
  Config parameter: space_compress <yes/no>.  Default: yes
  
  Specifies whether or not extra spaces are to be removed from user input
  as it is processed.  If enabled, multiple spaces are compressed to a single
  space, and spaces at the ends of strings are removed.

& spam_limit
  Config parameter: spam_limit <value>.  Default: 60
  
  This specifies the number of commands anyone who is flagged SPAMMONITOR
  may issue in a 60 second period of time.  This is a very handy flag to
  set on new players (player_flags admin param) to help avoid twinkieness
  by having new players/guests coming on and attempting to spam your player
  base into annoyance.  Anyone who hits the spam limit gets logged.  There
  is no on-line notification as it could be spammy, which of course, makes
  this param rather pointless :)
  
  See Also: SPAMMONITOR, spam_msg, spam_objmsg

& spam_msg
  Config parameter: spam_msg <string>.  Default: <default string>
  
  This specifies the message sent to the player when they have hit the
  threshold for spamming determined by the SPAMMONITOR flag.
  
  See Also: SPAMMONITOR, spam_objmsg, spam_limit

& spam_objmsg
  Config parameter: spam_objmsg <string>.  Default: <default string>
  
  This specifies the message sent to the player when their object hits
  the threshold for spamming determined by the SPAMMONITOR flag.
  
  See Also: SPAMMONITOR, spam_msg, spam_limit

& sqlite_db_path
  Config parameter: sqlite_db_path <string>. Default: sqlite

  This specifies the path (relative to game/) where SQLite database files will
  be stored.

  See Also: sqlite_query_limit

& sqlite_query_limit
  Config parameter: sqlite_query_limit <value>. Default: 5

  This specifies the maximum number of seconds for which a query may run
  before it's cancelled.

  See Also: sqlite_db_path

& stack_limit
  Config parameter: stack_limit <value>.  Default: 10000
  
  Specifies the maximum recursive calls a command can issue before a ceiling
  is hit and it aborts the command lookup.  This is used to avoid some DoS
  based attacks that some twinkie little turdball could attempt.  All stack
  attempts are sent through MONITOR_CPU and logged.

& start_build
  Config parameter: start_build <yes/no>.  Default: no
  
  Specifies whether or not players are allowed to build automatically when
  they connect.  Usually when a new player is created it sets them WANDERER
  so that even if with quota, they can not build.  This in effect removes
  that flag on new players when they're created.

& starting_money
  Config parameter: starting_money <amount>.  Default: 0
  
  Sets the amount of money that new players start out with.
  See Also: paycheck.

& starting_quota
  Config parameter: starting_quota <amount>.  Default: 10
  
  Sets the building quota that players receive when they are created, whether
  by @pcreate or the connection screen.
  See Also: @quota, quotas.

& status_file
  Config parameter: status_file <filename>.  Default: shutdown.status
 
  If you give an argument to the @shutdown command, that argument is written
  out to the file named by this directive.  The file can be used by an
  auto-restart script to decide whether or not to bring the mush back up,
  for instance.

& string_conn
  Config parameter: string_conn <string>.  Default: connect
  
  This parameter specifies the string that will match the 'connect' [co] 
  string that players need to type to connect to their player.
  
  See Also: string_conndark, string_connhide, string_create, string_register,
            connect_methods

& string_conndark
  Config parameter: string_conndark <string>.  Default: cdark
  
  This parameter specifies the string that will match the 'cdark' [cd] 
  string that players need to type to connect DARK to their player.
  
  See Also: string_conn, string_connhide, string_create, string_register,
            connect_methods

& string_connhide
  Config parameter: string_connhide <string>.  Default: chide
  
  This parameter specifies the string that will match the 'chide' [ch] 
  string that players need to type to connect @hidden to their player.
  
  See Also: string_conn, string_conndark, string_create, string_register,
            connect_methods

& string_create
  Config parameter: string_create <string>.  Default: create
  
  This parameter specifies the string that will match the 'create' [cr] 
  string that players need to type to create a new player.
  
  See Also: string_conn, string_conndark, string_connhide, string_register,
            connect_methods

& string_register
  Config parameter: string_register <string>.  Default: register
  
  This parameter specifies the string that will match the 'register' [reg] 
  string that players need to type to do connect screen email registration.
  
  See Also: string_conn, string_conndark, string_connhide, string_create,
            connect_methods

& sub_include
  Config parameter: sub_include <string>.    Default: (empty)
  
  This parameter allows you to specify what NEW %-substitutions you wish
  to define.  You go about this by specifying each character in a string
  that you wish the parser to identify as a unique substitution.
  
  You may use any alpha character (except reserved) and the '=' character.
  
  Each substitution is defined on the hook object (defined through the
  @admin hook_obj command).  The attributes will be in the form:
   
                            SUB_<character>
  
  You may specify the delimiter (where it will take the string up to that
  specified delimiter) as an argument to pass as %0 to the SUB_<char> with:
  
                            CHR_<character>
  
  Where <character> will be the character you are substituting.  like 'm'
  for example.  If the delimeter is a numerical value, it will use that
  value to specify how many spaces to take after the %-substitution.
  
  NOTE:  If <character> is an invalid character for an attribute name,
         then specify the ordinal of that character.  [asc(<character>)]
         You then use the 3 digit representation of that number for the
         attribute.  Example:  '*' would be '042'.  So SUB_042/CHR_042.
  
  You may use valid() to verify if the character is a valid for attributes.
  
  Examples:  (assume hook_obj is set up to be dbref #456)
    > &SUB_Y #456=[add(1,1)]                  (just return '2')
    > &SUB_M #456=%x                          (this makes '%m' be '%x')
    > &SUB_\= #456=[get(%#/[delete(%0,0,1)])] (this mimics TM3's %=<attr>)
    > &CHR_\= #456=>                          (take argument up to > char)
    > &CHR_Y #456=|                           (take argument up to | char)
    > &CHR_Y #456=1                           (take 1 character as arg)
    > &CHR_Y #456=10                          (take 10 characters as arg)
  
  In the above %mfoo would mimic %xfoo.  %=<foobar> would look for attrib
  'foobar' on the target.
  
  See Also: sub_override, @hook, hook_obj, HOOK SETUP

& sub_override
  Config parameter: sub_override <bitwise mask>.   Default: 0
  
  This sets up the override parameter for the various %-substitutions.  These
  substitutions are seen in 'help substitutions'.  When the mask exists, the
  default setting for these substitutions will be 'DISABLED'.  To enable it, 
  you must set an attribute on the hook_obj (wizhelp hook_obj) that will then
  mark this setting 'ENABLED' and it will use that evaluation for the
  substitution for that time on.
  
  A percent substitution that is overridden can have that percent substitution
  as part of the string in the attribute.  There is no need of concern for
  infinite loops.  The following substitutions exist:
  
  - Sub --- Value --- HEX ------------+- Sub --- Value --- HEX ---------------
    %n ----     1     (0x00000001)    |  %r ----   512     (0x00000200)
    %# ----     2     (0x00000002)    |  %t ----  1024     (0x00000400)
    %! ----     4     (0x00000004)    |  %c ----  2048     (0x00000800)
    %@ ----     8     (0x00000008)    |  %x ----  4096     (0x00001000)
    %l ----    16     (0x00000010)    |  %f ----  8192     (0x00002000)
    %s ----    32     (0x00000020)    |  %k ---- 16384     (0x00004000)
    %o ----    64     (0x00000040)    |  %w ---- 32768     (0x00008000)
    %p ----   128     (0x00000080)    |  %m ---- 65536     (0x00010000)
    %a ----   256     (0x00000100)    |  %: ----131072     (0x00020000)
  ----------------------------------------------------------------------------
  
  You would add the values together and apply to the sub_override 'bitmask'
  to set or unset the given overrides.
  
  You may also INSTEAD of the numerical value specify the character that you 
  wish to override.  You can not mix numerical and letters.
  
  Example:
    > @admin sub_override=365
    > @admin sub_override=ncxf
   
  (help sub_override2 for continuation)

& sub_override2
  Config parameter: sub_override <bitwise mask>.   Default: 0
  
  The attributes that need to be set will be set on the defined hook object.
  The following attributes will need to be set for the specified percent
  substitutions.
  
  - Sub ------------- Attribute ------+- Sub ------------- Attribute ---------
    %n ----           SUB_N           |  %r ----           SUB_R       
    %# ----           SUB_NUM         |  %t ----           SUB_T         
    %! ----           SUB_BANG        |  %c ----           SUB_C         
    %@ ----           SUB_AT          |  %x ----           SUB_X         
    %l ----           SUB_L           |  %f ----           SUB_F
    %s ----           SUB_S           |  %k ----           SUB_K
    %o ----           SUB_O           |  %w ----           SUB_W
    %p ----           SUB_P           |  %m ----           SUB_M
    %a ----           SUB_A           |  %: ----           SUB_COLON
  ----------------------------------------------------------------------------
  
  If the hook object (@admin hook_obj) is NOT defined, or if the attribute 
  for the percent substitution is NOT defined, or if the mask for the 
  substitution is NOT defined, then the substitution will not be overridden.
  
  In addition, only the '%c' and '%x' substitutions are allowed 'null returns'
  and any other substitution that returns an empty string will use the
  hardcode substitution in its stead.
  
  See Also: sub_include, @hook, hook_obj, HOOK SETUP

& round_kludge
  Config parameter: round_kludge <boolean>                         Default: 0

  This is a workaround to allow rounding of even numbers to occur logically
  in spite of errors in computing.  It is disabled by default.
  
  Example:
    > think round( 2.5, 0 )
    2
    > @admin round_kludge=1
    Set.
    > think round( 2.5, 0 )
    3

& passproxy_host
  Config parameter: passproxy_host <!host> <host> ... <host>
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will be marked as bypassing automatic proxy
  detection upon socket connection.  This works like 'passproxy_site' but deals
  with DNS wildcard name conventions.  This will add or remove to existing or 
  from existing site information already specified with passproxy_host.  You 
  may use '!ALL' to clear the suspect host table.
  
  Example:  @admin passproxy_host=*.aol.com 
            (bypasses proxy any site matching *.aol.com)
            @admin passproxy_host=!ALL
            (this clears the passproxy_host list)
  
  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, 
             validate_host, forbidapi_host, suspect_host, @site
  
  
& passproxy_site
  Config parameter: passproxy_site <addr> <mask>
  
  Indicates that sites whose address matches the specified address when ANDed
  with the mask are to be allowed through automated proxy detection.  This
  proxy detection is enabled with the proxy_checker @admin config parameter.
  
  See Also: proxy_checker, @site, @admin, @list, SITE LISTS
 
& suspect_host
  Config parameter: suspect_host <!host> <host> ... <host>
  
  Indicates that connections matching the wildcard match of the specified
  sites in their DNS HOST will be marked as suspect upon socket connection. 
  This works like 'suspect_site' but deals with DNS wildcard name conventions.
  This will add or remove to existing or from existing site information 
  already specified with suspect_host.  You may use '!ALL' to clear the suspect
  host table.
  
  Example:  @admin suspect_host=*.aol.com !*.compuserve.com
            (suspects any site matching *.aol.com and removes *.compuserve.com)
            @admin suspect_host=!ALL
            (this clears the suspect_host list)
  
  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, 
             validate_host, forbidapi_host, @site
  
& suspect_site
  Config parameter: suspect_site <addr> <mask>
  
  Indicates that sites whose address matches the specified address when ANDed
  with the mask are to be considered suspect, and any player creates, connects
  and disconnects are to be reported to all logged-in wizards.
  
  See Also: trust_site, SITE LISTS.

& sweep_dark
  Config parameter: sweep_dark <yes/no>.  Default: no
  
  Indicates whether or not players are allowed to @sweep dark places they do
  not control.
  
  See Also: @sweep.

& switch_default_all
  Config parameter: switch_default_all <yes/no>.  Default: yes
  
  Indicates whether the @switch command should perform the commands for all
  targets that match or just the first one that matches if you don't specify
  either /all or /first as a command switch.

& switch_search
  Config parameter: switch_search <yes/no>.  Default: no
  
  Specifies if search and searchng are switched for evaluation.
  
  See Also: (in help) @search, search(), searchng()

& switch_substitutions
  Config parameter: switch_substitutions <yes/no>.  Default: no
  
  Specifies if @switch, switch(), and switchall() allows #$ substitutions.
  By default, this is disabled as it firstly breaks compatibility with
  older versions of RhostMUSH, and secondly, because it is a security
  risk if you do not code switch safely.
  
  See Also: ifelse_substitutions

& terse_shows_contents
  Config parameter: terse_shows_contents <yes/no>.  Default yes
 
  Indicates whether or not to suppress the listing of a location's contents
  when producing TERSE output (whether from an automatic look or a 'real'
  look if look_obey_terse is turned on.
 
  See Also: look_obey_terse, terse_shows_exits, terse_shows_move_messages.

& terse_shows_exits
  Config parameter: terse_shows_exits <yes/no>.  Default yes
 
  Indicates whether or not to suppress the listing of a location's obvious
  exits when producing TERSE output (whether from an automatic look or a
  'real' look if look_obey_terse is turned on.
 
  See Also: look_obey_terse, terse_shows_contents, terse_shows_move_messages.

& terse_shows_move_messages
  Config parameter: terse_shows_move_messages <yes/no>.  Default yes
 
  Indicates whether or not to suppress messages related to moving about
  produced by locations and exits.  These messages are the ENTER and LEAVE
  messages on locations, and the SUCC and DROP messages on exits.
  The messages seen by others (Oxxx attributes) and the actions to be
  performed (Axxx attributes) are unaffected.
 
  See Also: look_obey_terse, terse_shows_contents, terse_shows_exits.

& thing_attr_default
  Config parameter: thing_attr_default <dbref>.  Default: -1
  
  Specifies the default dbref that internal attributes that are processed
  through the standard 'handler' are evaluated.  The original desc of the
  target is passed as '%0' into this description.  This effects built-ins
  such as @succ, @osucc, @desc, @odesc, etc.  This is for things only.
  
  You need to set the attribute (that will be passed as %0) DEFAULT to
  use attribute defaults on this object.
  
  See Also: exit_attr_default, room_attr_default, player_attr_default

& thing_flags
  Config parameter: thing_flags <flags>.  Default: blank
  
  Modifies the set of flags that a thing receives when it is @created.
  Flags prefixed by a ! remove the indicated flag from the set.
  
  Note that flag names are case sensitive and in lower case.
  
  See Also: @list, exit_flags, player_flags, robot_flags, room_flags.

& thing_parent  
  Config parameter: thing_parent <dbref>.  Default: #-1
  
  Specifies what the default global parent should be.  If a valid global
  thing_parent is defined, whenever new objects are @created, they will
  automatically be parented to the specified dbref#.  Permissions will not
  be checked.
  
  See Also: player_parent, exit_parent, room_parent, global_parent_obj,
            global_parent_room, global_parent_thing, global_parent_exit,
            global_parent_player
  
& thing_quota
  Config parameter: thing_quota <amount>.  Default: 1
  
  Sets how much quota it costs to create a thing (and also how much the
  remaining quota is increased when a thing is @destroyed.
  See Also: @quota, exit_quota, player_quota, room_quota, QUOTAS.

& timeslice
  Config parameter: timeslice <amount>.  Default: 1000
  
  Specifies the interval at which connected users' command quotas are
  increased.  Each command a user types in (commands executed by machines do
  not count) decreases that user's quota by 1, and the user's commands are
  only executed if the quota is greater than zero.
  See Also: command_quota_incr, command_quota_max.

& totem_add
  Config parameter: totem_add <totemname> <slot> <bitvalue>
  
  This will add the totem as a static (sticky) value to the mush.  This is
  assigned a given slot number (by default 0-9) and a default bitvalue.
  The bitvalue must be a bitwise value.  Examples are: 0x00000001, 0x00000002,
  1, 2, or so forth.  You may use the HEX value providing it starts with 0x,
  or the decimal value for the bitwise mask.  The mask must be a unique mask
  and can not contain a mask of more than one byte.
  
  This works like @totem/add, though @totem/add only works for temporary
  totems.
   
  Attempting to add a totem with a name, slot, or bitvalue already taken will
  return an error.
  
  See Also: totem_access_set, totem_access_unset, totem_access_see, 
            totem_access_type, totem_alias, totem_letter, @totemdef, @totem

& totem_alias
  Config parameter: totem_alias <totemname> <alias1> [<alias2> ... <aliasN>]
  
  This adds one (or more) aliases to the totem.  You can have a maximum 
  of 10 aliases added per totem name.  You may add aliases to any totem.
  
  This is similar to  @totem/alias.
  
  See Also: totem_access_unset, totem_access_see, totem_access_type, 
            totem_access_set, totem_add, @totemdef, @totem
  
& totem_access_set
  Config parameter: totem_access_set <totemname> <permission(s)>
  
  Sets an override for set permissions for the specified totem.  This is
  similiar to issuing @totemdef/set on the specified totem.
  
  See Also: totem_access_unset, totem_access_see, totem_access_type, 
            totem_add, totem_alias, totem_letter, @totemdef, @totem
  
& toggle_access_set
  Config parameter: toggle_access_set <togglename> <permission(s)>
  
  Sets an override for set permissions for the specified toggle.  This is
  similiar to issuing @toggledef/set on the specified toggle.
  
  See Also: toggle_access_unset, toggle_access_see, toggle_access_type, 
            @toggledef

& totem_access_uset
  Config parameter: totem_access_uset <totemname> <permission(s)>
  
  Sets an override for unset permissions for the specified totem.  This is
  similiar to issuing @totemdef/unset on the specified totem.
  
  See Also: totem_access_set, totem_access_see, totem_access_type, 
            totem_add, totem_letter, totem_alias, @totemdef, @totem

& toggle_access_unset
  Config parameter: toggle_access_unset <togglename> <permission(s)>
  
  Sets an override for unset permissions for the specified toggle.  This is
  similiar to issuing @toggledef/unset on the specified toggle.
  
  See Also: toggle_access_set, toggle_access_see, toggle_access_type,
            @toggledef

& totem_access_see
  Config parameter: totem_access_see <totemname> <permission(s)>
  
  Sets an override for see permissions for the specified totem.  This is
  similiar to issuing @totemdef/see on the specified totem.
  
  See Also: totem_access_set, totem_access_unset, totem_access_type, 
            totem_add, totem_letter, totem_alias, @totemdef, @totem

& toggle_access_see
  Config parameter: toggle_access_set <togglename> <permission(s)>
  
  Sets an override for see permissions for the specified toggle.  This is
  similiar to issuing @toggledef/see on the specified toggle.
  
  See Also: toggle_access_unset, toggle_access_set, toggle_access_type,
            @toggledef

& totem_access_type
  Config parameter: totem_access_type <totemname> <permission(s)>
  
  Sets a type restriction for set/unset permissions for the specified totem.
  This is similiar to issuing @totemdef/type on the specified totem.
  
  See Also: totem_access_set, totem_access_unset, totem_access_see, 
            totem_add, totem_letter, totem_alias, @totemdef, @totem

& totem_letter
  Config parameter: totem_letter <totemname> <chartier> <character>
  
  This assigns the unique character to the totem.  The letter can be
  any character except (, ), [, ], { or }.  The tier can be 0, 1, or 2.
  
  Tier 1 is surrounded by [].
  Tier 2 is surrounded by {}.
  
  You are allowed to have totems with duplicate characters.
  
  See Also: totem_access_set, totem_access_unset, totem_access_see, 
            totem_add, totem_letter, totem_access_type, @totemdef, 
            @totem

& totem_name
  Config parameter: totem_name <oldname> <newname>
  
  This config parameter will allow you to rename a totem to a new name.
  
  Both oldname and newname must be under 20 characters in length and
  be a valid totem name.
  
  If you wish to use this to rename totems that are static or 
  permanent, you must specify the permission value with the config
  parameter totem_rename.
  
  See Also: totem_rename, @totem

& totem_rename
  Config parameter: totem_rename <value>    Default: 0
  
  This config parameter sets a bitmask on what totem type is allowed to
  be renamed.  The default of '0' are temporary totems only.  Temporary
  being totems that are defined in-game and not via config params or 
  through source.
  
      0 -- temporary (defined in-game)
      1 -- static/sticky (defined in the .conf files)
      2 -- permanent (defined in the source itself)
      3 -- both static and permanent.
  
  To rename anything but temporary you must specify the level you wish.
  
  See Also: @totem

& totem_types
  Config parameter: totem_types <boolean>    Default: off (0)
  
  This enables type detection to totem lists just as flags handle them.
  This is intended to be enabled if ever totems take over the requirement
  of flags in the future and to allow easier migration.
  
  See Also: @totem
  
& toggle_access_type
  Config parameter: toggle_access_type <togglename> <permission(s)>
  
  Sets a type restriction for set/unset permissions for the specified toggle.
  This is similiar to issuing @toggledef/type on the specified toggle.
    
  See Also: toggle_access_unset, toggle_access_set, toggle_access_type,
            @toggledef

& tor_localhost
  Config parameter: tor_localhost <host1> [<host2>... <hostX>]  Default: null
  
  This specifies the hostname of the server HOSTING THE MUSH.  This is
  required to handle NAT and firewall masquarding and redirection.  This 
  should be the hostname (or IP) that you are using to get to your mush 
  FROM THE OUTSIDE.  This is required to allow dynamic TOR protection.
  
  See Also: tor_paranoid, @tor

& tor_paranoid
  Config parameter: tor_paranoid <boolean>    Default: off (0)
  
  This tells the mush that you wish to use paranoid lookups on every single
  connection to the mush to validate a non-TOR connection.  This will
  obviously have some additional overhead and cause minor amounts
  of lag on each player's connection.  You should only need to use
  this in a situation where you have some total twinks attempting
  to harass, hack, or bypass bans.
  
  See Also: tor_localhost, @tor

& trace_output_limit
  Config parameter: trace_output_limit <amount>.  Default: 200
  
  Specifies the maximum number of lines of trace output that will be displayed
  when using top-down format.  Bottom-up format output is not affected by this
  parameter.
  Note that this parameter is intended as a limit on the amount of memory used
  to store intermediate data and not on the quantity of trace output, top-down
  format needs to keep all intermediate results in memory before displaying
  them, while bottom-up format displays them immediately after generating them
  When trace output lines are discarded, only the last (trace_output_limit)
  lines are kept.  These lines contain information about the evaluations done
  earliest in the process of evaluating the expression (usually the innermost
  evaluations and earlier arguments of outer functions).

& trace_topdown
  Config parameter: trace_topdown <yes/no>.  Default: yes
  
  Specifies whether TRACE output is displayed top-down (complete evaluation
  shown first, followed by sub-evaluations), or bottom-up (sub-evaluations
  shown first, followed by the larger evaluation of which they are a part).

& tree_character
  Config parameter: tree_character <character>.  Default: `
  
  Defines the character used to distinguish Penn-like trees.  Since ` is
  an annoying character, it's up to the administration to select one
  if this doesn't work for them.
  
  The character currently selected is displayed with:
                   @list options system
  
  
& trust_site
  Config parameter: trust_site <addr> <mask>.
  
  Indicates that sites whose address matches the specified address when ANDed
  with the mask are not to be considered suspect.
  See Also: suspect_site, SITE LISTS.

& uncompress_program
  Config parameter: uncompress_program <path>.  Default: /usr/ucb/uncompress
  
  Specifies the program to be run to uncompress compressed database files when
  reading them in at startup.
  See Also: compress_program, compresion.

& unowned_safe
  Config parameter: unowned_safe <yes/no>.  Default: no
  
  Indicates whether or not objects not owned by you are automatically
  considered SAFE.  (This parameter only affects wizards)  Note that players
  are always considered SAFE, and DESTROY_OK things are never considered SAFE.
  See Also: @destroy, DESTROY_OK, SAFE.

& user_attr_access
  Config parameter: user_attr_access [!]<privilege> [[!]<privilege>]...
  
  Changes the access flags that new user-named attributes receive when
  they are created.  By default, user attributes are invisible to others.

& validate_host
  Config parameter: validate_host <string>.  Default: (null)
  
  Specifies invalid email addresses for the autoregistration system.
  If an email specified matches this wildcarded list, it will not allow
  the autoregistation.  This will add or remove to existing or from existing 
  site information already specified with validate_host.  You may use '!ALL' 
  to clear the suspect host table.
 
  Example:  @admin validate_host=*.aol.com !*.compuserve.com
            (invalidates sites matching *.aol.com and removes *.compuserve.com)
            @admin validate_host=!ALL
            (this clears the validate_host list)
 
  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, 
             suspect_host, goodmail_host, forbidapi_host, @site

& vattr_command
  Config parameter: vattr_command <alias> <user-attribute>
                    vattr_command <alias> !
  
  The <alias> should be entered without a '@' prefix.
  
  Will define or delete a @command alias to a user-defined attribute.  This
  allows you to set a @command sequence to a user-defined attribute.  Once
  a command is defined, the attribute can not be deleted from the hash tables
  via @attribute/delete, but may be renamed.  If there is any db rollback
  or other situation which deletes the attribute in-game, the attribute
  will be unsettable with this command until the command is deleted then
  re-defined to the attribute. 
  
  The reason for this is that the defined command is linked to the REFERENCE
  of the attribute and not the name of the attribute itself.  Once an 
  attribute is deleted and redefined, it will likely have a different
  reference number.
  
  You may specify an unlimited number of command aliases for a single 
  user defined attribute.  Use '!' as the user-attribute if you wish
  to delete the command reference to the attribute.
  
  You can not set up @command aliases to user-defined attributes if the
  command already exists in the command table as a command, an alias, or
  pre-exists in the user-attribute table.
    
  The attribute must be pre-defined in the attribute hash table before
  being able to be made a command.  You may do this by just 
  typing: &ATTRIBNAME me  (where ATTRIBNAME is the attribute name)
  
  netrhost.conf example:
    > vattr_command pageformat pageformat
    > vattr_command outpageformat outpageformat
  
  In-game example:
    > @admin vattr_command=pageformat pageformat
    > @admin vattr_command=outpageformat outpageformat
  
  The above will define @pageformat and @outpageformat respectively.
  
  See Also: @list commands, @list permissions, @aflags
  
& vattr_limit_checkwiz
  Config parameter: vattr_limit_checkwiz <boolean>.  Default: 0
  
  Specifies if @limit is enforced to wizards/immortals as well as normal
  players.  Without this set, wizards and immortals ignore @limit 
  restritions.
  
  See Also: @limit, wizmax_dest_limit, max_vattr_limit, wizmax_vattr_limit,
            max_vattr_limit, lfunction_max
 
& vercustomstr
  Config parameter: vercustomstr <string>.  Default: (null)
  
  This provides an optional suffix for @version and INFO's version for
  customizing a version string with a personal touch.
  
  This is intended for those who want to build custom versions and have
  an ideal place to put the string.
  
  20 characters are allowed for this custom string.  The variable is
  evaluated so escape out special characters.

& vlimit
  Config parameter: vlimit <ammount>.  Default 750
  
  Sets the total user-defined attributes that a dbref# can have.  Any
  attempt to set above this returns an error message.
  
  This value should not exceed 1000.  If it does, any corruption to the
  database will be on your hands.

& wait_cost
  Config parameter: wait_cost <amount>.  Default: 10
  
  Sets the amount of money that it costs to run the @wait command and other
  actions that add commands to the queue.  The money is refunded when the
  command is removed from the queue (either when it is executed or by @halt).
  See Also: @wait.

& whereis_notify
  Config parameter: whereis_notify <value>.  Default: 1
  
  Sets the condition if the targetted player gets notified if someone did
  a @whereis on them.  Note, that cloaked wizards do not give a message to
  players who can not normally see them.

& who_comment
  Config parameter: who_comment <yes/no>.  Default: yes
  
  Indicates if the 'extra' commentary in the WHO/DOING should be seen.
  These are seen as (Bummers) and so forth.

& who_default
  Config parameter: who_default <value>.  Default: 0
  
  Sets the way the mortal WHO (or wizard DOING) looks.  The default is the
  standard RhostMUSH way (where it shows GUILDS).  Enabling this will
  remove the GUILDS from the WHO which in effect defaults the WHO look
  to the standard WHO a vanilla MUSH has.

& who_showwiz
  Config parameter: who_showwiz <value>.  Default: 0
  
  Shows a '*' beside any staff GUILDMASTER and higher whenever a player
  types WHO or DOING.  This admin config takes presidence over the
  config parameter who_showwiztype.
  See Also: who_showwiztype, who_wizlevel

& who_showwiztype
  Config parameter: who_showwiztype <value>.  Default: 0
  
  Shows the flag associated with the staff's bit on the WHO.  Note that
  both ROYALTY (wizards) and IMMORTAL (super-wizards) are shown with the
  'W' flag in the WHO/DOING.  This admin parameter is ignored if the
  config parameter who_showwiz is enabled.
  See Also: who_showwiz, who_wizlevel

& who_unfindable
  Config parameter: who_unfindable <value>.  Default: 1
  
  Allows players to dissapear from the standard WHO/DOING list.  This
  unaffects any of the other operators of the unfindable flag.  A value
  of 0 will make it so they still show up on the WHO.

& who_wizlevel
  Config parameter: who_wizlevel <value>.  Default: 0
  
  This tells what wizlevel to show in the WHO if who_showwiz or 
  who_showwiztype is enabled.  If a value above the maximum level is
  specified (5) it assumes the maximum level (5).  The valid values are
  0 (anyone) to 5 (only immortals and #1).  The following values exist:
     0 - default (enabled)
     1 - Guildmaster and higher
     2 - Architect and higher
     3 - Councilor and higher
     4 - Royalty and higher
     5 - Immortals and #1 only.
  See Also: who_showwiz, who_showwiztype

& whohost_size
  Config parameter: whohost_size <value>.  Default: 0 (range: 0 to 28)
  
  Specifies how many characters are to show up on a wizard WHO.  The default
  of '0' tells the WHO to display the full site regardless of the size.
  If a value greater than 0 or less than 28 is specified, then the hosts
  in the WHO are cut off to that specified length.

& wiz_override
  Config parameter: wiz_override <value>.  Default: 1 (enabled)
  
  Specifies if wizards (royalty and higher) override locks as the default.
  Locks include anything settable with @lock.  Attribute overriding is
  unaffected.

& wiz_uselock
  Config parameter: wiz_uselock <value>.  Default: 1 (enabled)
  
  Specifies if wizards (royalty and higher) override uselocks as the default.
  This ONLY effects uselocks.

& wizard_help_file
  Config parameter: wizard_help_file <path>.  Default: wizhelp.txt
  
  Specifies the name of the file containing the text used by the wizhelp
  command.
  See Also: wizhelp, wizard_help_index

& wizard_help_index
  Config parameter: wizard_help_index <path>.  Default: wizhelp.indx
  
  Specifies the name of the index file used by the wizhelp command.  This file
  must be generated by mkindex from the wizard help file.  The contents of
  this file are read in to a hash table when the game is started and whenever
  a @readcache command is executed.
  See Also: wizhelp, @readcache, wizard_help_file

& wizard_motd_file
  Config parameter: wizard_motd_file <path>.  Default: wizmotd.txt
  
  Specifies the name of the file that contains the wizard MOTD message that
  is displayed to wizards when they log in.  This message is displayed in
  addition to the wizard MOTD message that is set by the @motd/wiz command or
  the wizard_motd_message config parameter.  The contents of the file are
  read in to a cache when the game is started and whenever a @readcache
  command is executed.
  See Also: @readcache, wizard_motd_message.
 
& wizard_motd_message
  Config parameter: wizard_motd_message <message>.  Default: blank
  
  Sets the wizard MOTD message that is displayed to wizards when they log in.
  This message is displayed in addition to the contents of the wizmotd.txt
  file.  It can be changed with the @motd/wiz command and examined by the
  @listmotd command.
  See Also: @listmotd, @motd, motd_message, wizard_motd_file.

& wizard_queue_limit
  Config parameter: wizard_queue_limit.  Default: 100
  
  Sets the maximum number of commands that wizard players may have on the
  queue at one time.  An attempt to queue more commands than allowed will
  halt the object performing the command.
  
  See Also: player_queue_limit

& wizcommand_quota_max
  Config parameter: wizcommand_quota_max <amount>. Default: 100
  
  Specifies the maximum value for the command quota for connected wizards+.
  A wizard's command quota is only increased if it is below this value.
  Each command a wizard types in (commands executed by machines do not count)
  decreases the quota by 1, and the wizard's commands are only executed if the
  quota is greater than zero.
  
  See Also: command_quota_increment, command_quota_max, timeslice,
            @cmdquota

& wizmax_vattr_limit
  Config parameter: wizmax_vattr_limit <num>    Default: 1000000
  
  Specifies the maximum times a wizard (full wizard/bitlevel 5) or higher
  may be able to create *new* attributes.  A new attribute is defined as an
  attribute name that hasn't previously been created that does not exist
  in the hash table.  Thus, any attribute that was already declared or
  any attribute that is pre-defined (like @va) will not be effected by this.
  Specifying the value to '-1' makes it infinite.
  
  See Also: @limit, wizmax_dest_limit, max_vattr_limit, vattr_limit_checkwiz,
            max_vattr_limit, lfunction_max

& wizmax_dest_limit
  Config parameter: wizmax_dest_limit <num>.  Default: 100000
  
  Specifies the maximum times a wizard (full wizard/bitlevel 5) or higher may 
  be able to @destroy something.  Once this limit is reached, they will no
  longer be able to issue the @destroy command.  This limit may be increased
  globally or individually per player (by using @limit).  If this value is
  set to '-1' it will default to infinite.
  
  See Also: @limit, wizmax_vattr_limit, max_dest_limit, vattr_limit_checkwiz,
            max_vattr_limit, lfunction_max

& zone_parents
  Config parameter: zone_parents (yes/no).  Default: YES
  
  This option specifies if zones are allowed to inherit attributes from
  their zone masters.
  
  A zonemaster must be flagged ZONEPARENT before it will allow its children
  to inherit attributes from it.  A child may be @toggled NOZONEPARENT to
  stop it from inheriting attributes from its zonemaster.  You may also
  individually set attributes NO_INHERIT to stop them from being inherited
  to the children.

& zones_like_parents
  Config parameter: zones_like_parents <yes/no>.  Default: NO
  
  This parameter specifies if objects and players should follow zones for
  $commands as if they were @parents.  This can be a bit more computationally
  expensive so some care should be thought out prior to using this.

& CAUTIONS
  Topic: CAUTIONS
 
  The @force command evaluates its argument before putting it on the queue.
  Therefore, any ';' characters resulting from the evaluation that are
  outside of any nested delimiters will cause what follows to be treated
  as a separate command.

& CONTACT INFO
  Topic: CONTACT INFO
 
  Put information about how to contact the wizards and game maintainer
  in here so they can contact one another when the game is down.

& DEBUG FEATURES
  There is currently no information for this topic.

& FILES
  Topic: FILES
 
  RhostMUSH uses these files (normally kept in the same directory as the
  database files and the netmush program) to display information under
  certain circumstances.  The names of the files used can be changed with
  configuration directives (or on the netmush command line, in the case of
  netmush.conf).  These are contained in the 'txt' sub-directory.
 
  badsite.txt:    Displayed when someone connects from a site that is not
                  allowed to connect.  The connection is then closed.
  connect.txt:    Displayed when someone connects from a site for which
                  registration is not enabled.
  create_reg.txt: Displayed when someone tries to 'create' a character from
                  a site for which registration is enforced.
  down.txt:       Displayed when someone tries to connect to a non-wizard
                  character when logins are disabled.
  help.indx:      Index for the help.txt file, produced by the mkindx program.
  help.txt:       File containing information displayed by the help command.
  guest.txt:      Displayed to whoever connects to the guest character
                  specifiedby the guest_character config parameter.
  motd.txt:       Displayed after someone connects to an existing character.
  netmush.conf:   Configuration directives read at startup.
  news.indx:      Index for the news.txt file, produced by the mkindx program.
  news.txt:       File containing information displayed by the news command.
  
{ 'wizhelp files2' for more }

& files2
  newuser.txt:    Displayed after someone creates a new character or connects
                  to their character for the first time.
  quit.txt:       Displayed after someone QUITs but before the net connection
                  is closed.
  register.txt:   Displayed when someone connects from a site for which
                  registration is enabled.
  wizhelp.indx:   Index for the wizhelp.txt file, produced by the mkindx
                  program.
  wizhelp.txt:    File containing information displayed by the wizhelp
                  command.
  wizmotd.txt:    Displayed to wizards when they connect to their characters.
  autoreg.txt:    Displayed when non-registered site connects to autoregistered
                  mush.
  areghost.txt:   Displayed when registered site connects to autoregistered 
                  mush.
  noguest.txt:    Displayed when a site connects that is disallowed to connect
                  to a guest character.
  error.txt:      File used to control error messages.
  error.indx:     Index file for the error message file.
  doorconf.txt:   File used to control what doorways are used with @door
  doorconf.indx:  Index file for the doorways.
  
{ 'wizhelp files3 for the binaries and execution files }

& files3
  These files are contained in the 'game' subdirectory.
  
  mkindx:            Binary that indexes the txt files.  To index a text file 
                     you would type (from within the txt directory):
                           ../mkindx help.txt help.indx
  netrhost:          The actual binary for the RhostMUSH engine.
  netrhost.debugmon: The debug wrapper to return useful information on a
                     failure to start or run RhostMUSH
  mush.config:       The general setup file for global variables for RhostMUSH
                     (you should not have to modify this file ever)
  netrhost.conf:     The configure file to set up your RhostMUSH parameters
  rhost_ingame.conf: The configure file that can be modified in-game.  Please
                     see 'wizhelp @admin' for more.
  rhost_mysql.conf:  The mysql configuration file (enable mysql at compiletime)
  alias.conf:        The global alias file that RhostMUSH uses for shorthand
                     for commands, functions, flags, etc.
  netrhost.gamelog   The actual log file gamelog.  Controlled with @logrotate
  netrhost.log       The Rhost system log file (system start/stop/fail info)
  Startmush:         The script you would use to execute and startup RhostMUSH
  prevflat:          Directory that houses all your immediately previous
                     backup flatfiles
  oldflat:           Directory that houses the tarball of all yoru backups
  oldlogs:           Directory that houses all your old log files.
  
{ 'wizhelp files4' for the data files in the 'data' subdirectory }

& files4
  These are the files for the Rhost database.  Unless otherwise stated you
  should leave these files alone unless you know what you're doing.
  To back up these files always use @dump/flat, wmail/unload, @areg/unload,
  and newsdb/unload 
  
  ------------main DBs
  netrhost.db:          The binary database that was read when the mush started
  netrhost.db.prev:     The binary database that is backed up when you Start
                        your mush.  This was originally named 'netrhost.db'
  netrhost.db.new       The binary database that is updated at checkpoints.
                        When you Startmush this is the db that gets moved
                        to 'netrhost.db'.  netrhost.db is moved to 
                        'netrhost.db.prev'.  This will always be your latest.
  netrhost.db.new.old:  The binary database that is archived as oldest
  netrhost.db.new.prev: The binary database archived when 'new' is written.
  netrhost.gdbm.db:     This is the main active database for RhostMUSH. This is
                        always open as long as the mush is live.
  netrhost.gdbm.dir:    This is the directory index listing for the RhostMUSH
                        database.
  netrhost.gdbm.pag:    This is the main index sorting and position file for
                        RhostMUSH.  When the binary database gets corrupted
                        due to acts of god (power outages, disk failures etc)
                        this will likely always but always be the file that 
                        is clobbered.  Sadly you can't just backup binary files
                        as the binary file is always in a questionable state.
                        So eventhough RhostMUSH has great ability for safty,
                        always but always @dump/flat to make backups!
  netrhost.db.flat:     The flatfile dump of the RhostMUSH database
  netrhost.db.termflat: The flatfile dump when you kill -TERM your mush.
                        the TERM signal happens when a server is shutdown.
  
{ 'wizhelp files5' for the other binary files in the 'data' directory }
& files5
  ------------mail DB's  [handled with the 'mail' and 'folder' commands]
  RhostMUSH.folder.dir: This is the mail folder directory index file for the
                        RhostMUSH mail system.
  RhostMUSH.folder.pag: This is the main folder index sorting and position 
                        file for the RhostMUSH mail system.
  RhostMUSH.dump.fodler:The dump file for the RhostMUSH mail folder system.
  RhostMUSH.mail.dir:   This is the main mail directory index file for the
                        RhostMUSH mail system.
  RhostMUSH.mail.pag:   This is the main mail index sorting and position
                        file for the RhostMUSH mail system.
  RhostMUSH.dump.mail:  The dump file for the RhostMUSH mail system.
  
  Note:  Most poeple prefer softcoded news like Myrddin's BBS.
  ------------mail DB's  [handled with the news and newsdb commands]
  RhostMUSH.news.dir:   The main news directory index file for the news
                        bbs system
  RhostMUSH.news.pag:   The main index sorting and position file for the
                        RhostMUSH hardcoded bbs system
  RhostMUSH.news.flat:  The flatfile for the RhostMUSH news system.
  
  ------------AutoReg DB's [handled with the @register/register/@areg cmds]
  RhostMUSH.areg.dir:   The main autoreg index file for the autoregistration
                        system for RhostMUSH
  RhostMUSH.areg.pag:   The main autoreg sorting and position file for
                        the hardcoded RhostMUSH autoregistration system.
  RhostMUSH.areg.dump:  The flatfile for the RhostMUSH autoreg system.
  
  See Also: badsite_file, connect_file, connect_reg_file, down_file,
            guest_file, help_file, help_index, motd_file, news_file,
            news_index, newuser_file, quit_file, register_create_file,
            wizard_help_file, wizard_help_index, wizard_motd_file, 
            autoreg_connect, areghost_connect, cguest_fail. 

& INHERITANCE
  
  Inheritance is passed to anything set inherit that is @powered, or owned
  by a bitted player.  BIT level overrides @power unless @power is higher.

& LOGGING
  
  Logging is available with the @log command.

& LOGGED
  Attribute flag: LOGGED(m)
  This attribute flag is used to set attributes so that they will be globally
  logged for set/clears.  Any setting, modification, or clearing of a logged
  attribute is logged.
  
  See Also: global_attrdefault
  
& PERMISSIONS
  Topic: PERMISSIONS
 
  Access to many RhostMUSH features is controlled by a set of permissions, 
  which can usually be changed via the configuration file or the @admin 
  command.  This is a list of the valid permissions and their meanings.
    god           - Only player #1 may use this feature.
   +immortal      - Only super royalty (IMMORTAL bit) may use this feature.
   +royalty       - Only wizards (players with their ROYALTY bit set) may use
                    this feature.
   +architect     - Only builders (BUILDER bit) may use this feature.
   +counciler     - Only councilors (COUNCILOR bit) may use this feature.
   +guildmaster   - Only guildmasters (GUILDMASTER bit) may use this feature.
   +robot         - Only robots (ROBOT bit) may use this feature
    no_haven      - Only players who are not set HAVEN may use this feature.
    no_robot      - Robots may not use this feature.
    no_slave      - Slave players (SLAVE bit) may not use this feature.
    no_suspect    - Suspect players (SUSPECT bit) may not use this feature.
    no_guest      - Guest players (GUEST bit) may not use this feature.
    no_wanderer   - Wanderer players (WANDERER bit) may not use this feature.
  
{ 'wizhelp permissions2' for more }

& permissions2
    global_build  - This feature may only be used when the global building
                    flag is turned on.
    global_interp - This feature may only be used when the global
                    interpretation flag is turned on.
    disabled      - Nobody may use this feature.
    need_location - Only players and things may use this feature.
    need_contents - Only players, things, and rooms may use this feature.
    need_player   - Only players may use this feature.
    dark          - The command is darkened and won't show up in @list
    ignore        - The command is ignored totally.
    ignore_mortal - The command is ignored by all non-bitted players.
    ignore_gm     - The command is ignored by guildmasters and lower.
    ignore_arch   - The command is ignored by architects and lower.
    ignore_counc  - The command is ignored by councelor and lower.
    ignore_royal  - The command is ignored by royalty and lower.
    ignore_im     - The command is ignored by immortals and lower. 
 *  ignore_zone   - The command is ignored on loc/zones toggled IGNOREZONE
    disable_zone  - The command is disabled on loc/zones toggled IGNOREZONE 
    no_code       - The command is disabled from non-coders
    eval          - The function forces evaluation (useful for @function)
    no_eval       - The function forces non-evaluation (useful for @function)
    bypass        - The function is ignored for sandbox()
    noparse       - The function does not parse functions (but does subs)
                    This will only work on @functions/@lfunctions
  
  Restrictions are normally additive (meaning that you must be a member of all
  required groups and not be a member of any excluded group).  The permissions
  marked with a + are different, in that if more than one is required, then
  being a member of any + group will grant access to the feature and skip
  the remaining checks.  ignore_zone is special as it uses the other ignore_*
  permissions to base what level to ignore.  'ignore all' is the default.

& SEARCH CRITERIA
  Topic: SEARCH CRITERIA
 
  The following criteria may be used when searching the database with the
  @search and @mark commands:
 
  Syntax: {@mark|@search} [<player>] [<class>=<restriction>]
 
  <player>  - Restricts to objects owned by the named player.
              By default, the search is limited to objects owned by the
              invoking player, except when searching for players or if
              the invoking player is a wizard.
{ 'wizhelp search criteria2' for more }
& search criteria2
  The following classes may be used when searching:
 
  TYPE      - Restricts to objects of the indicated type (OBJECTS, ROOMS,
              EXITS, PLAYERS).
  NAME      - Restricts to objects whose names start with <restriction>.
  OBJECTS   - A combination of TYPE=OBJECT and NAME=<restriction>
  ROOMS     - A combination of TYPE=ROOM and NAME=<restriction>
  EXITS     - A combination of TYPE=EXIT and NAME=<restriction>
  PLAYERS   - A combination of TYPE=PLAYER and NAME=<restriction>
  FLAGS     - Restricts to objects which have the flags listed in
              <restriction> set.
  See Also: @mark, @search.

& SITE LISTS
  Topic: SITE LISTS
 
  There are two site lists, one for controlling access and registration, and
  one for suspect warning.  The first list is controlled by the forbid_site,
  permit_site, and register_site parameters, the second by the suspect_site
  and trust_site parameters. The syntax of these parameters is:
  <param-name> <address> <mask>, where:
 
  Address  - Four-part decimal Internet address, specified as a.b.c.d,
             of the host or network to which this parameter applies.
  Mask     - Four-part decimal Internet address, specified as a.b.c.d
             The mask is used to determine which parts of the address are
             to be used for comparison, it is ANDed with both the address
             of the host and the address in the directive.  The mask may
             also be /## notation.
 
  The parameters are applied in the order specified in the configuration file,
  and the first one that matches is used.  Therefore, you should put
  the more-specific parameters before the more general ones.
  Additions made to the lists after startup with the @admin command are put
  at the front of the list, and are checked before entries from the config
  file and previous entries made by the @admin command.
{ 'wizhelp site lists2' for more }
& site lists2
 
  Example:  Restricting Access
 
  register_site  135.246.4.40 255.255.255.255  <- Allow this site w/reg
  forbid_site    135.246.4.0  255.255.255.0    <- Disallow a class C subnet
  permit_site    135.246.0.0  255.255.0.0      <- Permit a class B network
  register_site  195.3.17.1   255.255.255.255  <- Permit this site w/reg.
  noguest_site   150.25.10.0  255.255.255.0    <- Disallow C class for guest
  noguest_site   150.25.10.0  /24              <- Disallow C class for guest
  forbid_site    0.0.0.0      0.0.0.0          <- DIsallow everyone else
 
  These directives only allow access from 135.346.*.* and 195.3.17.1, except
  that all hosts in the 135.246.4 subnet except for 135.246.4.40 are also
  not allowed access.  People connecting from 135.246.4.40 and 195.3.17.1
  are not allowed to create their own characters (registration is enabled
  for those sites), while people connecting from elsewhere on the 135.246
  net are allowed to create their own characters.
 
  See Also: @admin, @list site_information, forbid_site, forbidapi_site, 
            permit_site, register_site, suspect_site, trust_site, 
            noguest_site, passapi_site

& function list
& functions
  Help is available for the following RhostMUSH wizard only functions:
  
  ACCOUNT_LOGIN()  ACCOUNT_OWNER()  ACCOUNT_SU()  ACCOUNT_WHO() AFLAGS()    
  BEEP()           BYPASS()         CANSEE()      CHECKPASS()   CHKGARBAGE()
  CLOAK()          DOING()          DYNHELP()     EXECSCRIPT()  HASDEPOWER()
  HASPOWER()       HASTOGGLE()      ISHIDDEN()    LATTRP()      LDEPOWERS() 
  LOGTOFILE()      LOGSTATUS()      LOOKUP_SITE() LPOWERS()     LTOGGLES()  
  MAILALIAS()      MAILQUICK()      MAILQUOTA()   MAILSIZE()    MAILSTATUS()
  MSIZETOT()       NSLOOKUP()       QUOTA()       SIZE()        TEXTFILE()  
  MAILREAD()       MAILSEND()   

& EXECSCRIPT()
  Function: execscript(<script name> [,<arg 0>,...,<arg 9>])
  
  Note:  This function issues a shell interpreter so will have some
         overhead compared to calling it natively through an API.
  
  Note2: You may specify subdirectory overrides with the @admin param
         execscriptpath.  This only allows alphanumerical characters.
    
  Requirements:  /usr/bin/timeout (on MacOSX link to /usr/local/bin/gtimeout)
                 script/binary existing in ~/game/scripts and chmod u+rx
                 @powered EXECSCRIPT GM or higher
                 Set SIDEFX (with the sideffect EXECSCRIPT enabled)
  
  This function executes a script called <script name> in the game
  directory's sub-directory 'scripts'.  It is case sensitive and strips
  illegal characters (like, .., /, $, etc) from the script name.
  
  MUSH Requirements:
     - @power of EXECSCRIPT 
       --- set to guildmaster to use 
       --- set to Architect or higher to be able to pass arguments to
           the execscript() function.
     - SIDEFX flag
       --- This is required as execscript() is effectively a sideeffect
     - EXECSCRIPT_VARS 
       --- This is optional  
       --- This is passed as the enviornment variable MUSHL_VARS to the
           script or program called by execscript()
       --- This is set on the thing with execscript() on it to define what
           variables it has that will be passed as MUSHV_<args> to the script
       --- The following variables can be set in the EXECSCRIPT_VARS
           attribute of the thing/player directly calling execscript()
           -- Example: &EXECSCRIPT_VARS me=FOO BAR #0/FOO #10/BAR
              -- FOO - the variable 'FOO' off the executor of execscript()
              -- BAR - the variable 'BAR' off the executor of execscript()
              -- #0/FOO  - FOO off object #0 (if executor controls #0)
              -- #10/BAR - BAR off object #10 (if executor controls #10)
           -- These variables will be passed to the calling script as:
              -- MUSHV_FOO -- The FOO variable contents
              -- MUSHV_BAR -- The BAR variable contents
              -- MUSHV_D0_FOO -- The FOO off #0
              -- MUSHV_D10_BAR -- The BAR off #10
  
  Note: The EXECSCRIPT @power is not inheritable.
  
  You can pass a maximum of 9 arguments to the script not including the
  script name.  It combines all arguments into a singular argument to script.
  
  See 'writing scripts' for help on dos and don'ts in writing execscripts.
  See 'working with execscript' to use registers and variables and callbacks.
  See 'writing callbacks' for help on writing execscript callbacks.
  
  { 'wizhelp execscript2' for environment variables passed to the script }
  
& EXECSCRIPT2
  (CONTINUED)
  Function: execscript(<script name> [,<arg 0>,...,<arg 9>])
  
  The following global variables are available from inside the scripts called:
    MUSH_VERSION      - Show version fo EXECSCRIPT (for cross-script execution)
    MUSH_PLAYER       - [%!] dbref# of player followed by name of player.  
    MUSH_CAUSE        - [%#] dbref# of cause followed by name of cause.  
    MUSH_CALLER       - [%@] dbref# of caller followed by name of caller.  
    MUSH_FLAGS        - the flags of the player.
    MUSH_TOGGLES      - the toggles of the player.
    MUSH_TOTEMS       - the totems of the player.
    MUSH_OWNER        - dbref# of player's owner by name of owner.
    MUSH_OBJID        - objid's of player, cause, caller, owner (in that order)
    MUSH_OWNERFLAGS   - the flags of the player's owner.
    MUSH_OWNERTOGGLES - the toggles of the player's owner.
    MUSH_OWNERTOTEMS  - the totems of the player's owner.
    MUSHL_VARS        - All the variables you want the script to see which
                        is passed as the mush attribute EXECSCRIPT_VARS
                        on the container that is executing execscript()
    MUSHV_<arg>       - Dynamic variables passed from above EXECSCRIPT_VARS
    MUSHQ_<arg>       - SetQ registers (0-9 and a-z) 
    MUSHQN_<arg>      - Label names of registers (0-9 and a-z)
    MUSHN_<arg>       - Register name contents of the setq register.
                        Note: setq 0 label of 'bob' will have MUSHQ_0 and
                              MUSHN_BOB have the same contents.
  
  Examples:
    > say execscript(hello.sh)
    You say "hello from the script."
    > say execscript(hello.sh,test)
    You say "hello from the script with args: 'test'"
  
  See 'writing scripts' for help on dos and don'ts in writing execscripts.
  See 'working with execscript' to use registers and variables and callbacks.
  See 'writing callbacks' for help on writing execscript callbacks.
    
  See Also: POWER EXECSCRIPT, exec_secure

& WORKING WITH EXECSCRIPT
  Topic: Working with Execscript
  
  The file that will be passed back to the mush is the name of the 
  executing script with '.set' after it.  With the example 'myscript.sh'
  the loader file will be 'myscript.sh.set'.
 
  Note1: you may start lines with a '#' for comments.
  Note2: you may continue content by ending previous line with a <ctrl>M
         (which is a line feed)
  Note3: A maximum of 1000 lines are read (including comments)
  
  The file loader after the execscript is executed is the name of the
  script plus '.set' after it.  So if execscript called myscript.sh then
  the loader script it calls after execution is myscript.sh.set.  This file
  will be not be triggered if it detects the file existing prior to 
  the executing of the script.  This is a safty margin.
  
  The following registers are passed to the script as environment variables:
    MUSHQ_<reg>   - Where <reg> is 0-9 or a-z for the SETQ registers.
    MUSHQN_<reg>  - The label name of the <reg> defined above.
    MUSHN_<label> - The label contents of the named register.
  
  The following variables are passed to the script as environment variables:
    MUSHL_VARS    - This is the contents of the EXECSCRIPT_VARS mush attribute
                    that has a space seperated list of attribute names you
                    wish to pass to the script.
    MUSHV_<arg>   - Each <arg> is a mush attribute variable from MUSHL_VARS.
  
  See 'writing callbacks' for help on writing execscript callbacks.
  See 'writing scripts' for help on dos and don'ts in writing execscripts.
  
{ see 'working with execscript2' for details and examples }

& WORKING WITH EXECSCRIPT2
  Topic: Working with Execscript Part 2
  
  The list of variables you wish to pass will be from the object issuing
  the execscript (not the executor, but the container) as a space separated 
  list stored in the variable EXECSCRIPT_VARS.  Let's assume the execscript
  is on object #123 so default attributes will be on #123.
  
  Example: 
    > @set #123=SIDEFX INHERIT
    > @power/counc #123=EXECSCRIPT
    > &EXECSCRIPT_VARS #123=foo bar baz #0/desc
    > &FOO #123=This is my foo variable
    > &BAR #123=This is my bar variable
    > &BAZ #123=This is my baz variable
    > @desc #0=This is #0's description
    > &EXEC_ONE #123=$run1:@pemit %#=[execscript(hi.sh)]
    > &EXEC_TWO #123=$run2 *:@pemit %#=[setq(0,foo,bar)][execscript(hi.sh,%0)]
  
  The EXECSCRIPT_VARS contents as passed as environment variable MUSHL_VARS.
  This will always be a space delimited list of variables you want your script
  to see.  The contents of the example is 'foo bar baz' which are then defined
  as the environment variables with contents:
     MUSHV_FOO containing 'This is my foo variable' from &FOO #123
     MUSHV_BAR containing 'This is my bar variable' from &BAR #123
     MUSHV_BAZ containing 'This is my baz variable' from &BAZ #123
     MUSHV_D0_DESC containing 'This is #0's description' from @desc #0
  
  All registers that are defined are allocated and defined as environments
  with labels if declared.  It only assigns registers and labels where defined.
  
  Based on the above code, when issuing 'run2' with an argument:
     environment variable MUSHQ_0 containing 'foo' from setq 0 contents
     environment variable MUSHQN_0 containing 'bar' from setq 0 label
     environment variable MUSHN_BAR containing 'foo' from setq 0 contents
  
  Note: none of the environments will be set with 'run1'
   
  Notice the difference between 'run1' and 'run2' above is that run1 just
  execs the script.  No registers are passed, but EXECSCRIPT_VARS passes
  three variables that will be seen by your script.  'run2' in addition
  passes argument 0 (%0) to the script, as well as sets a register and
  label.  This is done via setq with function setq (help setq):
                setq(<register>, <content> [,<label>]
  
  At the end of the execscript() the mush does house keeping and
  will remove all environment variables that were originally set.
  
  See 'writing callbacks' for help on writing execscript callbacks.
  See 'writing scripts' for help on dos and don'ts in writing execscripts.
  
{ See 'working with execscript3' for passing information back into the mush}
  
& WRITING CALLBACKS
& WORKING WITH EXECSCRIPT3
  Topic: Working with Execscript Part 3
  
  If you wish to have variables and registers pushed back to the mush,
  you must stage a file to be read at the end of your script execution.
  
  The filename created will be <scriptname>.set.  This file will be removed
  after the end of processing. 
  
  Yes yes, I know, this isn't exactly clean, but it's one of the few
  'clean' ways a child can refer back to the parent short of writing
  complex (and not fully platform supported) shared memory or a complex
  call-back API interface into the handler.  We took the easy way out here.
  
  The file that will be read is the name of the script execscript() called
  with a '.set' appended to it.  
  
  So if your script was called 'myscript.sh'.  The file it would read
  in would be called 'myscript.sh.set'.  Again, this file is removed after
  it runs.  
  
  The syntax of this file will be as follows.
  
  To set registers back to the mush you would use:
    <register> Q      -- This clears the register
    <register> Q bob  -- This sets the register to contents 'bob'
    <label>    QN boo -- This sets register with label' <label> 'boo'
  
  To set variables back to the mush you would use:
    <variable> <dbref#>      -- This clears the attribute on dbref#
    <variable> <dbref#> bob  -- This sets 'bob' to the attribute
  
  To execute code use:
    @exec <dbref#> <commands separated by semicolon>
  
  To set flag, toggle, and totem flags use:
    @set <dbref#> <flag ... !flag>    -- Set/unset flag on dbref#
    @totem <dbref#> <flag ... !flag>  -- Set/unset totem on dbref#
    @toggle <dbref#> <flag ... !flag> -- Set/unset toggle on dbref#
  
{ see 'working with execscript4' for examples and descriptions }

& WRITING CALLBACKS2
& WORKING WITH EXECSCRIPT4
  Topic: Working with Execscript Part 4
  
  To continue, you again would still be using the .set file.  For
  the example we were using 'myscript.sh.set' because the example
  execscript() was myscript.sh.
  
  Example <script>.set file contents:
     W Q
     0 Q Setting Register 0
     A Q Setting register A
     @set #123 inherit
     @totem #123 marker0
     @toggle #123 variable
     @exec #123 @wait 10={think 1;think 2};&FOO me=test
     snork QN Setting register with label snork 
     BOB #456 This is my BOB attribute
     SEX #123 Male
     DESC #123 This is my desc%r%rI like my %crred%cn desc.
     MULTILINE #123 Multi Line Input^M
     More for the line^M
     And the end
     WIPEATTR #123
   
  To describe what the examples do: 
     W Q  -- this clears register W
     0 Q <string> -- This sets <string> into register 0 (%q0)
     A Q <string> -- This sets <String> into register A (%qa)
     @set #123 <flag> -- Same as @set #123=<flag>
     @totem #123 <totem> -- Same as @totem #123=<totem>
     @toggle #123 <toggle> -- Same as @toggle #123=<toggle>
     Execute as #123 @wait 10={think1 ;think2} and set FOO on #123 to 'test'
     snork QN <string> -- sets string to register with label 'snork'
     BOB #456 <string> -- Same as &BOB #456=<string>
     SEX #123 <string> -- Same as @sex #123=<string>
     DESC #123 <string> -- Same as @desc #123=<string>
     MULTILINE #123 <string> -- Each ^M says to keep reading
                                until no ^M or end of file
     WIPEATTR #123 -- same as &WIPEATTR #123 or @wipe #123/WIPEATTR
  
  See also: execscript(), WRITING SCRIPTS, POWER EXECSCRIPT

& WRITING SCRIPTS
  Topic: Writing Scripts
  
  The execscript() is an popen exec call.  This means that it will, 
  unfortunately, wait for children processes of the calling script to
  finish before it returns.  What does this mean?  It means it is a 
  blocking call, ergo, your mush WILL HANG until the child process
  finishes.  Some protection was put into the call so that anything
  from the 'direct' call of the script will auto kill itself after
  a 5 second period, but it is unable to handle sub-shells or sub-calls
  from within the called script itself.  It will have to wait until those
  finish, so some importance should be shown on calling scripts or 
  programs that could potentially take longer than 5 seconeds.
  
  Things to do:
    1.  If you call a script that may take input, use expect or some
        hereto or other method to feed it the required input so the
        process will not hang waiting for input.
  
    2.  If the script is backgrounded, you need to redirect the output
        for STDERR and STDOUT to a file or /dev/null.  Otherwise, the
        script will wait for it to finish since it's expecting output.
        Yes, this also includes nohupped processes.
        Examples: (these work properly)
          >  sleep 100 # this will be killed after 5 seconds
          >  nohup /path/to/script.sh > /tmp/out.log 2>&1 &
        Hanging Examples: (these do not redirect STDERR and STDOUT)
          >  sleep 100 &
          >  nohup /path/to/script.sh &
  
    3.  If you have something that will take more than 5 seconds, my
        suggestion is to redirect the output to a file, then as part
        of the script, have it check the existances of that file
        and look for a 'done processing' section, and have as part
        of your script have it check the existance of that file for
        existing processing, have it check the 'done processing' to
        then display the contents of that file and then REMOVE it
        after that, otherwise, it runs the script that generates the
        process.  You can write this method into any language you want.
  
    4.  This is an adhock process as it calls a shell interpreter.  All
        work on cleanup in the script or dangling leaks, process hangs,
        or other should be at responsibility of the person who writes
        those scripts.  ALWAYS keep in mind the three important things:
        A.  All output that can take over 5 seconds is redirected.
        B.  Anything over 5 seconds will be killed unless you code around it.
        C.  Background processes can hang the mush indefinately until
            returned.
  
  Those are the important things to remember when scripting, an example
  script is included as 'hello.sh' in the ~/game/scripts directory.
  
  Party on.

& NSLOOKUP()
  Function: nslookup(<target>)
  
  This function issues a full, true DNS lookup on either the IP or
  DNS name.  If you specify the DNS name, it will return all matching
  IP's for that DNS.  This function, as it calls outside libraries,
  is heavily protected, and will not be able to be executed more
  than a handfull of times per command.

& CHKGARBAGE()
  Function: chkgarbage(<object>, <type>)
  
  This function returns '1' (TRUE) if the target object is (g)oing,
  currently (r)ecoverable, or (b)oth.  If the target object is not
  going/recover as checking, it will return '0' (FALSE).
  
  You must specify a type.  There is no default value.
  
  The following types exist:
      garbage [g] -- check for garbage. 'g' works as shorthand.
      recover [r] -- check for recoverable. 'r' works as shorthand.
      both [b]    -- check for both garbage and recoverable.


& LOOKUP_SITE()
  Function: lookup_site(<player> [,<port>] [,<type>])
  
  This function reports, if just the player, all current sites the
  player is currently connected from.  You may narrow it down based
  on the specific port, and you may specify the type of what 
  information you want.  This pulls their descriptor information
  live and can be used against players who are trying to hide
  their connection by double-logging.
  
  The following types exist:
    0 - Show the DNS name of the player (default)
    1 - Show the IP of the player

& CHECKPASS()
  Function: checkpass(<player>,<password>)

  Checks to determine whether a password is valid for a player object.
  This function is only available to royalty and higher.

& LOGSTATUS()
  Function: logstatus()
  
  Returns the current bytes that the main mush log file is taking up.

& LOGTOFILE()
  Function: logtofile(<path/file>,<text>)
  
  This function will log 'text' to the file specified by 'path/file'.
  You can only write to subdirectories 5 levels deep from the main game
  subdirectory.  The only non-alphanumerical characters allowed are '-', 
  '_', and '/'. 
  
  This function is limited to 1 evocation per command.  This can be 
  changed with the 'log_maximum' @admin parameter.
  
  If the '<path/file>' option is specified as 'log' it will assume the
  system log file to log the message to.
    
  See Also: @log, log_maximum

& BYPASS()
  Function: bypass(<boolean>)
  
  This function, if set to '1' will allow a @function to bypass any
  ignore restriction on a hardcoded function.  If set to '0' it re-assumes
  the restriction.  This is handy for function overloading and essentially
  allows you infinite possible combinations for restriction/recoding.
  
  See Also: function overloading

& LATTRP()
  Function: lattrp(<obj>[/<wld>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])
   
  Returns a list of the attributes set on <object> and all parents of
  <obj>ect.  If <wld>pattern is given, only attributes matching it 
  are returned.  You may specify the <regexp> option to true (1) to turn the
  wild matching algo into regular expression matching instead of the default
  matching algorithem.  You may specify the optional target <targ> if you wish 
  to return attributes that only the target could see.  If you do not have
  control over target, it defaults to yours.  You may specify a type to 
  check against.  You may specify <tree> to simulate viewing attribute tres.
  
  The following types exist:
    + - List existing lock attributes on player.
    $ - list all attributes that are $commands.
    ^ - list all attributes that are ^listens.
    & - list all attributes that contain all attribute flags <flg>.
    | - list all attributes that contain any attribute flags <flg>.
    l - list total attributes and pages of attributes.
    # - page (1, 2, etc) for attribute listing.  118 for 32byte attrs.
    > - find the alphanumerical largest attribute name.
    < - find the alphanumerical smallest attribute name.
    ~ - [~#1-#2] list attribs starting at #1 until count of #2.
  
  { see help lattrp2 for examples }

& LATTRP2 
  Function: lattrp(<obj>[/<wld>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])
   
  Example:
    > @va me=$whee:@pemit %#=you did a whee.
    > @vb me=^*wow*:@pemit %#=You're hearing a wow.
    > say lattrp(me)
    You say "Desc VA VB VC VE Last VV Domain XX"
    > say lattrp(me/v*)
    You say "VA VB VC VE VV"
    > say lattrp(me/v*,*TinyPlayer)
    You say "VC VE VV"
    > say lattrp(me/v*,,$)
    You say "VA"
    > say lattrp(me/v*,,^)
    You say "VB"
    > say lattrp(me/^..$,,,1)
    You say "VA VB VC VE VV XX"
  
  This is wizard only as it could be computationally expensive. 
  
  See Also (in normal help): lattr(), cluster_lattr()

& DOING()
  Function: doing([[<player>][,<port>]])
  
  This function will return the @doing HEADER and individual player doings.
  If no argument is specified, it defaults to the HEADER.  You may also
  use /header as an argument to display the @doing HEADER information.
  
  Examples:
    > DOING
    Player Name          On For Idle  Guild       The Header
    TinyWizard    D       00:12  12m  Wanderer    Blarg!                   
    TinyWizard    D    3d 04:38  10h  Wanderer    Testing 123              
    2 Players logged in.
    > WHO
    Player Name          On For Idle  Room     Ports Host
    TinyWizard    D       00:13  13m  #609        12 [some.site.com]
    TinyWizard    D    3d 04:39  10h  #609        11 [some.site.com]
    2 Players logged in.
    > say doing(tinywizard)
    You say "Blarg!"
    > say doing(tinywizard,11)
    You say "Testing 123"
    > say doing()
    You say "The Header"
    > say doing(/header)
    You say "The Header"

& ISHIDDEN()
  Function: ishidden(<player>)
  
  Returns a TRUE(1) if the given player is set UNFINDABLE.
  
  Example:
    > say ishidden(#1)
    You say "1" 
  
& DYNHELP()
  Function: dynhelp(<helpfile>,<topic>[[[,<target>],<parsekey>],<suggest>])
  
  This function will read the matching <helpfile> file (such as help.txt), 
  search the indx file (such as help.indx) for the topic, and return to the 
  enactor (or target player), the result.  You may use any help file that 
  has a matching .indx file.  
  
  If you specify a <parsekey> of '1' (or true), it will parse the help 
  file.  A '2' will issue content searches.  Keep in mind that as a 
  function, this will strip ansi codes.  If you want to display ansi 
  codes in .txt files and parse it, use @dynhelp.  
  
  The <suggest> option enables suggestions if the help topic is not found.
   
  You may specify either '/' or '^' here for path information.
  
  This function does NOT return the output into a buffer.  This is a
  sideeffect function.  If you want the output in a stored buffer, please
  use the textfile() function instead.
    
  Example:
    > think dynhelp(help,mail)
    (returns the 'mail' topic in the help file)
    > think dynhelp(wizhelp,@depower,*TinyPlayer)
    (returns the '@depower' topic to 'TinyPlayer')
    > think dynhelp(txt/help,@set)
    (returns the '@set' topic in the help file in subdirectory 'txt')
  
  See Also: @dynhelp, textfile()

& TEXTFILE()
  Function: textfile(<helpfile>,<topic>[,<parsekey>[,<type>[,<sep>[,<sug>]]]])
  
  This function was coded to provide Penn and MUX2 compatibility.
  
  This function works similarilly to dynhelp(), except that the resulting
  string is returned to the controlling command and not as a side-effect.
  This is a possible limitation as the string that it returns has to be
  limited to an LBUF in size, or it will be cut off.
  
  You may specify a <parsekey> of '1' to let textfile() know that it needs 
  to parse the input and evaluate it.  A '2' will enable content searches.
  
  You may specify a <type> of '1' if you wish the function to return the
  wildcarded list of matches without the standard help entry header of
  'Here are the entries which match...'.  Useful for functions.
  
  You may specify a separate separator <sep> to be used for returned
  arguments for matches.  It will default to two spaces.
  
  The optional <sug> is for suggestion enabling.  Enabling this will have
  it return suggestions if a lookup doesn't match.
   
  Example:
    > think textfile(help,mail)
    (returns the 'mail' topic in the help file)
    > @wait 0=@va me=textfile(help,mail)
    (stores the helpfile 'mail' into your VA attribute)
  
  See Also: @dynhelp, dynhelp()

& CLOAK()
  Function: cloak(<target>,<player>)
  
  Returns a TRUE(1) if the player is wizcloaked from the given target.

& HASPOWER()
  Function: haspower(<player>,<power>)
  
  Returns a TRUE(1) if the player has the given power.  Royalty and higher
  only.  

& HASTOGGLE()
  Function: hastoggle(<player>,<toggle>)
  
  Returns a TRUE(1) if the player has the given toggle.
 
& HASDEPOWER()
  Function: hasdepower(<player>,<depower>)
  
  Returns a TRUE(1) if the player has the given depower.  Immortal only.

& BEEP()
  Function: beep([<number>])
 
  Sends <number> "alert" bell characters. <number> must be in the range
  1 to 5, or, if unspecified, defaults to 1.
  This function may only be used by Royalty and higher.
 
& MSIZETOT()
  Function: msizetot() (no arguments)
  
  This returns in BYTES the total size of the entire mail database.
  This does not include overhead.  This command is only executable by
  IMMORTAL players. 

& SIZE()
  Function: size(<user>[,<value>])
  
  This returns in BYTES the total size the target takes up in the
  RhostMUSH database. (This does not take in account overhead costs)
  This function may only be used by Royalty and higher.
   
  The following values exist as arguments:
      0  - Check total size of target and all belongings (default)
      1  - Check total size of target and belongings but not attributes.
      2  - Check total size of target player (including attributes).
      3  - Check total size of target item (including attributes).

  Note that option 3 is the only one that specifies a possible non-player.

& LPOWERS()
  Function: lpowers(<user>)
  
  This returns a string of powers the given player has.  This function
  is only available to royalty and higher.

& LDEPOWERS()
  Function: depowers(<user>)
  
  This returns a string of depowers the given player has.  This 
  function is only available to Super-Royalty.
& LTOGGLES()
  Function: ltoggles(<user>)
  
  This returns a string of toggles the given player has.  This is
  permission dependant.  Ie: You must have control over the target
  player to see their toggles.

& ACCOUNT_LOGIN()
  Function: account_login(<player>, <attribute>, <port>, <password>)
            account_login(<player>, <attribute>, <port>)
  
  This function is intended to be use with the file_object @admin
  config parameter as it gives an alternative way to login to a
  player character.  
  
  This is done by matching the target <player> with the HASHED
  attribute password <attribute> that is stored on the player.
  
  They can not use the built in password method for this and
  they must use a new hashed attribute for connection
  purposes.  
  
  To set the password in the attribute, use the @password/attribute
  or attrpass() function to do so.  Normal help is available on
  @password and attrpass() to set attribute based hashes.
  
  It is *STRONGLY SUGGESTED* when setting attributes to be used
  in this manner that you use wizard/immortal only attributes.
  
  There is some small amount of security risk to this feature,
  however only immortals can use this function.  That fact
  is hardcoded in and can not be overridden.
  
  If you specify the three argument method of account_login(),
  it will use the account_owner() password that has been
  cached for that session as the password to enter.
  
{ see 'wizhelp account_login2' for examples }

& ACCOUNT_LOGIN2
  (CONTINUED)
  Function: account_login(<player>, <attribute>, <port>, <password>)
            account_login(<player>, <attribute>, <port>)
  
  In this example %1 is the arguments, %4 the port. 
  Example:
    > think config(file_object)
      123
    > &FAKECOMMANDS #123=mylogin|myloginpwd|myowner
      Set
    > &RUN_MYOWNER #123=[ifelse(account_owner(first(%1),_ACCT,%4,rest(%1)),
               Connected.,Failed to connect.  Invalid user or password.)]
    > &RUN_MYLOGIN #123=[ifelse(account_login(first(%1),_ACCT,%4,rest(%1)),
               Connected.,Failed to connect.  Invalid user or password.)]
      Set.
    > &RUN_MYLOGINPWD #123=[ifelse(account_login(first(%1),_ACCT,%4),
               Connected.,Failed to connect.  Invalid user or password.)]
      Set.
    > @password/attribute *Tester/_ACCT=zappo
      Set - Tester/_ACCT: set with encrypted password.
  
  Note: if safer_passwords is enabled, this will require much more strict
        password generations.
  
  Then on the connect screen you would type:
    > mylogin tester zappo
  
  Or using the Single Signon you can do passwordless with:
    > myowner testmaster zappo    (the master account -- caches the passwd)
    > myloginpwd tester           (a member of the master account)
  
  That would connect you as normal.
  
  See Also: file_object, account_owner(), account_su(), account_who(), 
            ACCOUNT MEMBERSHIP, connect_perm, safer_passwords

& ACCOUNT_OWNER()
  Function: account_owner(<player>, <attribute>, <port>, <password>)
            account_owner(<port>)
            account_owner(<port>, logoff)
  
  Note: The account owner can be *ANY VALID DATA TYPE*.  The account owner
        does not have to be a valid player, as the account owner is not
        actually logging into the mush.
  
  This function will set or display the account 'owner' for the current
  connection.  This is used to help identify a singular 'owner' for
  account login permissions if you wish to use such a system for
  login features.  This should be used in junction with account_login()
  and the @admin file_object connect screen softcode command structure.
  
  The first option will 'login' you to the master account specified.
  The second option will show -1 if not logged in or the master account.
  The third option will log out off the master account.
  
  See 'wizhhelp account_login' on syntax on how to work through this.
  
  Examples:
    > WHO Bo
      Player Name          On For Idle  Room     Ports Host
      Bob                   00:11   0s  #0          18 [localhost]
      1 Player logged in. (Bummer.)
    > say %#
      You say "#111"
    > say account_owner(18)
      You say "-1"
    > say account_owner(Bob, _ACCT, 18, zappo)
      You say "1"
    > say account_owner(18)  
      You say "111"
  
  See Also: account_login(), account_su(), file_object, account_who(),
            ACCOUNT MEMBERSHIP, connect_perm

& ACCOUNT_SU()
  Function: account_su(<player>, <port>, <attribute>)
  
  This function will switch user in-game to the account with the 
  specified attribute.  The target player must already be signed
  in to the master account via account_owner() to cache the
  password information or this function will fail. 
  
  Examples:
    > WHO Bo
      Player Name          On For Idle  Room     Ports Host
      Bob                   00:11   0s  #0          18 [localhost]
      1 Player logged in. (Bummer.)
    > think account_su(Betty, 18, _ACCT)
    > WHO Be
      Player Name          On For Idle  Room     Ports Host
      Betty                 00:00   0s  #0          18 [localhost]
      1 Player logged in. (Bummer.)
   
  See Also: account_owner(), account_login(), file_object, account_who(),
            ACCOUNT MEMBERSHIP, connect_perm
  
& ACCOUNT_WHO()
  Function: account_who(<separator>)
  
  This function will display all the ports that are currently utilizing
  the account subsystem.  You may then pass these ports into the other
  account functions to softcode wrappers.
  
  Examples:
    > say account_who()
    You say "12 20 25"
  
  See Also: account_owner(), account_login(), file_object, account_su(),
            ACCOUNT MEMBERSHIP, connect_perm

& AFLAGS()
  Function: aflags(<attribute>)
  
  This returns the flags that are set on the specified attribute.
  
& QUOTA()
  Function: quota(<player>)
  
  This returns the quota a player has and for royalty and higher will
  also give a 'L' at the end to show that quota is locked.
  
  For the alternate quota system, it will show an 'L' after each group
  as that system allows individual locking.
& folder
  Topic: folder
  
  The folder sub-commands are part of the mail system.  Check 'help'
  (instead of 'wizhelp') for further explanation.  There is only
  one wizard sub-command:
     folder/plist <player>
  
  Example:  folder/plist Twink
  
  This sub-command will display the list of folders for <player>.

& mail
  Topic mail
  
  Mail is documented in the regular help.  Wizard differences and
  extra commands are documented in wizhelp.
   
  The mail command takes various switches to perform the various mail
  sub-commands, as in:
  
    mail/read 1
  
  To get help on a particular mail sub-command, use the command:
  
    wizhelp mail <sub-command>
  
  where <sub-command> is one of the sub-commands listed below:
   
  check      number    send       fsend       quota        cmdlist
  recall
   
  Four new config parameters have been added: mailmax_send, and mailbox_size,
                                              mail_tolist, mail_default. 
  
  See Also: wmail

& mail recall
  Topic: mail recall special commands for wizards.
  Syntax: mail/recall <args>
  
  For general help on mail/recall, please check 'help mail recall'.
   
  You may specify a '@<player>' as an argument to see mail that was sent
  by other players.  You may use the /all switch with this as well.
  If you wish to view the mail of the other player, you must use 
  mail/number and mail/check.
   
  Syntax:
    > mail/recall @target
    (this shows all mail sent by target that is unread)
    > mail/recall/all @target
    (this shows all mail sent by target, including read)
  
  See Also: help mail recall

& mail cmdlist
  Topic: mail command list for wizards
  
  mail/check <player>=<num>        -- views target player's message.
  mail/number <player>[=<arg>]     -- lists target player's mail.  This uses 
                                      the same args that are valid in 
                                      'mail/status'
  mail/send (same as in help)      -- The difference is royalty and higher
                                        can have their objects send mail.
  mail/fsend (same format as send) -- This allows a wizard for force a 
                                      message into someone's mailbox.  This
                                      overrides their quota and locks.
  mail/quota <player>              -- This displays the quota statistics for
                                      a player's mail.
  
  See Also: wmail cmdlist

& wmail
  Topic: wmail
  
  WMail is an extension for regular 'mail' for the wizards as hard code
  limitations stop us from adding extra /switches to the standard mail
  without a total rewrite. (we're considering it anyway for the future)
  
  The following options exist for wmail:
  
  clean     load       unload     wipe      on       off        access
  override  restart    size       fix       lfix     alias      lock
  smax      time       dtime      cmdlist
  
  For help on an individual power, type:
  
  wizhelp wmail <sub-command>
 
  A special topic for DYNAMIC GLOBAL ALIASES is seen with wizhelp on 
                          mail_def_object
  
  Note: if mail shows that it is turned off, and attempting to turn it on
        returns that the mail has an error, your mail db is likely
        corrupted.  You can attempt a wmail/load to load in a previous
        flatfile to recover the mail (if one is available).
  
  See Also: mail

& wmail cmdlist
  Topic: wmail command listing for wizards
  
  wmail/access <args>      - Adds (+add), Removes (+remove), or lists (+list)
                             access restrictions of players to the mail system
  wmail/alias[/switch] [<alias>=<list of users>] - This defines a global alias
                             with the specified list of users.
  wmail/alias/lock <alias>=<lock> - This establishes a mush-level lock of who
                             can see and use a given alias.
  wmail/clean              - Does extensive db checking and repair to mail db.
  wmail/dtime <player>=<value> - This forces an autodelete of a player based
                             on the value days old.
  wmail/fix                - Does an on-line restructure of the mail db.
                             (Huge resource hog and use only if corruption)
  wmail/lfix               - This loads the fixed mail (from wmail/fix) into
                             the db.
  wmail/load               - Loads the mail flatfile (overwriting loaded mail!)
  wmail/on                 - Turns on (enables) the mail system.
  wmail/off                - Turns off (disables) the mail system.
  wmail/override <player>  - Resets (removes) the player's mail password.
  wmail/restart            - Preforms a restart on the mush mail daemon.
  wmail/size <10-2000>     - Sets a player's maximum mailbox size.
  
  { wizhelp wmail cmdlist2 to continue }

& wmail cmdlist2
  Topic: wmail command listing for wizards (CONTINUED)
  
  wmail/smax <value>       - Globally establishes the total number of save 
                             messages players may have.  Default is 10.
  wmail/time <value>       - Globally sets the number of days until mail is
                             autodeleted from players.  0 deletes immediately.
  wmail/unload             - Unloads the mail flatfile on-line.
  wmail/wipe <player>      - Purges that players mail and all it's references
  
  See Also: mail

& wmail smax
  Command:  wmail/smax <value> (default 10)
  
  This establishes the total maximum number of SAVE messages a person
  can have on a global level.  This will set SAVE messages on all but
  ROYALTY and higher.
  
  Example:  wmail/smax 5
  
  See Also: @mailsmax

& wmail time
  Command:  wmail/time <value> (default 14 days)
  
  This will set up the automatic purging to the specified time (in days)
  If you set a '0', then all mail is purged.  This is done whenever
  a player disconnects.  This is settable only by SUPER-ROYALTY. NEW
  or UNREAD mail is not purged.
  
  Example:  wmail/time 20

& wmail dtime
  Command:  wmail/dtime <player>=<value>
  
  This is a one time deal and will force a purging of mail of the
  given user from the 'value' number of days.  If you specify '0' then
  all mail is purged.  This is settable only by SUPER-ROYALTY.  NEW
  and UNREAD mail is not purged.  This value is not stored.
  
  Example:  wmail/dtime BloatedPlayer=2

& mail quota
  Command:  mail/quota <player>
  
  This shows various statistics on the given player.  These are:
  
   The total mailbox size and what they're currently at.
   The total mail save maximum and what they're currently at.
   The total mail they can currently send out and what they're at.
  
  Example:  mail/quota BloatedPlayer

& mail send
  Command:  mail/send <address list>=<message>
  
  See 'help mail send' for details on how to use this sub-command.
  Wizard-owned objects can send mail.  Replies to messages from
    those objects will be sent to the owner.  The from line of those
  messages will be from the object owner.  The address list can
  be separated with commas instead of a space. You shouldn't
  mix commas and spaces as separator.
  
  NOTE:  All messages from objects you controlled will show up that
         they came from YOU and not your object.

& mail fsend
  Command: mail/fsend <address list>=<message>
  
  See 'help mail send' for details on how to use this sub-command.
  This allows immortals to send mail and override any locks or
  max-messages a player has for their mail box.  The address list
  can be separated with commas instead of a space. You shouldn't
  mix commas and spaces as separator.
  
  *NOTE*  /fsend sent mail will *not* be autoforwarded.
  
  Example:  mail/fsend player1 player2 +global &personal=subject//My message

& wmail size
  Command: wmail/size <user>=<[10 - 2000]>
  
  This resets a player's maximum messages they can recieve to a given
  ammount from 10 to 2000.  This will override the global default of
  99 messages (or whatever is defined).
  
  Example:  wmail/size BloatedPlayer=10
  
  See Also: mail quota

& mail number
  Command: mail/number <target>=#
  
  For details on the 'number' sub-command, see 'help mail number'.
  Wizards can use the number command on anyone, regardless of the
  mail sharing lock.
  
  Example:  mail/number Twink=1-5
  
  See Also: mail check

& mail check
  Command: mail/check <target>=<#>
  
  For details on the 'check' sub-command, see 'help mail check'.
  The #1 (god) can check anyone's mail, regardless of the mail
  sharing lock.  Other wizards must pass the mail sharing lock to
  check mail.
  
  Example:  mail/check Twink=2
  
  See Also: mail number

& wmail wipe
  Command: wmail/wipe <target> 
  
  Will delete all mail for target. This sub-command is called automatically
  when players are @destroyed.
  
  Example: mail/wipe Jerk

& wmail load
  Command: wmail/load
  
  Will reload the mail db from the mail text dump file.
  This will also fix a corrupt db by attempting to load in a previoius
  flatfile.
  
  If you do not have a valid flatfile, it will give you an error stating
  such.
  
  HOWEVER.  There is a caveat.  If the mail system is currently off and
  you are issuing wmail/load to fix this problem, and if there currently
  is no valid flatfile to load, this will in essence reset your mail
  database to a clean slate, thereby removing everything and effectively
  starting over for your mail system.
  
& wmail unload
  Command: wmail/unload 
  
  Will dump the mail db to a text file.

& wmail clean
  Command: wmail/clean
  
  Right now, basically does a unload followed by a load. In the future, 
  detailed mail db consitency checking is planned for this function.

& wmail on  
  Command: wmail/on
  
  Will turn the mail system on if previously turned off.  If the db is
  corrupted you will need to wmail/load a flatfile in.
  
  If you do not have a mail flatfile to load, issuing wmail/load will give
  an appropiate error.

  HOWEVER.  If your mail is currently disabled, and wmail/on isn't bringing
  the mail system online, wmail/load will fix the mail system.  It does this
  by first attempting to load in a valid mail flatfile.  If you have never
  made a flatfile backup of your mail, it essentially resets the mail db
  to a clean slate and brings it back up.  You will, however, have lost
  all your mail, but the mail system will be working again.

& wmail off
  Command: wmail/off
  
  Will turn the mail system off.  Corrupted mail systems are automatically off.

& wmail access
  Command: wmail/access +list
           wmail/access +add=<player>
           wmail/access +remove=<player>
  
  What this command does is allow wizards to lock selected users out of the
  mail system. +list will give a list of users locked out. The +add command
  will lock out a user.  The +remove command will restore mail access for 
  that user.  This is designed to accept 1 user at a time in the add/remove.
  
  Examples:  wmail/access +list           (list restrictions)
             wmail/access +add=twink1     (remove user twink1's mail privies)
             wmail/access +remove=twink2  (re-allow twink2 to use mail)

& wmail override
  Command: wmail/override <player>
  
  Reset (remove) the password for <player>.  Useful if someone forgets
  his password.
  
  Example:  wmail/override ForgetFul

& wmail restart
  Command: wmail/restart
  
  This unloads and reloads (basically restarts) the mail daemon for the 
  RhostMUSH.

& wmail fix
  Command: wmail/fix
  
  This does an on-line fixmail to the mail daemon for the RhostMUSH. It in 
  essence reindexes everything and does all the checking.  Keep in mind, 
  this is a HUGE drain on resources so if you do this on line, expect some 
  major lagging.
    
  This command can only be done by Super-Royalty
  
  See Also: wmail lfix

& wmail lfix
  Command: wmail/lfix
  
  This puts the newly defined fixmail into the RhostMUSH memory.  
  
  *NOTE* *NOTE* *NOTE* *NOTE* *NOTE* *NOTE* *NOTE* *NOTE* *NOTE* *NOTE* *NOTE*
  This will totally delete the previous mail information for the new one.
  Ie: if you didn't do wmail/fix BEFORE this, all mail information is *GONE*
  This command can only be done by Super-Royalty
   
  See Also: wmail fix

& wmail alias
  Command: wmail/alias[[/lock][/remove]] [<alias-name>=<list of players>]
  
  This establishes global mail aliases for the given group of users.  A user 
  can then access this by using a '+alias-name' in their address list when 
  mailing.  You may also lock aliases to given things.  This works just like 
  standard MUSH locks and is accessable by adding a /lock switch to the /alias 
  switch.
  
  Typing the alias without the user list removes the alias.  Using the alias 
  switch without arguments will list all global aliases currently available and
  any and all locks on those aliases.
  
  To remove the alias, use the /remove switch in junction with the /alias 
  switch.  To remove just the lock, specify the /remove with the /lock and the
  /alias.
  
  Examples:  wmail/alias                     (lists the aliases and locks)
             wmail/alias wiz=wiz1 wiz2 wiz3  (adds alias wiz with players)
             wmail/alias/lock wiz=!*user     (establishes a lock for alias wiz)
             wmail/alias/remove wiz          (removes alias wiz)
 
  To see how to create dynamic global aliases, check 'mail_def_object'.
    
  See Also: wmail lock, wmail remove, mail_def_object

& wmail remove
  Command: wmail/alias/remove
           wmail/alias/lock/remove
  
  The first format is for removing aliases from the global alias list.  This
  also purges the matching lock for the alias automatically.  The second
  form just removes the lock.
  
  Example:  wmail/alias/remove MyGLobalAlias
  
  See Also: wmail alias, wmail lock

& wmail lock
  Command: wmail/alias/lock <alias-name>=<mush lock>
  
  This locks the given alias to the desired lock.  You would set the lock just
  as you would a normal @lock.  Specifying no lock clears the lock and allows
  it accessable by anyone.
   
  Example:  wmail/alias/lock MyGlobalAlias=!*twink
  
  See Also: wmail alias, wmail remove

& mailbox_size
  Config Parameter: mailbox_size <value>   Default: 99
  
  This can be set to a number between 10 and 2000 inclusive.  This
  number indicates the maximum number of messages anyone can have.

& mailmax_send
  Config Parameter: mailbox_send <value>   Default: 100
  
  This number indicates the maximum number of players to whom anyone can
  send mail at once.

& MAILSIZE()
  Function: mailsize(<user>,<arg>)
  
  This function will return the various sizes of the target user's mailbox.
  You can give it the following arguments:
       1   :  Gives the value in BYTES of the total mail of a given player
              except for recieved message size (that was sent to other 
              players) and sent message info (indexes, headers, and messages)
       2   :  Gives the total value in BYTES of everything in #1 plus all the
              overhead info and recieved message size.
       3   :  Gives the total value in BYTES of all mail sent by that user in 
              circulation. (Everything not given in #2)
       4   :  Gives a combined output of options #1 and #3.
       5   :  Gives a combined output of options #2 and #3.
  
  Option #4 given on all players will be the same as msizetot() except for
  general overhead information that msizetot() will show.  This option 
  is accessable by ROYALTY and higher.
  
  See Also: size(), msizetot()

& mailmutt
  Config parameter: mailmutt <yes/no>.  Default: NO
  
  Specifies if the mail program being used is MUTT.
  This is required to add an additional parameter to the email program.
  
  See Also: mailsub, mailprog

& mailprog
  Config parameter: mailprog <string>.  Default: elm
  
  Specifies the mail program used to send autoregistration email.
  
  See Also: mailsub, mailmutt

& mailsub
  Config parameter: mailsub <yes/no>.  Default:  YES
  
  Specifies if a '-s' is used with the mailprogram defined by 'mailprog'
  config parameter.  The '-s' would be the subject line.
  
  See Also: mailmutt, mailprog

& mail_anonymous
  Config parameter: mail_anonymous <string>.  Default: *Anonymous*
  
  Defines the 'anonymous' name seen when a player reads/stats/other a
  mail that was sent anonymously.
  
  See Also: mail_verbosity

& mail_autodeltime
  Config parameter: mail_autodeltime <days>.  Default: 21
  
  Specifies the time, in days, that mail is auto-purged from non-wizards.
  This does effect councilors and lower.
  
  If the value is '0' or lower, it assumes 'unlimited' time.

& mail_def_object
  Config parameter: mail_def_object <dbref>.  Default: -1
  
  Specifies the dbref# (without the '#') of the object that houses the
  global dymamic mail aliases.  Global dynamic mail aliases are literally
  functions that return a list of dbref#.  The syntax would be:
    > &alias.wizards <dbref>=[search(flags=W)]
    > &comment.wizards <dbref>=This is a list of wizards
  
  The above would make a dynamic alias 'wizards' that can be used with
  the mail system (using the '$' prefix).  The comment is what is shown
  when the player issues a 'mail/alias'. 
  
  To send mail using this alias, you would do: mail $wizards=blah
  
& mail_hidden
  Config parameter: mail_hidden <on/off>.  Default: off
  
  Specifies if mail/anon will hide who the message was originally sent
  to.  Like the /anon switch itself, WIZARD and higher can see through
  hidden/anonymous names to the real sender behind it.
  
& mail_tolist
  Config parameter: mail_tolist <yes/no>.  Default: NO
  
  Specifies if the To: list in mail is automatically added in any sent
  mail, showing everyone who the mail want sent to.  If this is enabled,
  using '@' when sending mail will do the reverse of what it says and
  cause the To: list to not show up.

& mail_verbosity
  Config parameter: mail_verbosity <yes/no>.  Default: NO
  
  Specifies if subjects are displayed with the 'You have new mail' message
  that a player receives, as well if players receive this message even
  if they're disconnected.  This is tied in as both have to do with
  mail verboseness.
  
  See Also: mail_anonymous

& mail_default
  Config parameter: mail_default <yes/no>.  Default: NO
  
  Specifies if 'mail' will return 'mail/status' instead of the default
  of 'mail/quick'.  This is done for backward compatibility to other
  mail systems.

& CLOAKING
  Topic: CLOAKING
  
  Cloaking on RhostMUSH is unique from other server types.  If you happen
  to be bitlevel 5 or higher (ROYALTY (wizard) or IMMORTAL (super-royalty))
  and set both the UNFINDABLE and DARK flags, you are considered WIZCLOAKED.
  Likewise, if any of your belongings are DARK+UNF it is also considered
  WIZCLOAKED.  This includes all data types from exits to rooms.
  
  IMMORTALS get an additional flag SCLOAK that when used in junction with
  DARK and UNFINDABLE will render them cloaked from royalty.  This, also,
  can be used on any immortal's belongings.  
  
  You can use the cloak() function to tell if you would be cloaked from the
  target player.  You can not use it, however, to tell if someone is cloaked
  from you if they're higher bitlevel than you.
  
  The DARK and UNFINDABLE flags otherwise have expected results if used
  separate from each other, though DARK, for obvious reasons, will not
  make you 'DARK' like on normal mushes. (unless configured to do so with
  the appropiate @admin parameters)

& ALT INVENTORIES
  Topic: ALT INVENTORIES
  
  RhostMUSH allows alternate inventory types.  They are pretty robust with
  what they allow.  To successfully set up alternate inventories, the
  following are used for configuration.
  
     @admin parameters (that can be done via @admin or mushname.conf file)
         - alt_inventories (enables feature)
         - altover_inv (items in alt inventories don't show up in 'inventory')
         - showother_altinv (people can see equipment 'worn'/'wielded')
  
     Attributes associated with alternate inventories.
         - @invtype (specifies in what manner the item is 'wielded'/'worn')
  
     Toggles associated with alternate inventories.
         - @toggle WORN (specifies the item being held is being 'worn')
         - @toggle WIELDED (specifies the item being held is being 'wielded')
  
     Commands associated with alternate inventories.
         - worn (lists what you currently have 'worn')
         - wielded (lists what you currently have 'wielded')
  
  See Also: alt_inventories, altover_inv, showother_inv, @invtype, WORN,
            WIELDED, help worn, help wielded
  
  { type 'wizhelp alt inventories2' for step-by-step examples to configure }

& ALT INVENTORIES2
  Topic: ALT INVENTORIES
  
  Alternate Inventories - A tutorial...
  [ Ok, let's first enable alternate inventories, worn, and wielded. ]
    > @admin alt_inventories=1
    Set.
  [ Ok, let's set it up so when you type 'inventory' worn/wielded things ]
  [ do not show up in the listing. ] 
    > @admin altover_inv=1
    Set.
  [ Humm.. let's set it up so players can see equipment others are carrying ]
  [ when they look at the player. ]
    > @admin showother_altinv=1
  [ Let's set up an object to be worn. ]
    > @create Platemail
    Platemail created as object #123
    > @toggle Platemail=worn
    Set.
    > @invtype Platemail=On Body
    Set.
    > worn
    You are wearing:
    On Body: Platemail(#123)
  [ See?  That wasn't hard.  If you remove the @toggle, it won't be worn. ]
  [ Play with it some.  It's pretty easy to set up and establish things. ]
  [ Weapons are done exactly the same way exept you @toggle WIELDED instead ]

& MAILQUICK()
  Please refer to the normal help on this function for it's features.
  
  See Also: mailquota(), mailstatus()

& MAILALIAS()
  Function: mailalias(<global alias>[,<type>])
  
  This function returns the dbref#'s of the contents of the specified global
  alias defined by 'wmail/alias'  (See: wizhelp wmail alias).  You may set
  the type to '1' to specify the lock information instead of the alias.
  
  Example:
    > wmail/alias
    Alias: staff
    Lock: (Ashen-Shugar(#123Pci<>)|Start Room(#0RFI)|Wizard(#1P))&!Test(#100P)
    Contents: Ashen-Shugar Corum
    Mail: Done.
    > think mailalias(staff)
    #123 #456
    > think mailalias(staff,1)
    (*Ashen-Shugar|#0|*Horus)&!*Test
  
  See Also: wizhelp wmail alias, help mail alias

& guest setup
  Topic: GUEST SETUP
  
  Setting up guests is relatively simple.  You have to do the following 
  things in order, however.
  
  1.  Specify in the CONF parameter NUM_GUESTS how many guests you desire.
      The default for this is ten (10).
  
  2.  After specifying the ammount, you need to pre-create the guest 
      characters and set them up properly.  This is done by the following.
      A.  @pcreate Guest#=guest (where # is from 1 to NUM_GUESTS)
      B.  @set Guest#=!wanderer guest (where # is from 1 to NUM_GUESTS)
      C.  @lock *Guest#=*Guest# (where # is from 1 to NUM_GUESTS)
      D.  @adisconnect *Guest#=home (where # is from 1 to NUM_GUESTS)
      E. (optional) @desc Guest#=<whatever>
      F.  If someone tried to connect to a guest when you did not create
          any, before you can use the guests that you have created, you
          have to @reboot the server.  This resets the guest counter.
          You *only* have to do this if someone tried to connect to
          a Guest character when you had none created.
  3.  If you ever need to increase or decrease this ammount, just modify
      the NUM_GUESTS field and make/remove any guests you need.
  4.  You may use 'guest_namelist' to optionally define a list of dbref#'s
      that you wish to use for guest characters.  Once defined, you may
      name them however you desire.  See wizhelp on 'guest_namelist' for more.

& mailinclude_file
  Config parameter: mailinclude_file <string>  (Default 'autoreg_include.txt')
  
  Specifies the text file that is included when someone autoregisters.  If
  no text file is found, or the file is invalid, it sends the base information
  to the user (login, password, and who it's from).
  
  Note: this has some protection and requires the file end in '.txt'.

& news setup
  Topic: NEWS SETUP
  
  The news.txt file (and help.txt file) uses a unique index system for 
  references.  You design the file with a '&' to start an index key and the
  text after it is the content of that topic.  The main topic is *ALWAYS* 
  'help' So when you type 'help' or 'news', the text that shows up is after 
  the index 'help' (i.e.  & help)
  
{ For help on how to set one up, please see:  'wizhelp news setup2' }
  
& news setup2
  Topic: NEWS SETUP
  
  This is an example of how a news.txt file will look like:
  
    & help
    These are the current news topics available:
    BIFF THE MIGHTY             BOB THE WEAK                  DISCLAIMER
    GETTING STARTED             
    
    & biffy
    & BIFF THE MIGHTY
    Biff is a mighty wizard.
    'biffy' is an alias so will work for me, too.
    
    & bob the weak
    Bob is a mighty wizard in disguise.
   
    & disclaimer
    This is your standard disclaimer info blah blah blah.
    
    & getting started
    Do stuff in here to start out on our mush!
  
  Notice that it is not case sensitive, and all topics start with a '&'.  Also
  notice that they do not have to be in any order, but they NEED to be in order
  of how they would be seen.  You can't have 'HELP MAIL SEND' before 
  'HELP MAIL' as it will find the topic for 'help mail send' first.  It uses 
  partial matches.  You can have as much text as you want in it, but please, 
  for the readability, try to keep all information on a 20x78 screen.
  
{ wizhelp news setup3 to continue }

& news setup3
  Topic: NEWS SETUP
  
  Once the .txt file is finished, you need to create the index for the text
  file.  To do this, from within the txt directory you would type 
  the following:
  
    ./mkindx news.txt news.indx
  
  (if the above returned an error message of not being found, you type:)
  
    ../mkindx news.txt news.indx
  
  This creates the index file for the text file.  For help, you would use
  'help.txt help.indx' as it's arguments.  For the +help, you would use
  'plushelp.txt plushelp.indx' as it's arguments.  It's pretty striaght
  forward.
  
  Once the files are indexed, you would then read it into the mush.  To
  do this, use the wizard command '@readcache'.  i.e.  Type: @readcache
  
  This will read in all the changes you did to news.txt, help.txt, 
  wizhelp.txt, error.txt, and all other text files.
 
& help setup
  Topic: HELP SETUP
  
  The help.txt file is set up like the news.txt file.  To see how this file
  is designed and updated, please refer to 'wizhelp news setup'.
  
  See Also: news setup

& plushelp setup
  Topic: PLUSHELP SETUP
  
  The plushelp.txt file is set up like the news.txt file.  To see how this
  file is designed and updated, please refer to 'wizhelp news setup'.

& elsefile setup
  Topic: ELSEFILE SETUP
  
  You may set up ANY file to be read from within the mush by using the
  @dynhelp command or dynhelp() function.  The only stipulation to this
  is that the file MUST end in '.txt' and the file MUST have a matching
  '.indx' at the same location.

& hook setup
  Topic: HOOK SETUP
  
  Hooks are set up by following the shown methods.
  1)  You must first create and setup a hook object to store the data.
      Once you have @created the object, the object needs to be defined
      with the 'HOOK_OBJ' admin parameter.  This may be placed in the 
      .conf file or done via @admin.  See wizhelp on hook_obj for more.
  
  2)  You must set up hooks for the commands/attributes you wish to use.
      The hooks are 'permit', 'ignore', 'before', 'after', and 'igswitch'.
      See wizhelp on 'hook_cmd' on more info of these switchtypes.
      You may use the @hook command, or use the HOOK_CMD admin parameter
      to place in a .conf file.  
  
  3)  The PERMIT and IGNORE config params are 'enabled' if they return 
      anything but a 'NULL' or a '1'.
  
  4)  The IGSWITCH config parameter is a toggle only.
  
  5)  The BEFORE and AFTER switches are automatically processed if existing.
      If you also have the INCLUDE hook, these are processed for commands
      and not functions.
  
  6)  The following attributes on the global hook object (hook_obj) exist:
         I_<command> - ignore            P_<command> - permit
         A_<command> - after             B_<command> - before
        AF_<command> - fail             AO_<command> - offline after
   
      You may use %-m for the command the person typed which will work for
      all options except AO_* where it's an offline command.
   
  7A) substitution hooks are handled with the sub_override @admin parameter.
      wizhelp on this explains in detail how substitution hooks are set up.
  
  7B) substitutions can be added as well with the sub_include @admin param.
  
{ see 'wizhelp hook setup2' for examples }

& hook setup2
  Topic: HOOK SETUP 
  
  > @create HookObject
  HookObject created as object #1234
  > @admin hook_obj=1234             (and/or in netrhost.conf: hook_obj 1234)
  > &a_look #1234=[pemit(%#,-- After The Look --)]
  > &b_look #1234=[pemit(%#,-- Before The Look --)]
  > &i_look #1234=[gt(match(v(is-ignored),%#),0)]
  > &p_look #1234=[gt(match(v(is-forbidden),%#),0)]
  > &is-ignored #1234=#5 #8 #9 #12   (this gets 'Huh? (type 'help' for help)')
  > &is-forbidden #1234=#6 #10 #15   (this gets 'Permission denied.')
  > @set #1234=sidefx                (needed to use side-effects like pemit())
  
  Note: You may use %-m (not %m, %-m) for the last command that @hook
        processed.  You may use %m as well for last command as normal, but
        %-m will always be the command issued that triggered that @hook.
  
  Now you can do one of two things:
  > @hook/before look                (netrhost.conf:  hook_cmd look before)
  > @hook/after look                 (netrhost.conf:  hook_cmd look after)
  > @hook/ignore look                (netrhost.conf:  hook_cmd look ignore)
  > @hook/permit look                (netrhost.conf:  hook_cmd look permit)
  OR...
  > @admin hook_cmd look before after ignore permit
    (netrhost.conf:  hook_cmd look before after ignore permit)
  
  There, your hook object is all set up.  If you want it to last through
  reboots, you need to either put the @hook's in a @startup, or add the 
  hook_cmd to the .conf file.  You probably want the hook_cmd :)
  
  Also if you specify INCLUDE (@hook/include) for a command, then the A_ and
  B_ for AFTER and BEFORE (respectively) are processed as if @include, ergo
  it will do command processing and not function processing.
 
{ see 'wizhelp hook setup3' for special situations }
  
& hook setup3
  Topic: HOOK SETUP
  
  Special commands like ':' for pose, and '"' for say are handled specially.
  The following are issued with @hook or hook_cmd:
  
     P - This is matching as ':' and looks for <char>_pose on the HOOK_OBJ.
         This also effects ';' as well.
     E - This is matching as '\\' and looks for <char>_@emit on HOOK_OBJ.
     S - This is matching as '"' and looks for <char>_say on HOOK_OBJ.
     F - This is matching as '#' and looks for <char>_@force on HOOK_OBJ.
     V - This is the same as '&' and looks for <char>_@set on HOOK_OBJ.
     M - This is the same as '-' and looks for <char>_mail on HOOK_OBJ.
     N - This is the same as ']' and looks for <char>_N on HOOK_OBJ.
  
  Example:
    > &A_POSE #1234=<function-executed-after-:/;/pose> 
    Set.
    > &A_N #1234=<function executed-after ] syntax>
    Set.
  
  You must use the letter representation instead of the special char when
  issuing '@hook' or 'hook_cmd'.
  
  Example:
    > @hook/before pose          (the 'pose' command)
    > @hook/before P             (handles ':' and ';')
    > @hook/before mail          (handles the 'mail' command)
    > @hook/before M             (handles the '-' input for mail)
    > @hook/after N              (handles the ']' input for no-parsing)
  
  See Also: hook_obj, hook_cmd, hook setup

& huh setup
  Topic: HUH SETUP
  
  The error.txt file is used to define what a player can see when they
  type a non-existant command. (and get the Huh? (Type 'help' for help).
  This allows you to randomize the messages a player can get.
  
  The error.txt file is set up like the news.txt file.  To see how this
  file is designed and updated, please refer to 'wizhelp news setup'.
  
& PAGELOCK TOGGLE
  Toggle: PAGELOCK (Royalty and higher)
  
  This toggle, when set on the target, will force them to evaluate the pagelock
  as if it was not overridden.  If the wizard involved is set NO_OVERRIDE or
  if the 'wiz_override' admin param is enabled, this toggle is disregarded.

  See also: pagelock_notify
  
& @rxlevel
  Command: @rxlevel[/<switch>] <target>=[<list>]
  
  Sets or clears the Rx levels for the target. If a level name in list is
  prefixed with !, then the level is cleared.
  
  The @rxlevel is used for RECEIVING reality levels.  It determines what
  the target can see/hear/interact with.
  
  You may use the following switches:
    /reset -- will reset (clear) the reality.  Using this switch you do not 
              have to specify <list>.  <list> will be applied after
              clearing.
  
  Example: @rxlevel *Joe=!Real Umbra

& @txlevel
  Command: @txlevel[/<switch>] <target>=[<list>]
  
  Sets or clears the Tx levels for the target. If a level name in list is
  prefixed with !, then the level is cleared.
  
  The @txlevel is used for TRANSMITTING reality levels.  It determines what
  things outside of the target can see/hear/interact on.
  
  You may use the following switches:
    /reset -- will reset the reality.  Using this switch you do not have
              to specify <list>.  <list> will be applied after
              clearing.

& @leveldefault
  Command: @leveldefault[/switch] <target(s)>

  This wipes all Reality Level information from the specified object.
  The purpose of this is to make the target use the Reality Level defaults
  as specified in the appropriate "def_*_rx" and "def_*tx_" config options of
  the MUSH again. This is not doable with @rxlevel and @txlevel as those always
  set an override of the defaults.
  
  Switches:
    /list - allows passing more than one target

  See also: @rxlevel, @txlevel, REALITY LEVELS

& CANSEE()
  Function: cansee(<victim>,<target>)
  
  Returns 1 if <victim>'s Rx levels intersect with <target>'s Tx levels. It
  does not take into account the location of the objects or other flags like
  DARK.

& reality_compare
  Config parameter: reality_compare <value>   Default: 0
  
  This option will optionally display the description in a given order or
  optionally stop upon the first matching reality and/or description.  The
  following options exist:
  
    0 - default.  Show all descs in ascending reality order.
    1 - reverse display of description from high bit reality down
    2 - normal order but stop after first existing desc found
    3 - reverse order but stop after first existing desc found
    4 - normal order and stop after first reality, regardless of desc
    5 - reverse order and stop after first reality, regardless of desc
  
  See Also: reality_level

& reality_level
  Config parameter: reality_level <name> <value> [<desc attribute>]
  Default: none
  
  Defines a reality level, named <name> and with bitvalue <value>. If you
  specify <desc attribute>, it will be used in place of @desc for the 'look'
  command when a match is found for the level. Can be used only in the
  configuration file.  When a reality_level is defined, it automatically
  keeps a tally of those defined.  You can currently only have 32 total
  reality levels defined.
  
  See Also: reality_compare

& reality_locks
  Config parameter: reality_locks <yes/no>.   Default: no
  
  Specifies if the USER lock (@lock/user, _NOT_ @lock/use) can be used as
  a reality lock.  If enabled, the target must be @toggled CHKREALITY so
  that the target knows that any UserLock that is on it will be used as
  a reality level lock enhancement.  Otherwise, without this toggle, the
  USER lock behaves as expected.
  
  See Also: reality_level, @list rlevel, rxlevel(), txlevel(), reality_locktype
  Normal Help: chkreality()

& reality_locktype
  Config parameter: reality_locktype <value>.   Default: 0
  
  This allows you to set what 'type' of lock you wish to have.  The lock-type
  determins in what manner the @Lock/user will evaluate for the reality_level
  checks.  The following types exist:
  
           0 - (Default)  This specifies that it should pass the reality if
               the enactor belongs to the target's reality _OR_ if they pass
               the lock on the target.  
           1 - This specifies that it should pass the reality if the enactor
               belongs to the target's reality _OR_ if the target passes the
               lock on them.
           2 - This specifies that it should pass the reality if the enactor
               belongs to the target's reality _AND_ they pass the lock on
               the target as well.  The lock must exist or auto-fails.
               Requires CHKREALITY toggle.
           3 - This specifies that it should pass the reality if the enactor
               belongs to the target's reality _AND_ the target passes the
               lock on them as well.  The lock must exist or auto-fails.
               Requires CHKREALITY toggle.
           4 - This specifies that it should pass the reality if the enactor
               belongs to the target's reality _AND_ they pass the lock on
               the target as well.  
           5 - This specifies that it should pass the reality if the enactor
               belongs to the target's reality _AND_ the target passes the
               lock on them as well.  
  
  See Also: reality_locks, reality_level, @list rlevel, rxlevel(), txlevel()
  Normal Help: chkreality()

& wiz_always_real
  Config parameter: wiz_always_real <0/1>
  Default: 0
  
  If 1, then players flagged royalty and above are always real for
  everything and everything is real for them.

& def_exit_rx
  Config parameter: def_exit_rx <value>
  Default: 1
  
  Sets the default Rx level for a newly created exit.

& def_exit_tx
  Config parameter: def_exit_rx <value>
  Default: 1
  
  Sets the default Tx level for a newly created exit.

& def_room_rx
  Config parameter: def_room_rx <value>
  Default: 1
  
  Sets the default Rx level for a newly created room.

& def_room_tx
  Config parameter: def_room_tx <value>
  Default: all (-1)
  
  Sets the default Tx level for a newly created exit.

& def_thing_rx
  Config parameter: def_thing_rx <value>
  Default: 1
  
  Sets the default Rx level for a newly created object.

& def_thing_tx
  Config parameter: def_thing_tx <value>
  Default: 1
  
  Sets the default Tx level for a newly created object.

& def_player_rx
  Config parameter: def_player_rx <value>
  Default: 1
  
  Sets the default Rx level for a newly created player.

& def_player_tx
  Config parameter: def_player_tx <value>
  Default: 1
  
  Sets the default Tx level for a newly created player.

& reality levels
  Reality levels are defined if you compile with the -DREALITY_LEVEL
  option.  Once enabled, you use the .conf admin parameter 'reality_level'
  to define new reality levels.  You can only have a total of 32 reality
  levels defined.  Realities are defined in the .conf file and take place
  upon next reboot.  They are dynamically defined and can be changed on
  the fly.  The syntax of a reality is:
  
     reality_level <8-CHAR-NAME> <UNIQUE-BIT> <OPTIONAL-DESCRIPTION>
  
  The <8-char-name> is a unique identifier/name you wish to have for the
  reality.  Anything over 8 characters is cut off.  The <unique-bit> is
  a unique numerical value that determines the bit-mask of the reality.
  Example, 1, 2, 4, 8, 16, 32, etc.  The number is a power of 2.  The
  <optional-description> is an attribute name that you wish to use for
  the @desc of the specific reality.  Anyone who can see the reality will
  see this desc in addition to any other descriptions that they can 
  normally see.
  
  {reality levels2 for more}

& reality levels2
  An example of setting up realities is as follows:
  
  In the netrhost.conf file, you would add lines like this:
  reality_level real 1 desc
  reality_level invis 2 desc
  reality_level umbra 4 umbra
  reality_level all 7 
  
  The first line defines a reality of 'real' with bitmask of '1' which
  uses the basic '@desc' for the description.  The second defines a
  reality called 'invis' (probably short for invisible) that also uses
  the normal description, but is bitmask '2'.  The third is called
  'umbra'.  It is a bitmask of '4', and uses a special description called
  'umbra' that will be parsed instead of the @desc.  The fourth 'all' 
  contains the bitmasks of all the previous realities, thus, setting
  a reality of 'all' will automatically set all the realities.
  
  You use the @txlevel and @rxlevel commands to set/remove realities from
  a player.  TX is 'transmission' and RX is 'receiving' with regards to
  the 'flow' of the reality.  Thus, @txlevel allows the target to interact
  with the specified reality, and @rxlevel allows the specified reality to
  interact with the target.  A target must belong to a reality to interact
  with it.
  
  You may use '@list rlevel' to see the current realities.
  
  See Also: @txlevel, @rxlevel, @leveldefault, @list rlevel, reality_levels
  Normal Help: txlevel(), rxlevel(), hastxlevel(), hasrxlevel(), listrlevels()
            

& mail aliases
  There are two ways to set up global aliases.  The first is with the command:
     wmail/alias     - This is static aliases
                     - refer to 'wizhelp wmail alias' on setting them up.
                     - This can't be added to but rewritten with changes.
                     Syntax: wmail/alias <alias>=<list-of-players>
  
     mail_def_object - This is dynamic aliases
                     - This is an @admin parameter (or .conf file parameter)
                       that will specify the object you wish the alias to go.
                     - This requires mush-softcode functions that will return
                       a list of dbref#'s that will be used by mail.
                     Syntax: @admin mail_def_object=<valid dbref# w/o the '#'>
                             &ALIAS.<aliasname> dbref#=<function>
                             &COMMENT.<aliasname> dbref#=<comment for alias>  
  
  wmail/alias will show the global static aliases, locks for them, and the 
  current dbref# that is being used (if any) for the dynamic aliases.
  
  mail/alias will show you (and the normal player) the aliases.  Both dynamic,
  and static.  It will list the player list with static, but _NOT_ with the
  dynamic ones.  That is why there's a comment to describe it.

& MAIL_LOCKDOWN TOGGLE
  Toggle: MAIL_LOCKDOWN (Immortal only)
  
  Specifies that the target may only issue mail/number and mail/check as a 
  mortal would.  In otherwords, they _MUST_ pass the mail share lock or they 
  will be unable to check and/or read the target's mail.  This is incase
  a wizard is being abusive.

& FUNCTION OVERLOADING
  You are allowed to overload hardcoded functions.  To do this, you set the
  specified function IGNORE (ignore, ignore_royal, etc), then you define a
  softcoded function by the same name prepended with a '_'.   So, if you
  set the function 'add' to IGNORE, you could define a function called
  '_add' that it will use in it's place.
  
  If the function was set IGNORE_ROYALTY, then immortal and higher would
  have access to the 'real' add() function, while everyone below would
  access the softcoded add() function.
  
  @function/privilege will take the level of the object the @function
  is on for permission checks (which can allow a lot of flexability)
  
  Example:
    > &FN.ADD me=%0 + %1 = [bypass(1)][add(%0,%1)][bypass(0)]
    > @function _add=me/fn.add
    > say add(1,1)
      You say "2"
    > @admin function_access=add ignore  
    > say add(1,1)
      You say "1 + 1 = 2"
  
  See Also: bypass()

& maildelete
  Config parameter: maildelete <on/off>    Default: on
  Specifies if the mail system should enable auto-mail deletion.  When
  this is enabled, whenever the time exceeds the purge time, the mail
  will automatically be marked for deletion.  The default time is 14 days.
  This value can be reset individually on players with:
              @mailtime <player>=<value>
  
  This may also be reset/set globally with the command:
              wmail/time <value>
  
  See Also: @mailtime, wmail time

& LOGROOM TOGGLE
  Toggle: LOGROOM (Wiz and higher only by default)
  
  This toggle, when set on a target container (room/object/player),
  will log everything that resides INSIDE that container for
  the duration of the toggle.  
  
  If the room is also set QUIET, notifications to the players will no
  longer occur.
  
  Note: You may specify a LOGNAME attribute on the room toggled to log
        to force the name of the logfile being logged instead of
        the default of the room dbref#.  This is parsed un-evaluated
        and is limited to alphanumeric characters only.

& MAILSEND()
  Function: mailsend(<player>, <subject>, <body> [,<key> ] [,<sender>])
  
  This will send a <player> a mail message with the specified subject
  of <subject> (which may be empty) and body <body> which must not
  be empty.
  
  If you specify a <key> of 1, the mail is sent anonymously.
  
  If you specify a <sender>, then the mail will be from the sender and
  not from the enactor.  You must be able to control sender, and sender
  must be a valid player.
   
  Note: This function requires the SIDEFX flag to run.
     
  Example:
    > say mailsend(test, Hey!, This is a mail)
    Mail: Message sent to -> Test
    Mail: Done
  
  See Also: mailread(), mailquick(), mailsize(), mailstatus(), mailquota()
  
& MAILREAD()
  Function: mailread(<player>, <index>, <type> [,<key>])
  
  This will read individual mail segments from the target player.  You
  must control the target player to read the mail.  If you specify a
  key of '1' then the message will be updated, if set NEW or UNREAD
  to 'OLD' as if the player has read the message.
  
  The following <type>'s exist:
    H - Help (default)
    I - Message Number/Index
    S - Subject
    F - From Name
    T - To Name List
    D - Date/Time
    C - Connection State (1 connect, 0 disconnect)
    G - Message Status
    ? - Message Type
    K - Message Size (in bytes)
    B - Message Body
    U - Return nothing (for key type 1 updating status)
  
  {See 'help mailread2' for examples}

& MAILREAD2
  Example:
    > mail me=This is a test message//A test
    > say mailread(me,1,s)
    You say "This is a test messsage"
    > say mailread(me,1,b)
    You say "A test"
    > say mailread(me,1,g)
    You say "NEW"
    > say mailread(me,1,u,1)
    You say ""
    > say mailread(me,1,g)
    You say "OLD"
  
  See Also: mailsend(), mailquick(), mailsize(), mailstatus(), mailquota()
    
& MAILQUOTA()
  Function: mailquota(<target> [,<key>])
  
  This function will return the results of mail/quota but in functional
  form.  The default key (0) will return all stats of the target player.
  
  The values for each of the keys is as follows:
    0 -- <receive> <receive-max> <save> <save-max> <sent> <sent-max> (default)
    1 -- <receive> <receive-max>
    2 -- <save> <save-max>
    3 -- <sent> <sent-max>
  
  Anything other key, or an invalid target player returns '-1 -1 -1 -1 -1 -1'
  
  See Also: mailquick(), mailstatus()
  
& MAILSTATUS()
  Function: mailstatus(<player> [,<status-mask>])
   
  This function returns a list of message #'s that corrrespond
  to the optional mask you provide.  This returns the same numbering
  that mail/status would show.
   
  This function takes the same arguments that mail/status does.
  u - unread           b - new & unread          m - marked
  n - new              s - saved                 o - read
  /<string> - list by subject search (case sensitive!)
  *<player> - by player
  X-Y  - by range
  pX   - by page
  X    - List out status of message #X
  
  Refer to the normal help on 'mail status' for additional help.
  
  See Also: mailquota(), mailquick()

& CONFIG()
  Please see normal help on the config() function.
  
  See Also: @admin

& ACCOUNT MEMBERSHIP
  Topic: ACCOUNT MEMBERSHIP
  
  RhostMUSH offers the capability to engineer a single signon account
  membership subsystem for logging in.  It does this through softcode
  wrapping built in feature sets.  RhostMUSH utilizes the file_object
  @admin parameter by setting up wrapped code to utilize the central
  handler.
  
  The softcode scrambles the normal password attribute and utilizes
  the attribute '_ACCT' (which you can alter how you see fit) to
  handle the hashed password entries.
  
  It uses the execscript() account/connect.sh to call the supporting 
  .txt files for connect handling.  The txt files are acct_connect.txt 
  and acct_account.txt.  To use this you need to use the config param
  'execscriptpath' and specify 'account' as a valid sub-path for
  execscript() lookups.
  
  The acct_connect.txt is the 'normal' connect screen that introduces 
  account subsystem commands to manage a central account login.
  
  The acct_account.txt is the account management connect screen
  once someone has logged into their master account.
  
  Once logged in it will display the account handler commands for
  you to login and manage your account and sub-memberships.
  
  There is a global command that will set up supporting commands for
  the account information.  These commands are:
     +su <player>     -- this swiches users to your other accounts
     +accts           -- this lists all accounts tied to the master
     +allaccts        -- staff command to list all accounts
     +allaccts <user> -- staff command to list target accounts
  
  The built in commands to help processing are:
     @conncheck/account -- Show all account statistics of logged in users
  
  The built in functions to that are used in the wrappers:
     account_su()    -- switch users to accounts
     account_owner() -- login or display the master account handler
     account_login() -- login to the mush with the account user
     account_who()   -- display ports using account handler
  
  Admin parameters you will find useful:
     file_object     -- main handler for wrapping features
     connect_methods -- disable hardcoded methods to login to the mush
     execscriptpath  -- set the execscript subdir paths allowed
                        set to 'accounts' to use the Mushcode supplied
                        subsystem.
  
  See Also: account_su(), account_owner(), account_login(), file_object,
            connect_methods, @conncheck, connect_perm
