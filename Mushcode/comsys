@@ This is version 1.2.5 beta of the AshCom II Comsystem.
@@
@@ Create Main ComSystem
@@ Fixes:
@@ Version Date         Author         Description
@@ ------- ------------ -------------- ------------------------------------------------
@@ 1.1.5   05/21/17     Ashen-Shugar   Fix for @chan/on and @chan/off to handle locks
@@ 1.1.6   08/07/17     Ashen-Shugar   Add arg %2 to locks for length of string sent,
@@                                     Also cleanup of deleting channels.
@@ 1.2.0   09/22/17     Ashen-Shugar   comset to control how output on channels work.
@@ 1.2.1   10/04/17     Ashen-Shugar   Fix a bug reported by Ixokai with +comset
@@ 1.2.2   11/24/17     Ashen-Shugar   Fix for version checking at start (warning only)
@@                                     Fix on comcfg/notify with case sensitivity
@@ 1.2.3   09/25/18     Ashen-Shugar   Add timestamp capability to channel output
@@ 1.2.4   01/13/19     Ashen-Shugar   @cboot/@clist fixes.  channels() function.
@@ 1.2.5   02/25/19     Ashen-Shugar   modified comall to optionally specify channel
@@ 1.2.6   04/01/19     Ashen-Shugar   coded changes into the comsystem
@@ 1.2.7   04/10/19     Ashen-Shugar   Added help for comfunctions
@@ 1.2.8   04/28/19     Ashen-Shugar   Minutes, Hours, Days added to last
@@ 1.2.9   05/15/19     Ashen-Shugar   Improved lock messages
@@ 1.3.0   08/10/19     Ashen-Shugar   Fixed timeformats now showing up for ./=commands
@@ 1.3.1   01/04/20     Ashen-Shugar   Fix in @cemit to allow objects to hear it
@@
@@ You need -DHACK_ATTR, -DTINY_U, -DSIDEEFFECTS all defined for this to work at compiletime!
@@
@set/quiet me=!halt
think Running pre-check of system....
think Test 1: [ifelse(eq(bittype(%#),6),Passed.,You're not an IMMORTAL.  You need an immortal to run the uploader and pre-tester.[setq(0,1)])]%rTest 2: [switch([gt(match(version(),*RhostMUSH*),0)][gt(add(after(edit(version(),.,),version),0),323)][gt(after(version(),patchlevel),13)],0*,Version is not RhostMUSH.  Very likely will not work.[setq(0,1)],?0?,Version is prior to 3.2.4.  It will not work.[setq(0,1)],?10,[ifelse(gt(strip(grab(version(),*.*),.),324),Passed.,Version is prior to 3.2.4 pl14.  It will not work.[setq(0,1)])],Passed.)]%rTest 3: [ifelse(eq(mask(config(sideeffects),11),11),Passed.,You do not have the right sideeffects enabled.  You need the following: set%(%) create%(%) pemit%(%)[setq(0,1)])]%rTest 4: [ifelse(config(sidefx_returnval),Passed.,You need 'sidefx_returnval' set to '1'.[setq(0,1)])]%rTest 5: [ifelse([strmatch(cname(me),*NOT FOUND*)],cname%(%) is undefined.  Please define this function.[setq(1,1)] - This is a warning only for this version,Passed.)]%rResults: [ifelse(r(0),Tests have failed.  You need to fix the above for the comsystem to work.,Tests succeeded.  [ifelse(r(1),%(1 Warning%))] You should now be able to load in the comsystem.)]
think %r[space(9)]---> If these tests failed, you are given [ansi(hrf,10 seconds)] to abort this script...
@@
@@
@@
@@
@@
@@
@@
@@
@@
@@
think Continuing with loading of script...
@@
@create ChanSys=10
@startup ChanSys=@function/priv cemit=[v(F-DB)]/fun_cemit;@function/priv/pres channels=[v(F-DB)]/fun_channels
&CMD_CHAN ChanSys=$^@chan(((n)?(e)?(l)?)?)(/.*)?( .*)?$:@include me/do_parsechan[match(v(cmd_switches),ifelse(!!pos(/,first(%0)),after(first(%0),/),help))]
@set ChanSys/CMD_CHAN=regexp
&CMD_ADDCOM ChanSys=$addcom *=*:@pemit %#=[u(ADDCOMMSG[setr(0,u(addcomf,setr(1,first(lcstr(secure(%0)))),setr(2,lcstr(secure(%1)))))],r(1),r(2))];@break [not(match(11,r(0)))];&_CH_ALIST %#=[setunion(get(%#/_ch_alist),[r(1)]:[r(2)])];&CHLIST_[r(2)] [v(STOR-DB)]=[null(ifelse(match(get([v(STOR-DB)]/chlist_[r(2)]),%#),,u([v(FX-DB)]/do_alias,xxx,:has joined this channel.,xxx:[r(2)])))][setunion(get([v(STOR-DB)]/chlist_[secure(%1)]),%#)]
&CMD_GENERIC_HACK ChanSys=$=*:@break [not(hasattr(%#/COMHACK))];@set me/cmd_generic_hack=!no_command;@pemit %#=[u(genericf,public,%0)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit/list [ifelse(or(and(eq(words(%0),1),match(on off who,first(%0))),match(last,first(%0))),%#,r(8))][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),mid(%0,0,1)))],public,pedit(%0,%%,\\\%,\\\%c,%c,\\\%C,%C),%#)])][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]=[switch(u(f_user_comset,##,%q1,member(v(generic_cmds),mid(%0,0,1))),1,%qb [stripansi(%qc%qk%qd)],2,%qb [stripansi(%qk%qd)],3,%qb %qk%qd,r(5))]
@set ChanSys/CMD_GENERIC_HACK = no_parse
@set ChanSys/CMD_GENERIC_HACK = singlethread
&CMD_GENERIC ChanSys=$=* *:@break [hasattr(%#/COMHACK)];@set me/cmd_generic=!no_command;@pemit %#=[u(genericf,%0,%1)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit/list [ifelse(or(and(match(on off who,first(%1)),eq(words(%1),1)),match(last,first(%1))),%#,r(8))][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),mid(%1,0,1)))],%0,pedit(%1,%%,\\\%,\\\%c,%c,\\\%C,%C),%#)])][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]=[switch(u([v(F-DB)]/f_user_comset,##,%q1,member(v(generic_cmds),mid(%1,0,1))),1,%qb [stripansi(%qc%qk%qd)],2,%qb [stripansi(%qk%qd)],3,%qb %qk%qd,r(5))]
@set ChanSys/CMD_GENERIC = no_parse
@set ChanSys/CMD_GENERIC = singlethread
&CMD_DELCOM ChanSys=$delcom *:@pemit %#=[u(DELCOMMSG[setr(0,u(delcomf,setr(1,first(lcstr(secure(%0))))))],r(1))];@break [not(r(0))];&_CH_ALIST %#=[setdiff(get(%#/_ch_alist),grab(get(%#/_ch_alist),[r(1)]:*))]
@AConnect ChanSys=@swi [totcmds(%#)]=<10,{&_CH_ALIST %#=[setunion(get(%#/_CH_ALIST),n:newbie)];@toggle %#=forcehalted;@wait 0={@fo %#=@fo %#=n on;@wait 1=@toggle %#=!forcehalted};@pemit %#=ComSys: Welcome new player. Your alias for 'Newbie' is 'n'.};@swi/f [!hasflag(%#,dark)]=1,@eval [u([v(FX-DB)]/FN_COMNOTIFYBROADCAST_EXTENDED,%#,[ifelse(match(%0,1),has reconnected.,has connected.)])]
&CMD_CLIST ChanSys=$@clist*:@pemit %#=[u(CLIST[match(/headers /full /aliases /notify /borders,%0*)])]%r[repeat(-,78)]%r[ansi(h,addcom <alias>=<channel name from above>)] to add a channel%r[repeat(-,78)]
&CMD_COMLIST ChanSys=$comlist*:@pemit %#=[ljust(Alias,10)][ljust(Channel,32)][ljust(Status,8)]Title[iter(munge(do_sort,u(order_by,%#),get(%#/_ch_alist)),%r[ljust(before(##,:),10)][s(default([v(F-DB)]/do_chancolor_[after(##,:)],[after(##,:)]))][space(sub(32,strlen(trim(after(##,:)))))][ljust(ifelse(match(get(%#/_ch_lock),after(##,:)),LCK,switch([!!match(get([v(STOR-DB)]/chlist_[after(##,:)]),%#)][!!match(get(%#/_ch_gagged),after(##,:))],10,on,11,GAGGED,OFF)),8)][get_eval(%#/_ch_alias_[after(##,:)])])]%r---- End of comlist ----
&CMD_COMTITLE ChanSys=$comtitle *=*:@pemit %#=[u(COMTITLEMSG[setr(0,u(comtitlef,%0,%1))],%0,%1)];@break [not(match(01 11,r(0)))];&_CH_ALIAS_[secure(r(3))] %#=%1
@set ChanSys/CMD_COMTITLE = no_parse
&CMD_GENERIC_NOPARSE ChanSys=$.* *:@set me/CMD_GENERIC_NOPARSE=!no_command;@pemit %#=[u(genericf,%0,%1)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit/list [ifelse(or(and(match(on off who,first(%1)),eq(1,words(%1))),match(last,first(%1))),%#,r(8))][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),mid(%1,0,1)))],%0,escapex(pedit(%1,%c,%%c,%x,%%x,%m,%%m),f;),%#)])][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]=[switch(u([v(F-DB)]/f_user_comset,##,%q1,member(v(generic_cmds),mid(%1,0,1))),1,%qb [stripansi(%qc%qk)]%qd,2,%qb [stripansi(%qk)]%qd,3,%qb %qk%qd,r(5))]
@set ChanSys/CMD_GENERIC_NOPARSE = no_parse
@set ChanSys/CMD_GENERIC_NOPARSE = singlethread
&CMD_COMCFG ChanSys=$comcfg*:@pemit %#=[u(COMCFGMSG[setr(0,gte(bittype(%#),6))],setr(1,u(comcfgf,%0,%#)),%0)];@break [not(and(r(0),r(1)))];@eval [u(comcfgdo[r(1)],%0)]
@set ChanSys/CMD_COMCFG = no_parse
&CMD_COMHELP ChanSys=$comhelp*:@pemit %#=ComSys: Help for Version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%]%r[repeat(-,78)];@pemit %#=[u([v(F-DB)]/FN_COMHELP[!!$v(0)],trim(%0))]
&CANUSE ChanSys=[or(gte(bittype(%#),6),hastype(%#,player))]
@lock/UseLock ChanSys=CANUSE/1
@Ufail ChanSys=ComSys: I'm sorry, but you can not use the comsystem.
&CMD_CEMIT ChanSys=$@cemit *=*:@pemit %#=[u(F_CHK_CEMIT,%0,%1)];@break [not(match(111,r(2)))];@pemit/list [r(8)][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(F_DO_CEMIT,%0,%1,%#)])][ulocal([v(FX-DB)]/do_hist1,secs())]=[r(5)]
&CMD_CBOOT ChanSys=$@cboot *=*:@pemit %#=[u(CBOOTMSG[setr(0,u(cbootf,%0,%1,%#))],%0,%1,%#)];@break [not(match(11,r(0)))];@eval [u(docboot,%0,%1,%#)]
&CMD_COMOPTIONS ChanSys=$comoptions:@pemit %#=ComSys: Options used to communicate on Version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%];@pemit %#=ComSys: Help Completed.[list(lnum(1,words(get([v(F-DB)]/comoptions_syntax),|)),[space(5)][ljust([extract(get([v(F-DB)]/comoptions_syntax),##,1,|)]%b,35,.)] [extract(get([v(F-DB)]/comoptions_reference),##,1,|)])]
&CMD_COMMASK ChanSys=$commask *=*:@pemit %#=[u(COMMASKMSG[setr(0,u(commaskf,secure(%0),secure(%1),%#))],secure(%0),secure(%1))];@break [not(match(r(0),10))];&_CH_MASK_[first(secure(%0))] %#=[secure(%1)]
&CMD_COMPREFIX ChanSys=$comprefix*:@pemit %#=[u(COMPREFIXM[setr(0,u(comprefixf,trim(%0)))],trim(%0))];@break [!match(11,%q0)];&_COM_PREFIX %#=[trim(remove(lcstr(%0),/clear))]
&CMD_COMALL ChanSys=$comall*:@pemit %#=[ifelse(gte(bittype(%#),5),u(do_comall,trim(%0)),ComSys: Permission Denied.)]
&CMD_COMGAG ChanSys=$comgag*:@pemit %#=[u(FN_COMGAG[match(/on /off /list,first(%0))],rest(%0))]
&CMD_COMNOTIFY ChanSys=$comnotify*:@pemit %#=[u(FN_COMNOTIFY[match(/enable /disable /list /on /off /compress,first(%0))],rest(%0))]
&CMD_COMSET ChanSys=$comset*:@pemit %#=[u([v(F-DB)]/FN_COMSET[match(/set /unset /list,first(%0))],first(rest(%0)),rest(rest(%0)),%#)]
&CMD_COMCHANGES ChanSys=$comchanges:@pemit %#=[u(FN_COMCHANGES)]
&CMD_COMFUNCTIONS ChanSys=$comfunctions:@pemit %#=[u([v(F-DB)]/fn_comhelp_comfunctions)]
@Adisconnect ChanSys=@swi/f [!hasflag(%#,dark)]=1,@eval [u([v(FX-DB)]/FN_COMNOTIFYBROADCAST_EXTENDED,%#,has disconnected.)]
@set ChanSys/cmd_comprefix=no_parse
@set ChanSys=INHERIT
@set ChanSys=SHOWFAILCMD
@@
@@ Create Channel DB
@@
@create ChannelDB=10
@set ChannelDB=INHERIT
@set ChannelDB=HALTED
@set ChannelDB=SAFE
@@
@@ Create Global Error Object
@@
@create GlobalErrObject=10
@VA GlobalErrObject=[localize(u(VA_%vd,%0))]
&VA_0 GlobalErrObject=[ifelse(!!member(+ [get(%#/_COM_PREFIX)],mid(%0,0,1)),u(vc,pedit(delete(%0,0,1),%%,\\\%,\\\%c,%c,\\\%C,%C)),u(vb,pedit(%0,%%,\\\%,\\\%c,%c,\\\%C,%C)))]
&VA_1 GlobalErrObject=[ifelse(!!member(+ [get(%#/_COM_PREFIX)],mid(%0,0,1)),u(vf,escapex(delete(%0,0,1),;)),u(ve,escapex(%0,;)))]
@VB GlobalErrObject=[switch([gt(words(rest(%0)),0)][and(match(get(%#/_CH_ALIST),[first(edit(edit(%0,?,\\\\\\?),*,\\\\\\*))]:*),not(match(get(%#/_ch_lock),after(grab(get(%#/_ch_alist),[first(%0)]:*),:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(%0),rest(%0),grab(get(%#/_ch_alist),[first(%0)]:*)),u(fn_error,%0))]
@vc GlobalErrObject=[switch([gt(words(rest(%0)),0)][setq(t,grab(get(%#/_ch_alist),[first(%0)]:*))][ifelse(!$r(t),setq(t,grab(get(%#/_ch_alist),*:[first(%0)]*)))][ifelse(!$r(t),setq(t,*:[grab(get([v(STOR-DB)]/ch_list),[first(%0)]*)]))][and(match(get(%#/_ch_alist),%qt),not(match(get(%#/_ch_lock),after(%qt,:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(%0),rest(%0),xxx:[after(%qt,:)]),u(fn_error,%0))]
@VD GlobalErrObject=0
@VE GlobalErrObject=[switch([gt(words(rest(%0)),0)][and(match(edit(get(%#/_CH_ALIST),*,#),[first(pedit(%0,?,#,*,#))]:*),not(match(get(%#/_ch_lock),after(grab(edit(get(%#/_ch_alist),*,#),[first(pedit(%0,?,#,*,#))]:*),:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(edit(%0,*,#)),rest(%0),grab(edit(get(%#/_ch_alist),*,#),[first(pedit(%0,?,#,*,#))]:*)),u(fn_error,%0))]
@vf GlobalErrObject=[switch([gt(words(rest(%0)),0)][setq(t,grab(get(%#/_ch_alist),[first(%0)]:*))][ifelse(!$r(t),setq(t,grab(get(%#/_ch_alist),*:[first(%0)]*)))][ifelse(!$r(t),setq(t,*:[grab(get([v(STOR-DB)]/ch_list),[first(%0)]*)]))][and(match(get(%#/_ch_alist),%qt),not(match(get(%#/_ch_lock),after(%qt,:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(%0),rest(%0),xxx:[after(%qt,:)]),u(fn_error,%0))]
&FN_ERROR_ALTERNATE GlobalErrObject=[setq(w,textfile(help,*%0*,2))][ifelse(or(hasattr(%#,NOERROR),strmatch(%qw,*here are no entries*)),error(%#),[error(%#)]%rHowever%, you may try one of:%r[trim(after(%qw,:),b,%r)])]
&FN_ERROR GlobalErrObject=[error(%#)]
@set GlobalErrObject=INHERIT
@set GlobalErrObject=SAFE
@set GlobalErrObject=SIDEFX
@@
@@ Create Main Functionary
@@
@create ChanFunc=10
@parent ChanSys=ChanFunc
&F_USER_COMSET ChanFunc=[ifelse(member(4 5 7,%2),0,localize([setq(z,grab(get(%0/_ch_comset),+all:*))][ifelse(!$r(z),setq(z,grab(get(%0/_ch_comset),%1:*)))][add(0,after(%qz,:))]))]
&FUN_CEMIT ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,u(F_CHK_CEMIT,%0,%1))][ifelse(match(111,r(2)),u([v(FX-DB)]/do_genpemit,[r(8)][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(F_DO_CEMIT,%0,%1,%#)])][ulocal([v(FX-DB)]/do_hist1,secs())],r(5)))]
&FUN_CHANNELS ChanFunc=[switch([setq(0,ifelse(words(%0),%0,%#))][and(!!^setr(1,pfind(%q0)),controls(%#,%q1))][gt(words(%2),0)],10,u([v(F-DB)]/clist_func,%q1,ifelse(words(%1),%1,%b)),11,u([v(F-DB)]/clist_onlinefunc,%q1,ifelse(words(%1),%1,%b)))]
&STRIP_ALL ChanFunc=[ifelse(strmatch(stripaccents(),*NOT FOUND),stripansi(%0),stripansi(stripaccents(%0)))]
&FUN_CNAME ChanFunc=[u(fun_captiontitle,%0)][switch([strmatch(name(%0),u(strip_all,get(%0/ansiname)))][hastoggle(%0,extansi)][hasattr(%0,ansiname)],111,[get(%0/ansiname)][ansi(n,)],001,ansi(get(%0/ansiname),name(%0)),name(%0))][u(fun_caption,%0)]
&FUN_CAPTION ChanFunc=[ifelse(hasattr(%0,caption),%b[get(%0/caption)])]
&FUN_CAPTIONTITLE ChanFunc=[ifelse(hasattr(%0,titlecaption),[get(%0/titlecaption)]%b)]
&FUN_CNAME2 ChanFunc=[switch([strmatch(name(%0),u(strip_all,get(%0/ansiname)))][hastoggle(%0,extansi)][hasattr(%0,ansiname)],111,[get(%0/ansiname)][ansi(n,)],001,ansi(get(%0/ansiname),name(%0)),name(%0))]
&FUN_MASKCNAME ChanFunc=[switch([strmatch(get(%0/_ch_mask_%1),u(strip_all,get(%0/ansiname)))][hastoggle(%0,extansi)][hasattr(%0,ansiname)],111,[get(%0/ansiname)][ansi(n,)],001,ansi(get(%0/ansiname),get(%0/_ch_mask_%1)),get(%0/_ch_mask_%1))]
&COMPREFIXF ChanFunc=[!!words(%0)][or(!!strfunc(and,1 [iter(%0,eq(strlen(itext(0)),1))]),match(%0,/clear))]
&COMPREFIXM00 ChanFunc=ComSys: [words(get(%#/_COM_PREFIX))] prefixes defined[ifelse(words(get(%#/_COM_PREFIX)),:%b%b [get(%#/_com_prefix)])]
&COMPREFIXM10 ChanFunc=ComSys: Each comsystem prefix must be one character.
&COMPREFIXM11 ChanFunc=ComSys: [ifelse(match(%0,/clear),comsystem prefixes cleared,[words(%0)] comsystem prefixes set)].
&COMMASKF ChanFunc=[gt(match(get([v(STOR-DB)]/commask_chanlist),%0),0)][and(words(%1),or(words(search(eplayer=strmatch\(get\(##/_ch_mask_%0\)\,%1\))),hastype(*%1,player)))]
&COMMASKMSG11 ChanFunc=ComSys: Either that alias mask already exists or it matches a player name.
&COMMASKMSG10 ChanFunc=ComSys: [ifelse(words(%1),Mask alias of '%1' set for channel '%0'.,Mask alias for channel '%0' cleared.)]
&COMMASKMSG01 ChanFunc=[u(commaskmsg00)]
&COMMASKMSG00 ChanFunc=ComSys: Sorry, you are not allowed to 'mask' names on that channel.
&CHANONF ChanFunc=[setq(5,ifelse(isdbref(pmatch(%3)),pmatch(%3),%#))][and(%0,isdbref(r(5)))][ifelse(and(or(gte(bittype(%#),5),uldefault([v(F-DB)]/[r(2)]_lock,1,r(5),JOIN)),match(get([v(STOR-DB)]/ch_list),r(2))),1,0)][ifelse(match(get([v(STOR-DB)]/chlist_[r(2)]),r(5)),setq(4,1),setq(4,0))]
&CHANONMSG00 ChanFunc=ComSys: Invalid channel specified. Use @clist for a list of channels.
&CHANONMSG10 ChanFunc=[u(CHANONMSG00,%0,%1)]
&CHANONMSG01 ChanFunc=ComSys: Invalid player specified.
&CHANONMSG11 ChanFunc=[ifelse(r(4),ComSys: [ifelse(match(r(5),%#),You are,[name(r(5))] is)] already on that channel.)]
&CHANOFFF ChanFunc=[setq(5,ifelse(isdbref(pmatch(%3)),pmatch(%3),%#))]%0[and(%1,or(gte(bittype(%#),5),uldefault([v(F-DB)]/[r(2)]_lock,1,r(5),LEAVE)))][ifelse(match(get([v(STOR-DB)]/chlist_[r(2)]),r(5)),setq(4,0),setq(4,1))]
&CHANOFFMSG00 ChanFunc=[u(CHANONMSG00,%0,%1)]
&CHANOFFMSG10 ChanFunc=[u(CHANONMSG00,%0,%1)]
&CHANOFFMSG01 ChanFunc=[u(CHANONMSG01,%0,%1)]
&CHANOFFMSG11 ChanFunc=[ifelse(r(4),ComSys: [ifelse(match(r(5),%#),You are,[name(r(5))] is)] already off that channel.)]
&ADDCOMF ChanFunc=[and(gt(words(%0),0),not(match(get(%#/_ch_alist),%0:*)))][and(match(get([V(STOR-DB)]/ch_list),%1),or(gte(bittype(%#),5),uldefault([v(F-DB)]/%1_lock,1,%#,JOIN)),not(match(get(%#/_ch_lock),%1)))]
&ADDCOMMSG00 ChanFunc=ComSys: Invalid channel specified. Use @clist for a list of channels.
&ADDCOMMSG10 ChanFunc=[u(addcommsg00,%0,%1)]
&ADDCOMMSG01 ChanFunc=ComSys: [ifelse(words(%0),That alias already exists. Delete it first.,Invalid alias specified. Alias must be 1 or more printable characters.)]
&GENERICF ChanFunc=[setq(1,grab(get([v(STOR-DB)]/ch_list),%0*))][ifelse(!$r(1),setq(1,after(grab(get(%#/_ch_alist),%0:*),:)))][setq(1,ifelse(or(words(r(1)),words(%0)),r(1),public))][setq(h,!!match(get(%#/_ch_gagged),%q1))][switch([setr(2,[gt(words(r(1)),0)][and(uldefault([r(1)]_lock,1,%#,[switch([match(on off,%1)],1,JOIN,2,LEAVE,TALK)],strlen(%1)),not(match(get(%#/_ch_lock),r(1))))])][or(strmatch(on,%1),gt(match(setr(8,setinter(lwho(),u([v(FX-DB)]/do_gagging,r(1)))),%#),0))][and(strmatch(on,%1),not(match(get([v(STOR-DB)]/CHLIST_[r(1)]),%#)))][and(strmatch(on,%1),match(get([v(STOR-DB)]/CHLIST_[r(1)]),%#))],0*,ComSys: Sorry\, that channel does not exist.,?0*,u([v(F-DB)]/process_error),*00?,[ifelse(%qh,Comsys: Sorry%, that channel is currently gagged.,ComSys: Sorry%, you are not on that channel - %qh.)],*11?,[setq(8,setunion(r(8),%#))],*?01,ComSys: You are already on that channel[setq(2,10)])]
&FORMAT_CHAN ChanFunc=[setr(b,[ulocal(do_timeformat,%q1,timefmt($02H,secs()),timefmt($02T,secs()),timefmt($02S,secs()),timefmt($02M,secs()),timefmt($02D,secs()),timefmt($04Y,secs()))]%q3[u(DO_CHANCOLOR,r(1))]%q4)][ifelse(hasattr(%0/_CH_ALIAS_[r(1)]),[setq(7,localize([setq(9,get(%0/_ch_alias_[r(1)]))][objeval(%0,[s(r(9))]%b)]))],setq(7,))][setq(c,%q7)]
&GENERICDO0 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][setr(k,[ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))])][setr(d,%b[u(fn_saystring,%2)] "[objeval(%2,ansi(default(%2/_CH_ANSI_%q1,get(%2/_CH_ANSI)),s(%1)))]")])]
&GENERICDO1 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][setr(k,[ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))])][setr(d,%b[objeval(%2,ansi(default(%2/_CH_ANSI_%q1,get(%2/_CH_ANSI)),s(after(%1,:))))])])]
&GENERIC_CMDS ChanFunc=: ; " o w ` l
&GENERICDO2 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][setr(k,[ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))])][setr(d,[ifelse(match(;,trim(mid(%1,0,2))),%b,)][objeval(%2,ansi(default(%2/_CH_ANSI_%q1,get(%2/_CH_ANSI)),s(after(%1,;))))])])]
&GENERICDO3 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][setr(k,[ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))])][setr(d,%b[u(fn_saystring,%2)] [objeval(%2,"[ansi(default(%2/_CH_ANSI_%q1,get(%2/_CH_ANSI)),s(delete(%1,0,1)))]")])])]
&DO_CHANCOLOR ChanFunc=[u(do_chancolorsub,%0)]
&DO_CHANCOLORSUB ChanFunc=[ifelse(hasattr([v(F-DB)],do_chancolor_over_%0),u(do_chancolor_over_%0,%0),u(do_chancolor_%0,%0))]
&CH_TEMPLATE1 ChanFunc=[
&CH_TEMPLATE2 ChanFunc=]
&ADDCOMMSG11 ChanFunc=ComSys: Alias of '[secure(%0)]' set for channel '[capstr(lcstr(%1))]'.
&GENERICDO4 ChanFunc=[ifelse(member(on off,lcstr(%1)),[ifelse(match(%1,on),ulocal([v(FX-DB)]/do_joinchan,%#,1,r(1)))][ifelse(and(gte(bittype(%#),5),hasflag(%#,dark)),[u(format_chan,r(1))] You have STEALTH [ifelse(match(%1,on),joined,left)] this channel.,ulocal([v(FX-DB)]/do_alias,xxx,:has [ifelse(match(%1,on),joined,left)] this channel.,xxx:[r(1)]))][ifelse(match(%1,off),ulocal([v(FX-DB)]/do_joinchan,%#,0,r(1)))],[u(genericdo[strip(member(v(generic_cmds),mid(%1,0,1)),v(generic_strip))],%0,%1,%2,%3)])]
&GENERICDO5 ChanFunc=[ifelse(match(who,%1),u(dowho,%2),u(genericdo[strip(member(v(generic_cmds),mid(%1,0,1)),v(generic_strip))],%0,%1,%2,%3))]
&DELCOMF ChanFunc=[gt(match(get(%#/_ch_alist),%0:*),0)]
&DELCOMMSG0 ChanFunc=ComSys: You do not have an alias by the name of '%0'.
&DELCOMMSG1 ChanFunc=ComSys: Alias '%0' has been deleted.
&DOWHO ChanFunc=[printf($78^:-:s,-channel [u(do_chancolor_%q1)] listing -)][ifelse(hasattr(v(F-DB),DO_CHANCOLOR_OVER_%q1),%r[printf($78^s,- masked as [u(do_chancolor_over_%q1)] -)])]%r*** players ***[iter(setinter(objeval(%#,lwho()),get([v(STOR-DB)]/chlist_[r(1)])),%r[space(5)][ljust([ifelse(setr(9,hasattr(##,_ch_mask_[r(1)])),get(##/_ch_mask_[r(1)]),cname(##))][ifelse(objeval(%#,visible(##)),%(##[objeval(%#,flags(##))]%) [ifelse(r(9),%{[cname(##)]%})])],50)][ljust(ifelse(match(get(##/_ch_gagged),r(1)),%[gagged%],%b),10)][ifelse(gt(idle(##),120),Idle [switch(setr(w,singletime(idle(##))),*m*,ansi(hg,%qw),*h*,ansi(hy,%qw),ansi(hr,%qw))])])]%r*** objects ***[setq(0,iter(keeptype(get([v(STOR-DB)]/chlist_[r(1)]),thing),ifelse(or(not(hasflag(##,dark)),controls(%#,##)),##)))][iter(r(0),%r[cname(##)][ifelse(controls(%#,##),%(##[flags(##)]%) <Owned by: [name(owner(##))]%(##%)>)])][ifelse(words(r(0)),,%r%(None Found%))]%r[repeat(-,78)]
&CLIST0 ChanFunc=ComSys: Unrecognized switch for @clist.
&CLIST1 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,25)][space(3)]Description)][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#,ALL),gte(bittype(%#),5)),[space(4)][u(do_chancolor_##)][space(sub(25,strlen(##)))][ifelse(match(get(%#/_ch_lock),##),%bL%b,%b%b%b)][wrap(get([V(STOR-DB)]/chdesc_##),45,l,,,32)]))]---- End of list of channels ----
&CLIST2 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,44)][ljust(--Flags--,11,-)][space(3)][rjust(Users,7)][rjust(Messages,11)])][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#,ALL),gte(bittype(%#),5)),printf([space(4)]$-44s$-11s$-3s$7s$11s,u(do_chancolor_##,##),[ifelse(match(get([v(STOR-DB)]/commask_chanlist),##),M,-)][ifelse(match(get(%#/_ch_gagged),##),g,-)][ifelse(match(get([v(STOR-DB)]/chlist_##),%#),o,-)][ifelse(hasattr([v(F-DB)]/##_lock),L,-)][switch(u([v(F-DB)]/f_user_comset,%#,##,0),1,A-,2,AT,3,-T,--)]-----,ifelse(match(get(%#/_ch_lock),##),%bL%b),words(get([v(STOR-DB)]/chlist_##)),add(0,get([v(STOR-DB)]/chused_##)))))]---- End of list of channels ----%rKey: M (alias enabled), g (gagged), o (online), L (locked), %r[space(5)]A (no-ansi), T (no-comtitle)
&CLIST3 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,25)][space(3)]Channel Alias ReName)][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#,ALL),gte(bittype(%#),5)),[space(4)][u(do_chancolor_##)][space(sub(25,strlen(##)))][ifelse(match(get(%#/_ch_lock),##),%bL%b,%b%b%b)][ifelse(hasattr([v(F-DB)],do_chancolor_over_##),u(do_chancolor_over_##,##),u(do_chancolor_##,##))]))]---- End of list of channels ----
&CLIST4 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,25)][space(3)]Notify[space(4)]Broadcast)][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#,ALL),gte(bittype(%#),5)),[space(4)][u(do_chancolor_##)][space(sub(25,strlen(##)))][ifelse(match(get(%#/_ch_lock),##),%bL%b,%b%b%b)][ljust(switch([or(match(get([v(F-DB)]/notify_list),0),and(hasattr([v(F-DB)]/notify_list),!match(get([v(F-DB)]/notify_list),##)))][or(match(get(%#/_ch_notify),##),match(get(%#/_ch_notify),+all))],1?,[ansi(c,IGNORED)],?1,[ansi(hr,DISABLED)],[ansi(hg,enabled)]),10)][switch([or(match(get(%#/_ch_unnotify),##),match(get(%#/_ch_unnotify),+all))][or(match(get([v(F-DB)]/notify_list),0),and(hasattr([v(F-DB)]/notify_list),!match(get([v(F-DB)]/notify_list),##)))],?1,[ansi(c,IGNORED)],1?,[ansi(hr,DISABLED)],[ansi(hg,enabled)])]))]---- End of list of channels ----
&CLIST5 ChanFunc=[list(u([v(F-DB)]/clist_func,%#),[printf($-15s $-25s $-15s,default([v(F-DB)]/ch_template1_%i0,get([v(F-DB)]/ch_template1)),u(do_chancolor_%i0),default([v(F-DB)]/ch_template2_%i0,get([v(F-DB)]/ch_template2)))],,[printf($-15:.:s $-25:.:s $-15:.:s,Left-Border,Channel-Name,Right-Border)])]---- End of list of channels ----
&CLIST_FUNC ChanFunc=[trim(squish(iter(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%0,ALL),gte(bittype(%0),5)),##),,ifelse(!$v(1),%b,%1))))]
&CLIST_ONLINEFUNC ChanFunc=[trim(squish(iter(get([v(STOR-DB)]/ch_list),ifelse(match(get([v(STOR-DB)]/CHLIST_##),%0),##),,ifelse(!$v(1),%b,%1))))]
&FN_COMSET0 ChanFunc=ComSys: COMSET -- Invalid switch specified. Use /set, /unset, or /list.
&FN_COMSET1 ChanFunc=[switch([and(!match(%0,+all),match(get(%2/_ch_comset),+all:*))][!!match([get([v(STOR-DB)]/CH_LIST)] +all,%0)][gt(add(0,%1),0)],1??,ComSys: COMSET - Either clear +all or reset value,?0?,ComSys: COMSET - Channel [secure(%0)] not found,??0,ComSys: COMSET - Value must be between 1-3,011,ComSys: COMSET - %0 set with permission %1[u([v(FX-DB)]/do_comset_set,%2,%0,%1)],ComSys: Woopse!  Something bad happened.)]
&FN_COMSET2 ChanFunc=[switch(!!match(get(%2/_ch_comset),%0:*),0,ComSys: COMSET - Specific entry not found to remove,1,ComSys: COMSET - %0 removed[u([v(FX-DB)]/do_comset_unset,%2,%0)])]
&FN_COMSET3 ChanFunc=ComSys: COMSET - Current settings for channels%r[repeat(-,78)][ifelse(!hasattr(%2,_ch_comset),%rN/A - Nothing set,iter(get(%2/_ch_comset),%r[printf($-50:.:s $s,before(%i0,:),[after(%i0,:)] %([extract(get([v(F-DB)]/fn_comset_opts),after(%i0,:),1)]%))]))]%r[repeat(-,78)]
&FN_COMSET_OPTS ChanFunc=NOANSI NOANSI/NOCOMTITLE NOCOMTITLE
&FN_COMGAG0 ChanFunc=Comsys: COMGAG -- Invalid switch specified. Use /on, /off, or /list.
&FN_COMGAG1 ChanFunc=[ifelse(and(!match(%0,+all),or(!$u([v(F-DB)]/do_chancolor,%0),match(get(%#/_ch_gagged),%0))),ComSys: COMGAG -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 already in your gagged list,Channel %0 is not a valid channel)],[u([v(FX-DB)]/fn_gagset,%#,add,%0)]ComSys: COMGAG -- [ifelse(match(%0,+all),ALL CHANNELS,[u([v(F-DB)]/do_chancolor,%0)])] added to your gag list.)]
&FN_COMGAG2 ChanFunc=[ifelse(match([get(%#/_ch_gagged)] +all,%0),[u([v(FX-DB)]/fn_gagset,%#,remove,%0)]ComSys: COMGAG -- [ifelse(match(%0,+all),ALL CHANNELS,[u([v(F-DB)]/do_chancolor,%0)])] removed from your gag list.,ComSys: COMGAG -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 not in your gagged list,Channel %0 is not a valid channel)])]
&FN_COMGAG3 ChanFunc=ComSys: Channels currently gagged:%r[repeat(-,78)]%r[ifelse(hasattr(%#,_ch_gagged),elist(get(%#/_ch_gagged),,,,,u([v(F-DB)]/do_chancolor,%0)),No Channels set as gagged found)]%r[repeat(-,78)]
&FN_COMNOTIFY0 ChanFunc=ComSys: COMNOTIFY -- Invalid switch specified. Use /enable, /disable, /on, /off, /list, or /compress.
&FN_COMNOTIFY1 ChanFunc=[ifelse(or(!$u([v(F-DB)]/do_chancolor,%0),!match(get(%#/_ch_notify),%0)),ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 already enabled for connect/disconnect notification,[ifelse(match(%0,+all),ALL channels [ifelse(!hasattr(%#,_ch_notify),are already enabled,enabled)] for connect/disconnect notification[u([v(FX-DB)]/fn_notifyset,%#,clear,%0)],Channel %0 is not a valid channel)])],[u([v(FX-DB)]/fn_notifyset,%#,add,%0)]ComSys: COMNOTIFY -- [u([v(F-DB)]/do_chancolor,%0)] enabled for connect/disconnect notification)]
&FN_COMNOTIFY2 ChanFunc=[ifelse(or(match(get(%#/_ch_notify),+all),match(get(%#/_ch_notify),%0)),ComSys: COMNOTIFY -- [ifelse(match(%0,+all),ALL channels,u([v(F-DB)]/do_chancolor,%0))] already disabled for connect/disconnect notification,ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 disabled for connect/disconnect notification[u([v(FX-DB)]/fn_notifyset,%#,remove,%0)],[ifelse(match(%0,+all),ALL channels disabled from connect/disconnect messages[u([v(FX-DB)]/fn_notifyset,%#,all,%0)],Channel %0 is not a valid channel)])])]
&FN_COMNOTIFY3 ChanFunc=ComSys: Channels currently disabled from connect/disconnect notification:%r[repeat(-,78)]%r[ifelse(hasattr(%#,_ch_notify),elist(get(%#/_ch_notify),,,,,ifelse(match(%0,+all),ALL CHANNELS DISABLED,u([v(F-DB)]/do_chancolor,%0))),No Channels disabled from connect/disconnect messages)]%r[repeat(-,78)]%rComSys: Channels currently disabled from connect/disconnect broadcasting:%r[repeat(-,78)]%r[ifelse(hasattr(%#,_ch_unnotify),elist(get(%#/_ch_unnotify),,,,,ifelse(match(%0,+all),ALL CHANNELS DISABLED,u([v(F-DB)]/do_chancolor,%0))),No Channels disabled from connect/disconnect broadcasting)]%r[repeat(-,78)]
&FN_COMNOTIFY4 ChanFunc=[ifelse(or(!$u([v(F-DB)]/do_chancolor,%0),!match(get(%#/_ch_unnotify),%0)),ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 already enabled for connect/disconnect broadcasting,[ifelse(match(%0,+all),ALL channels [ifelse(!hasattr(%#,_ch_unnotify),are already enabled,enabled)] for connect/disconnect broadcasting[u([v(FX-DB)]/fn_notifyunset,%#,clear,%0)],Channel %0 is not a valid channel)])],[u([v(FX-DB)]/fn_notifyunset,%#,add,%0)]ComSys: COMNOTIFY -- [u([v(F-DB)]/do_chancolor,%0)] enabled for connect/disconnect broadcasting)]
&FN_COMNOTIFY5 ChanFunc=[ifelse(or(match(get(%#/_ch_unnotify),+all),match(get(%#/_ch_unnotify),%0)),ComSys: COMNOTIFY -- [ifelse(match(%0,+all),ALL channels,u([v(F-DB)]/do_chancolor,%0))] already disabled for connect/disconnect broadcasting,ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 disabled for connect/disconnect broadcasting[u([v(FX-DB)]/fn_notifyunset,%#,remove,%0)],[ifelse(match(%0,+all),ALL channels disabled from connect/disconnect broadcasting[u([v(FX-DB)]/fn_notifyunset,%#,all,%0)],Channel %0 is not a valid channel)])])]
&FN_COMNOTIFY6 ChanFunc=[ifelse(hasattr(%#/_ch_compress),Comsys: COMNOTIFY -- Compression has been disabled,Comsys: COMNOTIFY -- Compression has been enabled)][u([v(FX-DB)]/do_comnotify_compress,%#)]
&FN_COMHELP0 ChanFunc=[repeat(-,78)]%rComSys: Help completed. %[Individual topic help available: comhelp <topic>%]%r[space(8)]Use 'eq' for '=', and 'alias' for '<alias>'[list(lnum(1,words(get([v(F-DB)]/comhelp_syntax),|)),printf([space(2)]$:.:-45s $-30s,extract(get([v(F-DB)]/comhelp_syntax),##,1,|)%b,extract(get([v(F-DB)]/comhelp_reference),##,1,|)))]
&FN_COMHELP11 ChanFunc=[u(FN_COMHELP_%0)]%r[repeat(-,78)]%rComSys: Individual Topic Help completed.
&FN_COMHELP1 ChanFunc=[u(FN_COMHELP1[!!match(v(comhelp_topics),%0)],%0)]
&FN_COMHELP10 ChanFunc=[center(No such topic '%0'. Please choose one of:,78)]%r%b[repeat(+,76)]%r[columns(v(comhelp_topics),20,3,l,,,%b+%b%b,%b%b+%b%b,%b%b+,0,,,1)]%r%b[repeat(+,76)]%r[repeat(-,78)]%rComSys: Individual Topic Help completed.%r[space(8)]Use 'eq' for '=', and 'alias' for '<alias>'.
&COMHELP_TOPICS ChanFunc=comhelp addcom eq . alias delcom @clist comlist comtitle comcfg @cemit @cboot commask comprefix comoptions @channel comall comgag comnotify comset comchanges comfunctions
&FN_COMHELP_COMHELP ChanFunc=Syntax: comhelp %[<topic>%]%r%rThe comhelp command shows this screen as well as%rthe main index for the comsystem help.
&FN_COMHELP_ADDCOM ChanFunc=Syntax: addcom <alias>=<channel>%r%rThis will add alias(es) to the channel specified.%rYou may have more than one alias per channel.%r%rNote: This does not automatically add you to the channel.%rYou must specify <alias> on to join the channel and <alias> off to leave.
&FN_COMHELP_EQ ChanFunc=Syntax: =<channel> <message>%r%rThis allows you to talk on the channel as an optional method.%rAll posing and other syntax is available with this option.
&FN_COMHELP_. ChanFunc=Syntax: .<channel> <message>%r%rThis allows you to talk on the channel and not automatically parse%rwhat you say. It's handy for quoting up code.
&FN_COMHELP_DELCOM ChanFunc=Syntax: delcom <alias>%r%rThis will remove the alias from your alias lists.%r%rNote: This does not cause you to leave the channel. To leave the%rchannel, you must use <alias> off.
&FN_COMHELP_@CLIST ChanFunc=Syntax: @clist%[/switch%]%r%rThis allows you to display all available channels to you in varous%rformats for display.%r%r[space(5)]@clist -- default listing%r[space(5)]@clist/full -- full listing with channel output%r[space(5)]@clist/alias -- the channel name alias that shows up when talking on channel%r[space(5)]@clist/notify -- the notification broadcasting settings you have for channels.%r[space(5)]@clist/borders -- Show the left and right borders for each channel.
&FN_COMHELP_COMLIST ChanFunc=Syntax: comlist%r%rThis lists all your aliases and matching channels for those aliases.%r%rIt will display the status of the channel as well%ras any comsystem titles you may have in use for that channel.
&FN_COMHELP_COMTITLE ChanFunc=Syntax: comtitle <channel>=<title>%r%rThis specifies a comtitle you wish to set for use on the comsystem.%r%rComtitles -are- evaluated, but as yourself. Now you know how to get those randomized comtitles in :)
&FN_COMHELP_COMCFG ChanFunc=Syntax: comcfg%[/switch%] %[<option(s)>%]%r%rThis is a wizard command. Help is available with comcfg/help
&FN_COMHELP_@CEMIT ChanFunc=Syntax: @cemit <channel>=<string>%r%rThis will @cemit on the target channel.%r%rYou must either be a wizard or pass the lock to use it.
&FN_COMHELP_@CBOOT ChanFunc=Syntax: @cboot <target>=<channel>%r%rThis is a wizard command to boot the target player/item off the channel.
&FN_COMHELP_COMMASK ChanFunc=Syntax: commask <channel>=<alias>%r%rSet up an alias (masked name) for use on the channel.%r%rThe channel must be configured to allow com masking to use this.
&FN_COMHELP_COMPREFIX ChanFunc=Syntax: comprefix%[/switch] <character(s)>%r%rThis will set up a prefix characgter you can use in addition%rto all the other ones for the comsystem. You may specify '+' and then use +pub%rfor example for talking on channel.%r%rThe /clear switch will remove the prefix character from your settings.
&FN_COMHELP_COMOPTIONS ChanFunc=Syntax: comoptions%r%rThis shows the various special prefix characters that the comsystem will%rhandle. It's pretty self-explainatory.%r%rThe com-to options will still broadcast to everyone, but it formats a 'to user-list' nicely.
&FN_COMHELP_COMSET ChanFunc=Syntax: comset%[/switch%] <channel> <value>%r%rThis lets you set specific channel (or system wide) settings for various%rsettings for the comsystem.  Current settings are:%r[space(5)]1 - NOANSI%r[space(5)]2 - NOANSI/NOCOMTITLE%r[space(5)]3 - NOCOMTITLE%r%rNOANSI specifies you do not wish to see any ansi (except chan name)%rand will muffle all other ansi with the exception of%rthe 'To:' option with player names.  This is intentional.%rThe NOCOMTITLE option snuffs you receiving player comtitles%ron the specified channel.%r%rYou may specify +all to specify system-wide settings as it specifies%rall channels.%r%rThe specific options are available for the comset command:%r/set - this will set (or modify an existing) channel with%r[space(10)]the specific value you specify.  If you speicify +all it will purge%r[space(10)]all other entries as it assumes you set global overrides.%r[space(10)]This option requires a channel and a value between 1 and 3.%r/unset - this will remove the specified channel (or +all) from the%r[space(10)]options.  You must remove +all before setting individual%r[space(10)]channels.  This is intentional.%r[space(10)]This option requires a channel name only.%r/list - this lists what channels (if any) you have options on.%r[space(10)]This does not require any additional arguments.
&FN_COMHELP_COMALL ChanFunc=Syntax: comall%r%rHoly this is a spammy function!%rIt will display all users on all channels that you have access to.
&FN_COMHELP_COMGAG ChanFunc=Syntax: comgag%[/switch%] <channel>%r%rThis will allow you to manipulate the gagging of channel output.%r%r/on -- this turns on gagging on the specified channel%r/off -- this turns off gagging on the specified channel.%r/list -- this lists the channels currently gagged.%r%rYou may use the '+all" option for <channel> to gag/ungag all channels.
&FN_COMHELP_COMNOTIFY ChanFunc=Syntax: comnotify%[/switch%] <channel>%r%rThis will allow you to set up automated connect/disconnect%rmessages when you connect or disconnect from the mush%rto all the channels that you are currently on. As this can become annoying,%rthere are options that you can use to tweak the settings.%r%r/enable %[default%] will enable your broadcasting your own %[dis%]connects.%r/disable will disable your broadcasting your own %[dis%]connects.%r/on %[default%} will allow you to receive broadcasted %[dis%]connects.%r/off will disable your receiving broadcasted %[dis%]connects.%r/list will list all your current notification settings%r/compress will compress all notifications into a single alert.%r%rYou may specify '+all' for switches /enable, /disable, /on and /off.%r%r@clist/notify will show all channels and all notify settings.
&FN_COMHELP_COMCHANGES ChanFunc=Syntax: comchanges%r%rThis shows all the changes that have occured with the%rthe comsystem since the start of versioning.
&FN_COMHELP_COMFUNCTIONS ChanFunc=Syntax: comfunctions%r%rThe current functions are available to the comsystem:%r[space(5)][ansi(h,cemit%(<channel>%, <message>%))] -- works like @cemit and if allowed%r[space(10)]sends the message to the specified channel.%r[space(5)][ansi(h,channel%(<player> %[%,<delim> %[%,<boolean>%]%]%))] -- will show all channels%r[space(10)]a target player belongs to. <delim> is optional output delimiter.%r[space(10)]The <boolean> if specified '1' shows channels currently online for%r[space(10)]target.
&FN_COMHELP_ALIAS ChanFunc=Syntax: <multiple> See below%r%rThe <alias> option is the primary method you talk on the comsystem%r%rYou define an alias with the addcom option.%r%rOne the alias is defined, you will use the alias as follows.%rFor examples, we'll assume you have an alias 'pub' for public.%r%rpub on -- this will join you to public if you've not joined it.%rpub off -- this will leave the public channel.%rpub who -- this will show who is on public.%rpub last -- will show the last 10 lines of history (if available)%rpub last 30 -- will show the last 30 lines of history (if available)%rpub last +10m -- show last 10 minutes of history%rpub last 5-15 -- show lines 5-15 of history%rpub :waves -- will pose 'waves' on the public channel%rpub ;'s head hurts -- will possessive-pose the message%rpub "heya -- will speak on the channel%rpub heya -- will also speak on the channel%r%rThe 'last' option allows the following additional arguments after 'last':%r[space(5)]<num> -- <num> is a number of how many lines you want (default 10)%r[space(5)]<num1>-<num2> -- range you want.  Like 1-10, 15-37, etc%r[space(5)]+<num>X -- Time range. X is 'm'inute, 'h'our, 'd'ay.  ex: +5m%r%rThe comsystem uses the @saystring variable for says. (see 'help @saystring')%rYou may also use &CHAN_SAYSTRING me=<value> for evaled saystrings (30 char lim)%r[space(5)]Example: &CHAN_SAYSTRING me=%[randextract(says speaks swears)],%r%rTitles and com masks are automatically utilized if configured.%r%rIf you have the channel gagged, you will be notified the channel is gagged.
&FN_SAYSTRING ChanFunc=[ifelse(hasattr(%0,chan_saystring),mid(objeval(%0,eval(%0,chan_saystring)),0,50),default(%0/saystring,says%,))]
&FOREACH ChanFunc=[ansi(h[mid(scramble(rgbymc),0,1)],%0)]
&DO_SORT ChanFunc=[sort(%0,,%1)]
&ORDER_BY ChanFunc=[iter(get(%0/_ch_alist),[after(##,:)]:[before(##,:)])]
&COMTITLEF ChanFunc=[gt(words(%1),0)][or(setr(1,gt(match(get([v(STOR-DB)]/ch_list),%0),0)),setr(2,gt(match(get(%#/_ch_alist),%0:*),0)))][setq(3,ifelse(r(1),%0,after(grab(get(%#/_ch_alist),%0:*),:)))]
&COMTITLEMSG00 ChanFunc=ComSys: Invalid channel name specified.
&COMTITLEMSG10 ChanFunc=[u(comtitlemsg00)]
&COMTITLEMSG01 ChanFunc=ComSys: Title has been cleared for channel '[capstr(lcstr(r(3)))]'.
&COMTITLEMSG11 ChanFunc=ComSys: Title set for channel '[capstr(lcstr(r(3)))]'.
&GENERICDO ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][setr(k,[ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))])][setr(d,%b[u(fn_saystring,%2)] "[objeval(%2,ansi(default(%2/_CH_ANSI_%q1,get(%2/_CH_ANSI)),s(%1)))]")])]
&GENERIC_STRIP ChanFunc=457
&GENERICDO6 ChanFunc=[setq(0,1)][setr(b,[ulocal(format_chan,%2)])] [setr(6,[setr(a,%[To: [ifelse(gt(numpos(`,%1),1),strfunc(elist,iter(u(chk_players,before(after(secure(%1),`),`)),[u(fun_cname2,##)],,|)@and@|,@),u(fun_cname2,u(chk_players,first(after(secure(%1),`)))))]%]:)] [setq(b,%qb %qa)][setr(c,[localize([setq(6,get(%2/_ch_alias_[r(1)]))][objeval(%2,[s(r(6))]%b)])])][setr(k,[localize([ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))])])][setr(d,[setq(5,trim(ifelse(gt(numpos(`,secure(%1)),1),after(after(objeval(%2,%1),`),`),rest(after(objeval(%2,%1),`)))))][u(do_before[setr(4,member(" : ;,mid(r(5),0,1)))],%#,mid(r(5),1,1))][objeval(%#,s(ifelse(member(; " :,mid(r(5),0,1)),delete(r(5),0,1),r(5))))][v(do_after[r(4)])])])][setq(7,[r(6)])]
&CHK_PLAYERS ChanFunc=[localize([setq(0,iter(%0,ifelse(isdbref(pmatch(##)),pmatch(##))))][ifelse(words(r(0)),r(0),%#)])]
&DO_BEFORE0 ChanFunc=%b[u(fn_saystring,%0)] "
&DO_AFTER0 ChanFunc="
&DO_BEFORE1 ChanFunc=%b[u(fn_saystring,%0)] "
&DO_AFTER1 ChanFunc="
&DO_BEFORE2 ChanFunc=%b
&DO_BEFORE3 ChanFunc=[ifelse(isspace(%1),%b)]
&COMCFGSWITCHES ChanFunc=/lock /locklist /chanadd /chandel /chanlist /chancolor /redesc /help /hist /cemitlock /plrlock /plrunlock /plrlist /chanborder /prune /maskadd /maskdel /parsealias /notify /rename /timestamp
&COMCFGMSG0 ChanFunc=ComSys: Permission denied.
&COMCFGMSG1 ChanFunc=[u(COMCFGMSG_%0,%1)]
&COMCFGMSG_0 ChanFunc=ComSys: Unrecognized argument '[first(secure(%0))]' to COMCFG.
&COMCFGMSG_1 ChanFunc=[ifelse(and(match(get([V(STOR-DB)]/ch_list),rest(before(%0,=))),pos(=,rest(%0))),ComSys: Lock [ifelse(words(after(%0,=)),set,cleared)] for channel [capstr(lcstr(rest(before(%0,=))))],ComSys: Invalid arguments given with [first(secure(%0))] switch.%r[space(8)]Syntax: [extract(v(comcfgsyntax),1,1,|)][setq(1,0)])]
&COMCFGSYNTAX ChanFunc=comcfg/lock <channel>=[<lock>]|comcfg/locklist <channel>|comcfg/chanadd <channel>=<description>|comcfg/chandel <channel>|comcfg/chanlist|comcfg/chancolor <channel>=[<function>]|comcfg/redesc <channel>=<description>|comcfg/help|comcfg/hist <channel>=<value>|comcfg/cemitlock <channel>=[<lock>]|comcfg/plrlock <target>=<channel(s)>|comcfg/plrunlock <target>=<channel(s)>|comcfg/plrlist [<optional target>]|comcfg/chanborder <left> <right> [channel]|comcfg/prune <channel:list>[=<object:all>]|comcfg/maskadd <channel>|comcfg/maskdel <channel>|comcfg/parsealias [<1:0>]|comcfg/notify [+:-][<channel>:list]|comcfg/rename <channel> [=<new name mask>]|comcfg/timestamp <chan:+all:+list> [=<time>]
&COMCFGF ChanFunc=[match(v(comcfgswitches),first(secure(%0)))]
&COMCFGDO1 ChanFunc=[u([v(FX-DB)]/do_chanlock,rest(before(%0,=)),after(%0,=))]
&COMCFGMSG_2 ChanFunc=[ifelse(and(match(get([V(STOR-DB)]/ch_list),rest(%0)),words(rest(%0))),ComSys: Lock for channel '[capstr(lcstr(setr(9,rest(secure(%0)))))]'%r[space(8)]EvalLock: [ifelse(hasattr([v(F-DB)]/%q9_lock),parenmatch([v(F-DB)]/%q9_lock),<None Defined>)]%r[space(8)]CemitLock: [ifelse(hasattr([v(F-DB)]/%q9_cemit_lock),parenmatch([v(F-DB)]/%q9_cemit_lock),<None Defined>)],ComSys: Invalid arguments given with [first(secure(%0))] switch.%r[space(8)]Syntax: [extract(v(comcfgsyntax),2,1,|)])][setq(1,0)]
&COMCFGMSG_3 ChanFunc=[ifelse(and(setr(e,valid(attrname,CHLIST_[before(rest(%0),=)])),setr(3,not(match(get([V(STOR-DB)]/ch_list),before(rest(%0),=)))),setr(4,words(after(%0,=)))),ComSys: New channel '[secure(capstr(lcstr(before(rest(%0),=))))]' created with desc of '[secure(after(%0,=))]'.,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch(%qe[r(3)][r(4)][gt(pos(=,%0),0)],*0,<Must use an equals>,?0*,<Channel already exists>,??0?,<No description given>,0*,<Illegal Channel Name>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),3,1,|)])]
&COMCFGDO3 ChanFunc=[u([v(FX-DB)]/do_chancreate,rest(before(secure(%0),=)),after(secure(%0),=))]
&COMCFGMSG_4 ChanFunc=[ifelse(setr(3,match(get([V(STOR-DB)]/ch_list),before(rest(%0),=))),ComSys: Channel '[secure(capstr(lcstr(before(rest(%0),=))))]' deleted.,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([r(3)][gt(pos(=,%0),0)],0*,<Channel does not exists>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),4,1,|)])]
&COMCFGDO4 ChanFunc=[u([v(FX-DB)]/do_chandelete,first(rest(secure(%0))))]
&COMCFGMSG_5 ChanFunc=[ifelse(setr(3,words(rest(%0))),ComSys: Invalid arguments given with [first(secure(%0))] switch. <No arguments required>%r[space(8)]Syntax: [extract(v(comcfgsyntax),5,1,|)],[u([v(FX-DB)]/do_genpemit,%#,ComSys: Administrative listing of channels...%r[space(5)][ljust(Channel Name,25)][ljust(Locked?,8)][ljust(History?,12)][ljust(Masked?,8)][ljust(Users,8)][ljust(Input #,8)])][list(get([V(STOR-DB)]/ch_list),[space(5)][u([v(F-DB)]/do_chancolor_##)][space(sub(25,strlen(##)))][ljust(ifelse(hasattr([v(F-DB)]/##_lock),Yes,No),8)][ljust(ifelse(hasattr([v(F-DB)]/##_history),Yes %([get([get([v(F-DB)]/##_history)]/HVAL)]%),No),12)][ljust(ifelse(match(get([v(STOR-DB)]/commask_chanlist),##),Yes,No),8)][ljust(words(get([V(STOR-DB)]/chlist_##)),8)][ljust(add(0,get([V(STOR-DB)]/chused_##)),8)])]ComSys: Listing completed.)][setq(1,0)]
&COMCFGMSG_6 ChanFunc=[ifelse(setr(3,and(!!$before(rest(%0),=),match(before(rest(%0),=),u(strip_all,objeval(%#,s(after(%0,=))))))),ComSys: Channel '[capstr(lcstr(before(rest(%0),=)))]' colorcodes established.,ComSys: Invalid arguments given with [first(secure(%0))] switch. <Channels must match.>%r[space(8)]Syntax: [extract(v(comcfgsyntax),6,1,|)][setq(1,0)])]
&COMCFGDO6 ChanFunc=[u([v(FX-DB)]/do_chancolor,before(rest(secure(%0)),=),after(%0,=))]
&COMCFGMSG_7 ChanFunc=[ifelse(and(setr(3,match(get([V(STOR-DB)]/ch_list),before(rest(%0),=))),setr(4,words(after(%0,=)))),ComSys: Channel '[secure(capstr(lcstr(before(rest(%0),=))))]' re-desced with '[secure(after(%0,=))]'.,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([r(3)][r(4)][gt(pos(=,%0),0)],*0,<Must use an equals>,0*,<Channel does not exist>,?0?,<No description given>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),7,1,|)])]
&COMCFGDO7 ChanFunc=[u([v(FX-DB)]/do_chanredesc,rest(before(secure(%0),=)),after(secure(%0),=))]
&COMCFGMSG_8 ChanFunc=[ifelse(words(rest(%0)),ComSys: WizHelp for version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%]%r[repeat(-,78)]%r[u(comcfgmsg_8x_[match(strip(v(comcfgswitches),/),rest(%0))],rest(%0))]%r[repeat(-,78)]%rComSys: Individual Topic WizHelp completed.,u(comcfgmsg_8x))]
&COMCFGHELP ChanFunc=Establishes lock for channel.|Lists lock for channel.|Create a new channel.|Delete an existing channel.|List fields of channels.|Set colorcode for channel.|Re-describe a channel.|Show this listing.|Set up history on channel.|Set cemitlock for channel.|Lock channel(s) from player|Restore channel(s) to player|List locks for [chan(s)/player]|Set left/right channel borders.|Prune players/all from channel.|Add Chans to 'alias mask'.|Remove Chans from 'alias mask'.|Enable/Disable channel parsing.|Add/Remove channels from notify list.|Add/Clear channel rename mask.|Sets/lists timestamps for channels.
&GENERICDO7 ChanFunc=[ifelse(and(lt(words(%1),3),match(last,first(%1))),ulocal(switch([!!match(rest(%1),*?-?*)][!!wildmatch(+*m +*h +*d,rest(%1))],1?,dolast_range,?1,dolast_time,dolast),first(%1),rest(strip(%1,@)),%2,member(@,mid(rest(%1),0,1))),u(genericdo[strip(member(v(generic_cmds),mid(%1,0,1)),v(generic_strip))],%0,%1,%2,%3))]
&DOLAST ChanFunc=[u([v(FX-DB)]/do_pemit,[setq(7,min(sub(get([v([r(1)]_history)]/hval),1),max(min(ifelse(words(%1),%1,10),setr(0,words(setdiff(lattr([v([r(1)]_HISTORY)]/hist_time_*),#-1 NO MATCH)))),min(%1,r(0)),1)))][center(- history listing for [r(1)] <Recalling [r(7)] lines...> -,78,-)])][ifelse(words(setdiff(lattr([v([r(1)]_history)]/hist_*),#-1 NO MATCH)),list(ifelse(not(%3),revwords(u(do_histlinecnt,max(sub(get([setr(6,v([r(1)]_HISTORY))]/cval),1),0),sub(get([r(6)]/hval),1),r(7))),u(do_histlinecnt,max(sub(get([setr(6,v([r(1)]_HISTORY))]/cval),1),0),sub(get([r(6)]/hval),1),r(7))),[setq(9,get([r(6)]/hist_data_##))][u(do_histline,get([r(6)]/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DOLAST_RANGE ChanFunc=[u([v(FX-DB)]/do_pemit,[setq(7,[max(1,min(words(setdiff(lattr([v([r(1)]_history)]/hist_time_*),#-1 NO MATCH)),before(%1,-),after(%1,-)))] [min(max(before(%1,-),after(%1,-),1),words(setdiff(lattr([v([r(1)]_history)]/hist_time_*),#-1 NO MATCH)))])][center(- history listing for [r(1)] <Recalling lines [first(r(7))] to [rest(r(7))]...> -,78,-)])][setq(6,v([r(1)]_HISTORY))][ifelse(words(setdiff(lattr([v([r(1)]_history)]/hist_*),#-1 NO MATCH)),list(ifelse(not(%3),revwords(u(do_histlineextr,%1)),u(do_histlineextr,%1)),[setq(9,get([r(6)]/hist_data_##))][u(do_histline,get([r(6)]/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DOLAST_TIME ChanFunc=[setq(9,sub(secs(),mul(delete(%1,0,1),switch(wildmatch(*m *h *d,%1),1,60,2,3600,3,86400,1))))][setq(7,[ifelse(gt(get([setr(6,v([r(1)]_history))]/cval),0),lnum([sub(get(%q6/cval),1)],0))] [lnum(get(%q6/hval),get(%q6/cval))])][setq(7,iter(%q7,ifelse(gt(first(get(%q6/HIST_TIME_%i0)),%q9),%i0)))][u([v(FX-DB)]/do_pemit,[center(- history listing for [r(1)] <recalling last [add(0,delete(%1,0,1))] [switch(wildmatch(*m *h *d,%1),1,minutes,2,hours,3,days,seconds)]> -,78,-)])][ifelse(words(%q7),list(%q7,[setq(9,get(%q6/hist_data_%i0))][u(do_histline,get(%q6/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DO_HISTLINE ChanFunc=[timefmt(%[$02M/$02D/$Y $02h:$02T:$02S%],first(%0))] [ljust(ifelse(controls(%#,rest(%0)),<[ljust(rest(%0),6)]>),9)] [r(9)]
&DO_HISTLINECNT ChanFunc=[extract([lnum(max(%0,0),0)] [lnum(max(%1,0),0)],1,%2)]
&DO_HISTLINEEXTR ChanFunc=[extract([lnum(max(0,sub(get([r(6)]/cval),1)),0)] [lnum(words(setdiff(lattr([r(6)]/hist_data_##),#-1 NO MATCH)),sub(get([r(6)]/cval),1))],max(1,first(r(7))),add(1,sub(rest(r(7)),first(r(7)))))]
&COMCFGMSG_9 ChanFunc=[ifelse(and(setr(3,match(get([V(STOR-DB)]/ch_list),before(rest(%0),=))),setr(4,words(after(%0,=)))),ComSys: Channel '[secure(capstr(lcstr(before(rest(%0),=))))]' history-size set to [min(350,max(0,after(%0,=)))].,ComSys: Invalid arguments given with [first(secure(%0))] switches. [switch([r(3)][r(4)][gt(pos(=,%0),0)],*0,<Must use an equals>,0*,<Channel does not exist>,?0?,<No history size value given>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),9,1,|)])]
&COMCFGDO9 ChanFunc=[u([v(FX-DB)]/do_chanhistset,rest(before(secure(%0),=)),min(350,max(0,after(secure(%0),=))))]
&F_CHK_CEMIT ChanFunc=[setq(1,grab(get([v(STOR-DB)]/ch_list),%0*))][setq(8,u([v(FX-DB)]/do_gagging,%q1))][switch([setr(2,[gt(words(r(1)),0)][and(uldefault([r(1)]_lock,1,%#,TALK,strlen(%1)),1)][or(uldefault([r(1)]_cemit_lock,0,%#),[gte(bittype(%#),5)])])],0*,ComSys: Sorry\, that channel does not exist.,?0*,ComSys: Sorry\, You have no access to that channel.,*0,ComSys: Sorry\, You do not have permission to do that.)]
&F_DO_CEMIT ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[objeval(%2,s(%1))])]
&COMCFGMSG_10 ChanFunc=[ifelse(and(match(get([V(STOR-DB)]/ch_list),rest(before(%0,=))),pos(=,rest(%0))),ComSys: CemitLock [ifelse(words(after(%0,=)),set,cleared)] for channel [capstr(lcstr(rest(before(%0,=))))],ComSys: Invalid arguments given with [first(secure(%0))] switch.%r[space(8)]Syntax: [extract(v(comcfgsyntax),10,1,|)][setq(1,0)])]
&COMCFGDO10 ChanFunc=[u([v(FX-DB)]/do_cemitlock,rest(before(%0,=)),after(%0,=))]
&COMCFGMSG_11 ChanFunc=[ifelse(and(isdbref(setr(3,pfind(rest(before(%0,=))))),words(setr(4,setdiff(setinter(setr(q,lcstr(trim(ifelse(match(after(%0,=),+all),get([v(STOR-DB)]/ch_list),after(%0,=))))),get([v(STOR-DB)]/ch_list)),get([r(3)]/_ch_lock))))),ComSys: [capstr(lcstr(type(r(3))))] [name(r(3))] blocked from [elist(r(4))].,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([isdbref(r(3))][words(r(4))][gt(words(setinter(%qq,get([r(3)]/_ch_lock))),0)],0*,<Invalid target>,?00,<Invalid channel%(s%) specified>,?01,<Target already omitted from channel%(s%)>)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),11,1,|)][setq(1,0)])]
&COMCFGDO11 ChanFunc=[u([v(FX-DB)]/do_plrlock,rest(before(%0,=)),setinter(lcstr(ifelse(match(after(%0,=),+all),get([v(STOR-DB)]/ch_list),after(%0,=))),get([V(STOR-DB)]/ch_list)),1)]
&COMCFGDO12 ChanFunc=[u([v(FX-DB)]/do_plrlock,rest(before(%0,=)),ifelse(match(after(%0,=),+all),get([v(STOR-DB)]/ch_list),after(%0,=)),0)]
&COMCFGMSG_12 ChanFunc=[ifelse(and(isdbref(setr(3,pfind(rest(before(%0,=))))),words(setr(4,setinter(lcstr(trim(ifelse(match(after(%0,=),+all),get([v(STOR-DB)]/ch_list),after(%0,=)))),get([r(3)]/_ch_lock))))),ComSys: [capstr(lcstr(type(r(3))))] [name(r(3))] restored access to [elist(r(4))].,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([isdbref(r(3))][words(r(4))],0*,<Invalid target>,?0,<Player not locked from channel%(s%) specified>)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),12,1,|)][setq(1,0)])]
&COMCFGMSG_13 ChanFunc=[ifelse(or(isdbref(setr(3,pfind(rest(%0)))),not(words(rest(%0)))),u(dolistplrs_[isdbref(r(3))]),ComSys: Invalid arguments given with [first(secure(%0))] switch. <Invalid optional target specified>%r[space(8)]Syntax: [extract(v(comcfgsyntax),13,1,|)])][setq(1,0)]
&COMCFGMSG_14 ChanFunc=[ifelse(!and(between(2,3,words(rest(%0)),1),or(lt(words(rest(%0)),3),match(get([v(STOR-DB)]/ch_list),extract(rest(%0),3,1)))),ComSys: Invalid arguments given with [first(secure(%0))] switch[ifelse(eq(words(rest(%0)),3),%b%[Invalid Channel Specified%])]. <Requires left and right borders with optional channel name as 3rd arg>%r[space(8)]Syntax: [extract(v(comcfgsyntax),14,1,|)][setq(1,0)],ComSys: Border [ifelse(gt(words(rest(%0)),2),for channel [extract(rest(%0),3,1)]%b)]set to be: [objeval(%#,s(first(rest(%0))))]CHANNEL-NAME[objeval(%#,s(first(rest(rest(%0)))))])]
&COMCFGDO14 ChanFunc=[u([v(FX-DB)]/do_chanborders,rest(%0),%#,extract(rest(%0),3,1))]
&COMCFGMSG_15 ChanFunc=[switch([or(not(words(rest(%0))),match(rest(%0),list))][and(match(get([v(STOR-DB)]/ch_list),first(before(rest(%0),=))),match(object all,[first(after(rest(%0),=))]*))],10,[u([v(FX-DB)]/do_genpemit,%#,ComSys: Listing Channels:%r[ljust(Channel,34)][ljust(Players,10)][ljust(Objects,10)]Invalid)][list(get([v(STOR-DB)]/ch_list),[ljust(u(do_chancolor_##,%#),34)][rjust(words(keeptype(get([v(STOR-DB)]/chlist_##),player)),7)][space(3)][rjust(words(keeptype(get([v(STOR-DB)]/chlist_##),thing)),7)][space(3)][localize(rjust(ifelse(gt(setr(9,words(remtype(get([V(STOR-DB)]/chlist_##),player thing))),0),ansi(hr,r(9)),0),7))])]Listing Completed.[setq(1,0)],01,ComSys: Purging [ifelse(match(all,[first(after(%0,=))]*),all non-players,all non-players/non-objects)] from channel [u(do_chancolor_[first(before(rest(%0),=))])],ComSys: Invalid argument(s) for [extract(v(comcfgswitches),15,1)] switch%r[space(8)]Syntax: [extract(v(comcfgsyntax),15,1,|)][setq(1,0)])]
&COMCFGDO15 ChanFunc=[u([v(FX-DB)]/do_prunechan,trim(after(%0,=)),trim(rest(before(%0,=))),%#)]
&COMCFGMSG_16 ChanFunc=[ifelse(match(get([v(STOR-DB)]/ch_list),rest(%0)),ifelse(match(get([v(STOR-DB)]/commask_chanlist),rest(%0)),ComSys: Channel already added to alias mask list.[setq(1,0)],ComSys: Channel '[u(DO_CHANCOLOR,rest(%0))]' allowed to have alias masks.),ComSys: Channel does not exist.%r[space(8)]Syntax: [extract(v(comcfgsyntax),16,1,|)][setq(1,0)])]
&COMCFGDO16 ChanFunc=[u([v(FX-DB)]/do_chanmask,add,rest(%0),%#)]
&COMCFGMSG_17 ChanFunc=[ifelse(and(words(rest(%0)),match(get([v(STOR-DB)]/commask_chanlist),rest(%0))),ComSys: Channel '[u(DO_CHANCOLOR,rest(%0))]' removed from mask alias list.,[ifelse(words(rest(%0)),ComSys: Channel has not been added to mask alias list.[setq(1,0)],ComSys: Invalid channel specified.%r[space(8)]Syntax: [extract(v(comcfgsyntax),17,1,|)])][setq(1,0)])]
&COMCFGDO17 ChanFunc=[u([v(FX-DB)]/do_chanmask,del,rest(%0),%#)]
&COMCFGMSG_18 ChanFunc=[ifelse(and(words(rest(%0)),between(0,1,rest(%0),1)),ComSys: Comsystem aliases will [ifelse(rest(%0),no longer,now)] evaluate,ComSys: [ifelse(words(rest(%0)),Invaliad argument.  Choose '0' for parsing or '1' for non-parsing.,Current setting is [ifelse(get(#[config(global_error_obj)]/vd),non-parsing,parsing)].)][setq(1,0)])]
&COMCFGDO18 ChanFunc=[u([v(FX-DB)]/do_toggleparse,rest(%0))]
&COMCFGMSG_19 ChanFunc=[switch([match(rest(%0),list)][!!member(+ -,mid(rest(%0),0,1))][!!match([get([v(STOR-DB)]/ch_list)] 0,delete(rest(%0),0,1))][!or(and(member(+,mid(rest(%0),0,1)),match(get([v(F-DB)]/notify_list),delete(rest(%0),0,1))),and(member(-,mid(rest(%0),0,1)),!match(get([v(F-DB)]/notify_list),delete(rest(%0),0,1))))],1*,ComSys: Channels being notified (0 means NO notifications and overrides): [default([v(F-DB)]/notify_list,**ALL CHANNELS**)][setq(1,2)],?0*,ComSys: Must specify '+' or '-' to add or remove channel from %(dis%)connect notification.[setq(1,0)],??0?,ComSys: Invalid channel specified [delete(rest(%0),0,1)].[setq(1,0)],???0,ComSys: Channel has already been [ifelse(member(+,mid(rest(%0),0,1)),added,removed)] from notification.[setq(1,0)],ComSys: Channel [delete(rest(%0),0,1)] has been [ifelse(member(+,mid(rest(%0),0,1)),added,removed)] from %(dis%)connect notifications.)][ifelse(!r(1),%r[space(8)]Syntax: [extract(v(comcfgsyntax),19,1,|)])][ifelse(eq(%q1,2),setq(1,0))]
&COMCFGDO19 ChanFunc=[u([v(FX-DB)]/do_notifybyname,mid(rest(%0),0,1),lcstr(delete(rest(%0),0,1)))]  
&COMCFGMSG_20 ChanFunc=[switch([or(!$before(rest(%0),=),!member(get([v(STOR-DB)]/ch_list),lcstr(before(rest(%0),=))))][!!$after(%0,=)],1?,[setq(1,0)]ComSys: Invalid channel specified.%r[space(8)]Syntax: [extract(v(comcfgsyntax),20,1,|)],?0,ComSys: Channel '[u(do_chancolor,before(rest(%0),=))]' name-mask cleared.,ComSys: Channel '[u(do_chancolor,before(rest(%0),=))]' name-masked to '[after(%0,=)]')]
&COMCFGDO20 ChanFunc=[u([v(FX-DB)]/do_renamechan,before(rest(%0),=),after(%0,=))]
&COMCFGMSG_21 ChanFunc=[switch([or(!$before(rest(%0),=),and(!match(+all,before(rest(%0),=)),!member(get([v(STOR-DB)]/ch_list),lcstr(before(rest(%0),=)))))][match(+list,before(rest(%0),=))][!!$after(%0,=)],10?,[setq(1,0)]ComSys: Invalid channel specified.%r[space(8)]Syntax: [extract(v(comcfgsyntax),21,1,|)],?1?,u(comcfgmsg_21_list),??0,ComSys: [ifelse(match(+all, before(rest(%0),=)),Global,Channel '[u(do_chancolor,before(rest(%0),=))]')] timestamp cleared.,ComSys: [ifelse(match(+all,before(rest(%0),=)),Global,Channel '[u(do_chancolor,before(rest(%0),=))]')] timestamp set to '[after(%0,=)]')]
&COMCFGMSG_21_LIST ChanFunc=ComSys: Channel timeformats are as followed:%rGlobal Timestamp: [pedit(default([v(F-DB)]/do_timeformatgen,N/A),%%0,@H,%%1,@M,%%2,@S,%%3,@m,%%4,@d,%%5,@y)]%rIndividual Channel Timestamps:[iter(get([v(STOR-DB)]/ch_list),ifelse(hasattr([v(F-DB)],do_timeformat_%i0),%r[space(5)]-> [u(do_chancolor,%i0)]: [pedit(get([v(F-DB)]/do_timeformat_%i0),%%0,@H,%%1,@M,%%2,@S,%%3,@m,%%4,@d,%%5,@y)]),,)]%rComSys: Completed
&COMCFGDO21 ChanFunc=[u([v(FX-DB)]/do_settimestamp,before(rest(%0),=),after(%0,=))]
&DOLISTPLRS_1 ChanFunc=ComSys: [capstr(lcstr(type(r(3))))] [name(r(3))] [ifelse(words(get([r(3)]/_ch_lock)),locked from channels: [elist(get([r(3)]/_ch_lock))],is not locked from any channels.)]
&DOLISTPLRS_0 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,ComSys: Listing all players with locks%r[repeat(-,78)]%r[ljust(Type,5)][ljust(Target,35)]Channels%r[repeat(-,78)])][setq(0,search(eval=hasattr\(##\,_ch_lock\)))][ifelse(words(r(0)),list(r(0),[u(doplrlistclr_[mid(type(##),0,1)])][ljc(name(##),35)][get(##/_ch_lock)]),[center(%(No Players Found%),78)]%r)][repeat(-,78)]
&DOPLRLISTCLR_R ChanFunc=[ansi(hr,R)][space(4)]
&DOPLRLISTCLR_T ChanFunc=[ansi(hb,T)][space(4)]
&DOPLRLISTCLR_E ChanFunc=[ansi(hg,E)][space(4)]
&DOPLRLISTCLR_P ChanFunc=[ansi(hy,P)][space(4)]
&CBOOTF ChanFunc=[gte(bittype(%2),5)][and(match(get([V(STOR-DB)]/ch_list),%1),isdbref(pfind(%0)),match(get([v(STOR-DB)]/chlist_%1),pfind(%0)))]
&CBOOTMSG00 ChanFunc=ComSys: You don't have access to @cboot.
&CBOOTMSG01 ChanFunc=[u(cbootmsg00,%0,%1,%2)]
&CBOOTMSG10 ChanFunc=[switch([isdbref(pfind(%0))][!!match(get([v(STOR-DB)]/ch_list),%1)][!match(get([v(STOR-DB)]/chlist_%1),%0)],0??,ComSys: The target specified is not valid.,10?,ComSys: The target channel does nto exist.,ComSys: The target is not on that channel.)]
&CBOOTMSG11 ChanFunc=ComSys: [capstr(lcstr(type(pfind(%0))))] [name(pfind(%0))] has been booted from [u([v(F-DB)]/do_chancolor_%1)].
&DOCBOOT ChanFunc=[u([v(FX-DB)]/do_cboot,%0,%1,%2)]
&VERSION ChanFunc=1.3.1 01/04/2020
&COMHELP_SYNTAX ChanFunc=comhelp|addcom <alias>=<channel>|=<channel> <message>|.<channel> <message>|<alias> <message>|<alias> on|<alias> off|<alias> who|<alias> last [<value>]|delcom <channel>|@clist[/full /alias /notify /borders]|comlist|comtitle <channel>=<title>|comcfg[/<switch>]|@cemit <channel>=<message>|@cboot <target>=<channel>|commask <channel>=<alias>|comprefix[/clear] [<character(s)>]|comoptions|@channel|comall|comgag[/on /off /list] <channel>|comnotify[/<switches>]|comset[/<switch>] <channel> [<1-3>]|comchanges|comfunctions
&COMHELP_REFERENCE ChanFunc=Show this screen.|Adds aliases to channel.|Method to talk on channel.|no-eval talk on channel.|Method to talk on channel.|Join a channel.|Leave a channel.|See who's on channel.|List channel history.|Remove alias (doesn't leave)|Lists available channels.|Lists connected channels.|Set channel comtitle.|Config comsys (see /help)|Emit over channel.|Boot target from channel.|Set name alias.|Config personal prefixes.|List speaking options.|@chan interface. (@chan/help)|List all users on chans.|Turn gagging on/off/list.|Notification Broadcasts|Set/Unset/List channel options|List changes for versions.|Show all comsys functions
&COMOPTIONS_SYNTAX ChanFunc=<alias>:<message>|<alias>;<message>|<alias>"<message>|<alias>`<player> <message>|<alias>`<player(s)>` <message>
&COMOPTIONS_REFERENCE ChanFunc=Pose a message.|Possessive-Pose a message.|Say a message (default).|Com-to a specified person.|Com-to multiple people.
&DOLAST_BACKUP ChanFunc=[u([v(FX-DB)]/do_pemit,[setq(7,min(get([v([r(1)]_history)]/hval),max(min(ifelse(words(%1),%1,10),setr(0,words(setdiff(lattr([v([r(1)]_HISTORY)]/hist_time_*),#-1 NO MATCH)))),min(%1,r(0)),1)))][center(- history listing for [r(1)] <Recalling [r(7)] lines...> -,78,-)])][ifelse(words(setdiff(lattr([v([r(1)]_history)]/hist_*),#-1 NO MATCH)),list(u(do_histlinecnt,max(sub(get([setr(6,v([r(1)]_HISTORY))]/cval),1),0),get([r(6)]/hval),r(7)),[setq(9,get([r(6)]/hist_data_##))][u(do_histline,get([r(6)]/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DO_COMALL ChanFunc=[setq(w,0)][setq(y,)][switch([!!words(%0)][!!match(get([v(STOR-DB)]/ch_list),%0)],11,[setq(y,%0)][setq(w,1)],00,setq(y,get([v(STOR-DB)]/ch_list)))][ifelse(words(%qy),[u([v(FX-DB)]/do_genpemit,%#,[ifelse(%qw,Listing players on channel [u(do_chancolor,%0)],Listing all channels and players on channels)]:%r[repeat(-,78)])][list(%qy,[u(do_chancolor,itext(0))]%r[space(5)][wrap(elist(iter(get([v(STOR-DB)]/chlist_[itext(0)]),name(itext(0)),,#),,#),69,l,,,5)])][repeat(-,78)],ComSys: comall - Unrecognized channel '%0')]
&CMD_SWITCHES ChanFunc=help list title on off who recall all gag ungag desc add brief buffer chown combine uncombine decompile delete hide unhide join leave mogrifier mute unmute name privs quiet rename what wipe
&CMD_SWITCHES_INDEX ChanFunc=@chan[nel]/help|@chan[nel]/list|@chan[nel]/title <channel>[=<title>]|@chan[nel]/on <channel>[=<player>]|@chan[nel]/off <channel>[=<player>]|@chan[nel]/who <channel>|@chan[nel]/recall <channel>[=<lines>]|@chan[nel]/all|@chan[nel]/gag [<channel:+all>]|@chan[nel]/ungag [<channel:+all>]|@chan[nel]/desc|@chan[nel]/add|@chan[nel]/brief|@chan[nel]/buffer|@chan[nel]/chown|@chan[nel]/combine|@chan[nel]/uncombine|@chan[nel]/decompile|@chan[nel]/delete|@chan[nel]/hide|@chan[nel]/unhide|@chan[nel]/join <channel>[=<player>]|@chan[nel]/leave <channel>[=<player>]|@chan[nel]/mogrifier|@chan[nel]/mute|@chan[nel]/unmute|@chan[nel]/name|@chan[nel]/privs|@chan[nel]/quiet|@chan[nel]/rename|@chan[nel]/what|@chan[nel]/wipe
&CMD_SWITCHES_SHORT ChanFunc=this listing|lists channels|sets/displays channel title|joins channel|leaves channel|lists who's on channel|recalls channel history|join all channels|gag channel/+all|ungag channel/+all|see: comcfg/redesc|see: comcfg/chanadd|show quick channel list|see: comcfg/hist|see: comcfg/lock|combine notify (dis)con output|uncombine notify (dis)con output|not implemented|see: comcfg/chandel|see: commask|see: commask|joins channel|leaves channel|not implemented|see: comcfg/plrlock|see: comcfg/plrunlock|see: comcfg/chancolor|see: comcfg/lock or comcfg/locklist|see: comnotify|see: comcfg/chancolor|chan description listing|see: comcfg/prune
&FN_COMHELP_@CHANNEL ChanFunc=Syntax: @channel%[/switch%] %[<options>%]%r%rThis is the fully functional @channel interface to the comsystem.%r%rPlease refer to @channel/help (or @chan/help) for full releveant syntax.
&DO_PARSECHAN0 ChanFunc=@pemit %#=Unrecognized switch '[after(first(%0),/)]' for command '@channel'.%rAvailable Switches: [v(cmd_switches)]
&DO_PARSECHAN1 ChanFunc=@pemit %#=[printf($^78:-:s,- @channel help index listing -)][iter(v(cmd_switches),%r[printf($-40:.:s $s,[extract(v(cmd_switches_index),#@,1,|)]%b,extract(v(cmd_switches_short),#@,1,|))])]%r[repeat(-,78)]
&DO_PARSECHAN2 ChanFunc=@pemit %#=[u(clist2)]
&DO_PARSECHAN3 ChanFunc=@swi/inline [!!pos(=,rest(%0))]=1,{@include/command me/cmd_comtitle=[trim(before(rest(%0),=))],[trim(after(%0,=))]},{@pemit %#=ComSys: Your title for [u(do_chancolor,before(rest(%0),=))] is '[default(%#/_ch_alias_[trim(before(rest(%0),=))],*NOT SET*)]'}
&DO_PARSECHAN4 ChanFunc=@pemit %#=[setq(i,rest(%0))][u(CHANONMSG[setr(0,u(chanonf,or(match(pos(=,%qi),#-1),and(pos(=,%qi),controls(%#,pmatch(after(%qi,=))))),gt(match(get([v(STOR-DB)]/ch_list),before(%qi,=)),0),setr(2,before(%qi,=)),after(%qi,=)))],%qi)];@break [or(r(4),not(match(11,r(0))))];&CHLIST_[r(2)] [v(STOR-DB)]=[setq(1,r(2))][setq(3,default([v(F-DB)]/ch_template1_%q2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q2,get([v(F-DB)]/ch_template2)))][null(u([v(FX-DB)]/do_genpemit,[setunion(%#,u([v(FX-DB)]/do_gagging,r(2)))],u(genericdo1,XXX,:has joined this channel.,r(5))))][setunion(get([v(STOR-DB)]/CHLIST_%q2),%q5)];&_CH_ALIST %#=[setunion(get(%#/_ch_alist),[lcstr([r(2)]:[r(2)])])]
&DO_PARSECHAN5 ChanFunc=@pemit %#=[setq(i,rest(%0))][u(CHANOFFMSG[setr(0,u(chanofff,or(match(pos(=,%qi),#-1),and(pos(=,%qi),controls(%#,pmatch(after(%qi,=))))),gt(match(get([v(STOR-DB)]/ch_list),before(%qi,=)),0),setr(2,before(%qi,=)),after(%qi,=)))],%qi)];@break [or(r(4),not(match(11,r(0))))];&CHLIST_[r(2)] [v(STOR-DB)]=[setq(1,r(2))][setq(3,default([v(F-DB)]/ch_template1_%q2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q2,get([v(F-DB)]/ch_template2)))][null(u([v(FX-DB)]/do_genpemit,u([v(FX-DB)]/do_gagging,r(2)),u(genericdo1,XXX,:has left this channel.,r(5))))][setdiff(get([v(STOR-DB)]/CHLIST_%q2),%q5)]
&DO_PARSECHAN6 ChanFunc=@pemit %#=[setq(i,rest(%0))][u(genericf,%qi,who)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit %#[u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),w))],%qi,who,%#)])]=[r(5)]
&DO_PARSECHAN7 ChanFunc=@pemit %#=[setq(i,rest(%0))][setq(j,ifelse(!!$after(%qi,=),add(0,after(%qi,=)),10))][ifelse(eq(%qj,0),setq(j,2000))][u(genericf,trim(before(%qi,=)),squish(trim(last %qj)))];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit %#=[ifelse(or(!!wildmatch(+*m +*h +*d,after(%qi,=)),!!match(after(%qi,=),*?-?*)),setq(j,after(%qi,=)))][u(genericdo7,trim(before(%qi,=)),squish(trim(last %qj)),%#)]
&DO_PARSECHAN8 ChanFunc=@break [!hasattr(%#/_ch_alist)]={@pemit %#=ComSys: You have no channels to join.};@dolist/inline [setr(p,setdiff(lcstr(iter(get(%#/_ch_alist),ifelse(!match(get([v(STOR-DB)]/CHLIST_[after(##,:)]),%#),after(##,:)))),#-1))]=@include me/do_parsechan4=X %d0;@skip [!!$r(p)]={@pemit %#=You're already on all your channels.}
&DO_PARSECHAN9 ChanFunc=@pemit %#=[u(FN_COMGAG1,rest(%0))]
&DO_PARSECHAN10 ChanFunc=@pemit %#=[u(FN_COMGAG2,rest(%0))]
&DO_PARSECHAN11 ChanFunc=@pemit %#=ComSys: Please type: comcfg/redesc <channel-name>=<description>
&DO_PARSECHAN12 ChanFunc=@pemit %#=ComSys: Please type: comcfg/chanadd <channel-name>=<description>
&DO_PARSECHAN13 ChanFunc=@include/command [v(CH-DB)]/cmd_comlist
&DO_PARSECHAN14 ChanFunc=@pemit %#=ComSys: Please type: comcfg/hist <channel>=<number of lines of history>
&DO_PARSECHAN15 ChanFunc=@pemit %#=ComSys: Please type: comcfg/lock <channel>=<lock>
&DO_PARSECHAN16 ChanFunc=@pemit %#=[ifelse(hasattr(%#/_ch_compress),ComSys: You are already set for combining,u([v(F-DB)]/fn_comnotify6))]
&DO_PARSECHAN17 ChanFunc=@pemit %#=[ifelse(!hasattr(%#/_ch_compress),ComSys: You are already unset from combining,u([v(F-DB)]/fn_comnotify6))]
&DO_PARSECHAN18 ChanFunc=@pemit %#=ComSys: Unsupported feature.
&DO_PARSECHAN19 ChanFunc=@pemit %#=Comsys: Please type: comcfg/chandel <channel>
&DO_PARSECHAN20 ChanFunc=@pemit %#=ComSys: Please see 'comhelp commask'
&DO_PARSECHAN21 ChanFunc=@pemit %#=ComSys: Please see 'comhelp commask'
&DO_PARSECHAN22 ChanFunc=@include [v(F-DB)]/do_parsechan4
&DO_PARSECHAN23 ChanFunc=@include [v(F-DB)]/do_parsechan5
&DO_PARSECHAN24 ChanFunc=@pemit %#=ComSys: Unsupported feature.
&DO_PARSECHAN25 ChanFunc=@pemit %#=ComSys: Please type: comcfg/plrlock <player>=<channel(s)>
&DO_PARSECHAN26 ChanFunc=ComSys: Please type: comcfg/plrunlock <player>=<channel(s)>
&DO_PARSECHAN27 ChanFunc=@pemit %#=ComSys: Please type: comcfg/chancolor <channel>=<new name with optional colors>
&DO_PARSECHAN28 ChanFunc=@pemit %#=ComSys: Please review: comcfg/lock and comcfg/locklist
&DO_PARSECHAN29 ChanFunc=@pemit %#=ComSys: Please see 'comhelp comnotify'
&DO_PARSECHAN30 ChanFunc=@pemit %#=ComSys: Please type: comcfg/chancolor <channel>=<name>
&DO_PARSECHAN31 ChanFunc=@pemit %#=[u(clist1)]
&DO_PARSECHAN32 ChanFunc=@pemit %#=ComSys: Please type: comcfg/prune <channel>
&COMCFGMSG_8X ChanFunc=ComSys: WizHelp for version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%]%r[repeat(-,78)][iter(v(comcfgsyntax),%r[ljc(%i0,45,.)] [ljc(extract(v(comcfghelp),#@,1,|),32)],|)]%r[repeat(-,78)]%rComSys: WizHelp completed. %[Individual help available: comcfg/help <topic>%]%r[space(8)]Example: comcfg/help maskdel
&COMCFGMSG_8X_0 ChanFunc=[center(No such topic '%0'. Please choose one of:,78)]%r%b[repeat(+,76)]%r[columns(strip(v(comcfgswitches),/),20,3,l,,,%b+%b%b,%b%b+%b%b,%b%b+,0,,,1)]%r%b[repeat(+,76)]
&COMCFGMSG_8X_1 Chanfunc=Syntax: comcfg/lock <channel> = <lock> (leave empty to clear)%r%rThis will establish (or remove) a lock on the given channel.%r%rThis controls who may join/leave and/or chat on the channel.%r%rThe following arguments are available when setting locks:%r[space(5)]%%0 - The player/object passing the lock.%r[space(5)]%%1 - The type of lock to eval. JOIN, LEAVE, TALK, or ALL%r[space(10)]JOIN -- Controls specific joining channel.%r[space(10)]LEAVE -- Controls specific leaving channel.%r[space(10)]TALK -- Controls specific talking on channel.%r[space(10)]ALL -- Value for non-specific locking.%r[space(5)]%%2 - Length of input string %(available with TALK only%)%r%rThere is a special function applicable to set custom messages:%r[space(5)]%[u(set_error,Message Goes Here)]%rExample:%r[space(5)]%[switch%(%[match%(%%1,TALK%)%]%[gt%(%%2,500%)%],11,0%[u(set_error,Message too long.%)%],1%)%]%r%rExample:%r[space(5)]> comcfg/lock staff=%[gte%(bittype(%%0),5)]%r[space(5)]> comcfg/lock RPLog=%[or(gte(bittype(%%0),5),match(JOIN LEAVE,%%1))]%r%rOne of the values (JOIN, LEAVE, TALK, ALL) will be passed%rfor each lock that you can optionally check against in the lock.
&COMCFGMSG_8X_2 ChanFunc=Syntax: comcfg/locklist <channel>%r%rThis will show the locks that exist on the channel.%r%rThe EvalLock controls who may join/leave/talk on a channel.%r%rThe CemitLock controls who may @cemit on the channel.%r%rNote: wizards by default can @cemit to any channel.
&COMCFGMSG_8X_3 ChanFunc=Syntax: comcfg/chanadd <channel>=<description>%r%rThis will add a channel by the name '<channel>' with the description%rof <description> that describes what the channel is for.%r%rChannel names can not contain spaces and must contain valid characters for attributes.
&COMCFGMSG_8X_4 ChanFunc=Syntax: comcfg/chandel <channel>%r%rThis will delete the channel <channel> and wipe all references of%rthis channel. This includes all player lists, descriptions, locks, or other.
&COMCFGMSG_8X_5 ChanFunc=Syntax: comcfg/chanlist%r%rThis will list the administrative details of a given channel. Fields are:%r[space(5)]Locked? -- Is the channel a locked channel?%r[space(5)]History? -- Does the channel have history? If so max lines?%r[space(5)]Masked? -- Does the channel allow alias masking?%r[space(5)]Users: Total number of users on channel.%r[space(5)]Input # -- Total number of uses the channel has had.
&COMCFGMSG_8X_6 ChanFunc=Syntax: comcfg/chancolor <channel>=<channel with color in name>%r%rThis allows you to colorize the channel as well as alter the name.%r%rThe channel name MUST be the same as the main channel, but you can%ralter color, case, and special encoding like accents with%rthis feature.
&COMCFGMSG_8X_7 ChanFunc=Syntax: comcfg/redesc <channel>=<new description>%r%rThis allows you to re-describe the given channel. You have no%rmethod to wipe a description as all channels must%rhave a valid description, however, you can use this to change it.
&COMCFGMSG_8X_8 ChanFunc=Syntax: comcfg/help [<topic>]%r%rThis allows you to either show the full syntax help of all options in channel%rwizhelp or optionally drill down to specific help as specified.%r%rThis screen is shown with 'comcfg/help help' as expected.
&COMCFGMSG_8X_9 ChanFunc=Syntax: comcfg/hist <channel>=<history>%r%rThis will set or reset the history recall lines of a given channel.%r%rIf the channel does not have a hitory, this will effectively set it.%rIf the channel already has a history, this will reset it to the new value.
&COMCFGMSG_8X_10 ChanFunc=Syntax: comcfg/cemitlock <channel>=<lock>%r%rThis will establish a lock on a given channel. By default, wizards can%rcan @cemit to any channel, however, if a lock is established they will%rhave to pass the lock like anyone else to @cemit to the channel.%r%rThis lock only affects who may or may not ue @cemit on that channel.
&COMCFGMSG_8X_11 ChanFunc=Syntax: comcfg/plrlock <player> = <one or more channels or +all>%r%rThis will effectively lock the target player from being able to interact with%rthe specified channel list. You may specify one or more channels to deny%rthe target player. If they are already on the channel%rthen they can receive output but will not be able to talk on it.%rYou may specify '+all' for all channels.
&COMCFGMSG_8X_12 ChanFunc=Syntax: comcfg/plrunlock <player> = <one or more channels or +all>%r%rThis will remove the channel restrictions from the target player thereby allowing them%runfettered use of the channel based on existing locks and restrictions.%rYou may specify more than one channel at a time with this command.%rYou may specify '+all' for all channels.
&COMCFGMSG_8X_13 ChanFunc=Syntax: comcfg/plrlist [<player>]%r%rIf no argument is specified, this will list all players and channel restrictions%rthat have been applied to that specified user.%rIf a player is specified as an optional argument, then only those channels that%rare restricted from that player are shown for that specified player.
&COMCFGMSG_8X_14 ChanFunc=Syntax: comcfg/chanborder <left> <right> [<channel>]%r%rIf <channel> is not specified, then the left and right borders are defined%rglobally for the comsystem. If <channel> is specified, then individual%rchannel-based borders are specified for that channel. Individual channel%rborders have precidence over the global settings.%r%rUse @clist/borders to list the borders of all the channels.
&COMCFGMSG_8X_15 ChanFunc=Syntax: comcfg/prune %[<list>%]%r[space(8)]comcfg/prune <channel> %[=<all>%]%r[space(8)]comcfg/prune <channel> = object%r%rThe first syntax option will list all the channels and show objects and%rinvalid players that exist on the channel. The 'list' is assumed in this%rcase and optional.%r%rThe second syntax will prune all non-players from the given channel. This%rincludes all object types as well as all invalid types.%r%rThe third option will prune only the invalid types from the channel but keep%rall the non-player objects.
&COMCFGMSG_8X_16 ChanFunc=Syntax: comcfg/maskadd <channel>%r%rThis toggles the channel to allow player masking. This will allow a player%rto hide their player name from all non-wizards with a specified alias%rwhich shows up when taling or who listing.%rWizards will see through commasks.
&COMCFGMSG_8X_17 ChanFunc=Syntax: comcfg/maskdel <channel>%r%rThis toggles the channel to no longer allow player masking. This will stop a player%rfrom hiding their player name with the use of commasks.
&COMCFGMSG_8X_18 ChanFunc=Syntax: comcfg/parsealias <boolean>%r%rThis will specify if you are allowed to parse the comsystem using aliases%ror you are not allowed to parse the comsystem using aliases.%r%rAs this is the default value, the logic is a bit reversed.%r%r0 -- Allow the comsystem to parse when using com aliases%r1 -- Disallow the comsystem to parse when using com aliases.
&COMCFGMSG_8X_19 ChanFunc=Syntax: comcfg/notify +<0 or channel name>%r[space(8)]comcfg/notify -<0 or channel name>%r[space(8)]comcfg/notify list%r%rThe first syntax allows you to specify what channels are NOT allowed%rto broadcast player connects/disconnects. Specifying '0' means all channels.%r%rThe second syntax allows you to specify what channels ARE allowed%rto broadcast player connects/disconnects. Specifying '0' means all channels.%r%rThe third syntax shows the current channel(s) that are broadcasting on the channel.%r%rYou can type @clist/notify to see what channels are doing notifications.
&COMCFGMSG_8X_20 ChanFunc=Syntax: comcfg/rename <channel>=<new name with optional color/accents/other>%r%rThis allows you to rename the channel to anything you want.%rThis is the name that will show up when talking on the channel or in showing%rheader information for the channel. This is NOT the channel name that a player%ruses when joining/leaving. This is a channel mask only.%r%rYou may use the @clist/alias to see all channels and all channel rename masks.%r%rYou may specify spaces in channel renames as it applies only to the mask.
&COMCFGMSG_8X_21 ChanFunc=Syntax: comcfg/timestamp <channel> [=<timeformat>]%r%rExamples: comcfg/timestamp +all=<@H @M>%r[space(10)]comcfg/timestamp +list%r[space(10)]comcfg/timestamp public=<+ @m/@d/@y @H:@M:@S +>%r%rThis allows you to set a timestamp as a prefix for a given channel.%rYou use any string you want and the following substitutions for the timestamp:%r[space(5)]@H - hours%r[space(5)]@M - minutes%r[space(5)]@S - seconds%r[space(5)]@m - months%r[space(5)]@d - days%r[space(5)]@y - years%r%rYou may use them as amny times as you want and it will do substitution%rwhere required.%r%rNot specifying the <timestamp> will clear it.
&DO_TIMEFORMAT ChanFunc=[setq(0,ifelse(hasattr([v(F-DB)]/do_timeformat_%0),ueval(do_timeformat_%0/sub,%1,%2,%3,%4,%5,%6),ueval(do_timeformatgen/sub,%1,%2,%3,%4,%5,%6)))][ifelse(!!$r(0),%q0%b)]
&FN_COMCHANGES ChanFunc=[list(v(data_comchanges),printf($-8s$-13s$-15s$-42|"s,extract(%i0,1,1,|),extract(%i0,2,1,|),extract(%i0,3,1,|),extract(%i0,4,1,|)),~)]
&ERROR_DEFAULT ChanFunc=ComSys: Sorry, you have no access to that channel.
&PROCESS_ERROR ChanFunc=[default([v(F-DB)]/error_custom,get([v(F-DB)]/error_default))][u([v(FX-DB)]/do_custerror,wipe)]
&SET_ERROR ChanFunc=[u([v(FX-DB)]/do_custerror,set,%0)]
&DATA_COMCHANGES ChanFunc=Version|Date|Author|Description~-------|------------|--------------|-----------------------------------------~1.0.0|XX/XX/XX|Ashen-Shugar|Original Version of AshCom V2~1.1.5|05/21/17|Ashen-Shugar|Fix for @chan/on and @chan/off to handle locks~1.1.6|08/07/17|Ashen-Shugar|Add arg %2 to locks for length of string sent and cleanup of deleting channels~1.2.0|09/22/17|Ashen-Shugar|comset to control how output on channels work~1.2.1|10/04/17|Ashen-Shugar|Fix a bug reported by Ixokai with +comset~1.2.2|11/24/17|Ashen-Shugar|Fix for version checking at start (warning only) and fix on comcfg/notify with case sensitivity~1.2.3|09/25/18|Ashen-Shugar|Add timestamp capability to channel output~1.2.4|01/13/19|Ashen-Shugar|@cboot/@clist fixes.  channels() function~1.2.5|02/25/19|Ashen-Shugar|modified comall to optionally specify channel~1.2.6|04/01/19|Ashen-Shugar|Introduction of in-line changes file/command~1.2.7|04/10/19|Ashen-Shugar|Comfunctions help added~1.2.8|04/28/19|Ashen-Shugar|Minute, Hour, Day added to last~1.2.9|05/15/19|Ashen-Shugar|Improved lock messages added~1.3.0|08/10/19|Ashen-Shugar|Fixed timeformats now showing up for ./=commands~1.3.1|01/04/20|Ashen-Shugar|Fix in @cemit to allow objects to hear it~-------|------------|--------------|-----------------------------------------
@set ChanFunc=INHERIT
@set ChanFunc=HALTED
@@
@@ Create ComSystem SIDEFX Object
@@
@create ComSysSIDEFX=10
&DO_TOGGLEPARSE ComSysSIDEFX=[set(#[config(global_error_obj)],VD:[add(%0,0)])]
&DO_CHANMASK ComSysSIDEFX=[ifelse(match(%0,add),set(v(STOR-DB),COMMASK_CHANLIST:[setunion(get([v(STOR-DB)]/COMMASK_CHANLIST),lcstr(%1))]),set(v(STOR-DB),COMMASK_CHANLIST:[setdiff(get([v(STOR-DB)]/COMMASK_CHANLIST),lcstr(%1))]))]
&DO_ALIAS ComSysSIDEFX=[u(do_alias_[and(uldefault([v(F-DB)]/[after(%2,:)]_lock,1,%#,[switch(match(on off,first(%1)),1,JOIN,2,LEAVE,TALK)],ifelse(match(%0,xxx),0,strlen(%1))),not(match(get(%#/_ch_lock),after(%2,:))))],%0,%1,%2,%3,%4,%5,%6,%7,%8,%9)]
&DO_ALIAS_0 ComSysSIDEFX=[default([v(F-DB)]/error_custom,get([v(F-DB)]/error_default))][u([v(FX-DB)]/do_custerror,wipe)]
@@ &DO_ALIAS_1 ComSysSIDEFX=[setq(9,v(1))][setq(1,after(%2,:))][setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][setq(5,u([v(F-DB)]/genericdo[setr(6,member(get([v(F-DB)]/generic_cmds),mid(r(9),0,1)))],%0,r(9),%#))][ifelse(match(get(%#/_ch_gagged),r(1)),pemit(%#,ComSys: NOTICE -- You are currently gagged on [u([v(F-DB)]/do_chancolor,r(1))]))][ifelse(or(!match(get(%#/_ch_gagged),%q1),match(who,first(%1))),[npemit(ifelse(or(and(match(on off who,first(%1)),eq(1,words(%1))),and(lt(words(%1),3),match(last,first(%1)))),%#,u([v(FX-DB)]/do_gagging,r(1))),switch(u([v(F-DB)]/f_user_comset,##,%q1,member(get([v(F-DB)]/generic_cmds),mid(r(9),0,1))),1,%qb [stripansi(%qc%qk%qd)],2,%qb [stripansi(%qk%qd)],3,%qb %qk%qd,r(5)),1)][u([v(FX-DB)]/do_chcnt,r(1))][ulocal([v(FX-DB)]/do_hist[r(0)],secs())])]
&DO_ALIAS_1 ComSysSIDEFX=[setq(9,v(1))][setq(1,after(%2,:))][setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][setq(5,u([v(F-DB)]/genericdo[setr(6,member(get([v(F-DB)]/generic_cmds),mid(%1,0,1)))],%0,%1,%#))][ifelse(match(get(%#/_ch_gagged),r(1)),pemit(%#,ComSys: NOTICE -- You are currently gagged on [u([v(F-DB)]/do_chancolor,r(1))]))][ifelse(or(!match(get(%#/_ch_gagged),%q1),match(who,first(%1))),[npemit(ifelse(or(and(match(on off who,first(%1)),eq(1,words(%1))),and(lt(words(%1),3),match(last,first(%1)))),%#,u([v(FX-DB)]/do_gagging,r(1))),switch(u([v(F-DB)]/f_user_comset,##,%q1,member(get([v(F-DB)]/generic_cmds),mid(%1,0,1))),1,%qb [stripansi(%qc%qk%qd)],2,%qb [stripansi(%qk%qd)],3,%qb %qk%qd,r(5)),1)][u([v(FX-DB)]/do_chcnt,r(1))][ulocal([v(FX-DB)]/do_hist[r(0)],secs())])]
&DO_JOINCHAN ComSysSIDEFX=[ifelse(%1,set([V(STOR-DB)],CHLIST_%2:[setunion(get([V(STOR-DB)]/CHLIST_%2),%#)]),set([V(STOR-DB)],CHLIST_%2:[setdiff(get([V(STOR-DB)]/CHLIST_%2),%#)]))]
&DO_CHKALIAS ComSysSIDEFX=[ifelse(ulocal(dochk,%0,%1,%2,%3,%#),u(do_alias,%0,%1,%2,%3,%4),ComSys: [switch(%1,on,You are already on that channel,off,You are already off that channel,Sorry%, you are not on that channel.)])]
&DOCHK ComSysSIDEFX=[or(and(not(member(on,lcstr(%1))),setr(5,match(get([V(STOR-DB)]/chlist_[after(%2,:)]),%#))),and(member(on,lcstr(%1)),not(r(5))))]
&DO_CHCNT ComSysSIDEFX=[ifelse(words(%0),set([V(STOR-DB)],chused_%0:[add(get([V(STOR-DB)]/chused_%0),1)]))]
&DO_CHANLOCK ComSysSIDEFX=[set([v(F-DB)],%0_lock:%1)]
&DO_CHANCREATE ComSysSIDEFX=[set([V(STOR-DB)],ch_list:[setunion(lcstr(get([V(STOR-DB)]/ch_list)),lcstr(%0))])][set([V(STOR-DB)],chdesc_%0:%1)][set([v(F-DB)],do_chancolor_%0:[capstr(lcstr(%0))])]
&DO_CHANDELETE ComSysSIDEFX=[set([V(STOR-DB)],ch_list:[setdiff(lcstr(get([V(STOR-DB)]/ch_list)),lcstr(%0))])][set([V(STOR-DB)],chdesc_%0:)][set([v(F-DB)],do_chancolor_%0:)][set([v(STOR-DB)],chlist_%0:)][set([v(F-DB)],%0_history:)][set([v(F-DB)],%0_cemit_lock:)][set([v(F-DB)],%0_lock:)][set([v(F-DB)],do_chancolor_over_%0:)][set(v(STOR-DB)],chused_%0:)]
&DO_CHANCOLOR ComSysSIDEFX=[set([v(F-DB)],do_chancolor_%0:%1)]
&DO_CHANREDESC ComSysSIDEFX=[set([V(STOR-DB)],chdesc_%0:%1)]
&DO_HIST1 ComSysSIDEFX=[setq(9,get([setr(8,get([v(F-DB)]/[r(1)]_history))]/hval))][set(r(8),HIST_TIME_[setr(5,mod(get([r(8)]/CVAL),get([r(8)]/HVAL)))]:%0 %#)][set(r(8),HIST_DATA_[r(5)]:[r(7)])][set(r(8),CVAL:[mod(add(1,get([r(8)]/CVAL)),get([r(8)]/HVAL))])]
&DO_PEMIT ComSysSIDEFX=[npemit(%#,edit(%0,r(1),[u([v(F-DB)]/do_chancolor_[r(1)])]))]
&DO_CHANHISTSET ComSysSIDEFX=[ifelse(words(setr(3,get([v(F-DB)]/%0_history))),,[setr(4,create([capstr(lcstr(%0))]LOG,10))][tel(r(4),[v(CH-DB)])][set([v(F-DB)],%0_history:[r(4)])][setq(3,r(4))])][set(r(3),HVAL:%1)]
&DO_CEMITLOCK ComSysSIDEFX=[set([v(F-DB)],%0_cemit_lock:%1)]
&DO_PLRLOCK ComSysSIDEFX=[ifelse(%2,set(pfind(%0),_ch_lock:[setunion(get([pfind(%0)]/_ch_lock),lcstr(%1))]),set(pfind(%0),_ch_lock:[setdiff(get([pfind(%0)]/_ch_lock),lcstr(%1))]))]
&DO_GENPEMIT ComSysSIDEFX=[npemit(%0,%1)]
&DO_CBOOT ComSysSIDEFX=[u([v(FX-DB)]/do_alias,xxx,:has @cbooted [name(pfind(%0))] off the channel,xxx:%1)][set([V(STOR-DB)],chlist_%1:[setdiff(get([V(STOR-DB)]/chlist_%1),pfind(%0))])]
&DO_CHANBORDERS ComSysSIDEFX=[set([v(F-DB)],ch_template1[ifelse(match(get([v(STOR-DB)]/CH_LIST),%2),_%2)]:[objeval(%1,s(first(%0)))])][set([v(F-DB)],ch_template2[ifelse(match(get([v(STOR-DB)]/CH_LIST),%2),_%2)]:[objeval(%1,s(first(rest(%0))))])]
&DO_PRUNECHAN ComSysSIDEFX=[ifelse(match(%0,o*),set(v(STOR-DB),CHLIST_%1:[keeptype(get([v(STOR-DB)]/CHLIST_%1),player thing)]),set(v(STOR-DB),CHLIST_%1:[keeptype(get([v(STOR-DB)]/CHLIST_%1),player)]))]
&DO_GAGGING ComSysSIDEFX=[iter(get([v(STOR-DB)]/CHLIST_%0),ifelse(or(and(match(%qn,snuffit),or(match(get(##/_ch_unnotify),%0),match(get(##/_ch_unnotify),+all))),match(get(##/_ch_gagged),%0)),,%i0))]
&FN_GAGSET ComSysSIDEFX=[ifelse(match(%1,remove),set(%0,_CH_GAGGED:[setdiff(get(%0/_ch_gagged),ifelse(match(%2,+all),[get([v(STOR-DB)]/ch_list)] +all,[lcstr(%2)] +all))]),set(%0,_CH_GAGGED:[setunion(get(%0/_ch_gagged),ifelse(match(%2,+all),[get([v(STOR-DB)]/ch_list)],lcstr(%2)))]))]
&FN_NOTIFYSET ComSysSIDEFX=[switch(%1,remove,set(%0,_CH_NOTIFY:[setunion(get(%0/_ch_notify),lcstr(%2))]),add,set(%0,_CH_NOTIFY:[setdiff(get(%0/_ch_notify),lcstr(%2))]),clear,set(%0,_CH_NOTIFY:),all,set(%0,_CH_NOTIFY:+all))]
&FN_NOTIFYUNSET ComSysSIDEFX=[switch(%1,remove,set(%0,_CH_UNNOTIFY:[setunion(get(%0/_ch_unnotify),lcstr(%2))]),add,set(%0,_CH_UNNOTIFY:[setdiff(get(%0/_ch_unnotify),lcstr(%2))]),clear,set(%0,_CH_UNNOTIFY:),all,set(%0,_CH_UNNOTIFY:+all))]
&FN_COMNOTIFYBROADCAST ComSysSIDEFX=[setq(n,snuffit)][nsiter(setdiff(default([v(F-DB)]/notify_list,get([v(STOR-DB)]/CH_LIST)),0),ifelse(and(match(get([v(STOR-DB)]/CHLIST_##),%0),!or(match(get(%0/_ch_notify),##),match(get(%0/_ch_notify),+all))),u([v(FX-DB)]/do_alias_notify,%0,%k %1,##)))]
&FN_COMNOTIFYBROADCAST_EXTENDED ComSysSIDEFX=[setq(n,snuffit)][setq(m,)][nsiter(setdiff(default([v(F-DB)]/notify_list,get([v(STOR-DB)]/CH_LIST)),0),ifelse(and(match(get([v(STOR-DB)]/CHLIST_##),%0),!or(match(get(%0/_ch_notify),##),match(get(%0/_ch_notify),+all))),u([v(FX-DB)]/do_alias_notify_extended,%0,%k %1,##)[setq(m,%qm ##)]))][setq(f,iter(lwho(),ifelse(hasattr(%i0/_ch_compress),%i0)))][iter(%qf,[setq(s,iter(%qm,ifelse(match(u([v(FX-DB)]/do_gagging,%i0),%i1),%i0)))][ifelse(!!^r(s),[pemit(%i0,%[[elist(%qs,,,,,u([v(F-DB)]/do_chancolor,%0))]%] %k %1)])])]
&DO_ALIAS_NOTIFY ComSysSIDEFX=[setq(n,snuffit)][setq(3,default([v(F-DB)]/ch_template1_%2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%2,get([v(F-DB)]/ch_template2)))][setq(1,%2)][setq(g,u([v(F-DB)]/f_do_cemit,%2,%1,%0))][setq(f,u([v(FX-DB)]/do_gagging,%2))][ulocal([v(FX-DB)]/do_hist1,secs())][pemit(%qf,%qg)]
&DO_ALIAS_NOTIFY_EXTENDED ComSysSIDEFX=[setq(n,snuffit)][setq(3,default([v(F-DB)]/ch_template1_%2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%2,get([v(F-DB)]/ch_template2)))][setq(1,%2)][setq(g,u([v(F-DB)]/f_do_cemit,%2,%1,%0))][setq(f,u([v(FX-DB)]/do_gagging,%2))][setq(f,setdiff(%qf,iter(lwho(),ifelse(hasattr(%i0/_ch_compress),%i0))))][ulocal([v(FX-DB)]/do_hist1,secs())][pemit(%qf,%qg)]
&DO_NOTIFYBYNAME ComSysSIDEFX=[ifelse(match(%0,+),set([v(F-DB)],NOTIFY_LIST:[setunion(lcstr(get([v(F-DB)]/notify_list)),%1)]),set([v(F-DB)],NOTIFY_LIST:[setdiff(lcstr(get([v(F-DB)]/notify_list)),%1)]))]
&DO_RENAMECHAN ComSysSIDEFX=[set([v(F-DB)],DO_CHANCOLOR_OVER_%0:%1)]
&DO_COMNOTIFY_COMPRESS ComSysSIDEFX=[ifelse(hasattr(%#/_ch_compress),wipe(%0/_ch_compress),set(%0,_ch_compress:1))]
&DO_COMSET_SET ComSysSIDEFX=[ifelse(match(%1,+all),set(%0,_ch_comset:%1:%2),[setq(z,match(get(%0/_ch_comset),%1:*))][ifelse(!!r(z),set(%0,_ch_comset:[replace(get(%0/_ch_comset),%qz,%1:%2)]),set(%0,_ch_comset:[get(%0/_ch_comset)] %1:%2))])]
&DO_COMSET_UNSET ComSysSIDEFX=[setq(z,match(get(%0/_ch_comset),%1:*))][ifelse(!!r(z),set(%0,_ch_comset:[ldelete(get(%0/_ch_comset),%qz)]))]
&DO_SETTIMESTAMP ComSysSIDEFX=[ifelse(match(%0,+all),set([v(F-DB)],do_timeformatgen:[pedit(%1,@H,%%0,@M,%%1,@S,%%2,@m,%%3,@d,%%4,@y,%%5)]),set([v(F-DB)],do_timeformat_%0:[pedit(%1,@H,%%0,@M,%%1,@S,%%2,@m,%%3,@d,%%4,@y,%%5)]))]
&DO_CUSTERROR ComSysSIDEFX=[switch(%0,set,set([v(F-DB)],ERROR_CUSTOM:ComSys: %1),wipe,set([v(F-DB)],ERROR_CUSTOM:))]
@set ComSysSIDEFX=INHERIT
@set ComSysSIDEFX=SIDEFX
@@
@@ Last Minute Configuration.
@@
@swi/f [gte(bittype(%#),6)]=1,{@swi/f [config(global_error_obj)]=-1,{@pemit %#=Defining global error object.  Please insert the line 'global_error_obj [strip(num(globalerrobject),#)]' in your .conf file;@admin global_error_obj=[strip(num(globalerrobject),#)]},{@pemit %#=Global error object already defined as #[config(global_error_obj)].  Please add functionality from [num(globalerrobject)] to it.},@pemit %#=You must have an immortal/#1 set up global_error_obj to [num(glboalerrobject)]}
@fo me=&CH-DB GlobalErrObject=[num(ChanSys)]
@fo me=&CH-DB ChanFunc=[num(ChanSys)]
@fo me=&CH-DB ComSysSIDEFX=[num(ChanSys)]
@fo me=&F-DB GlobalErrObject=[num(ChanFunc)]
@fo me=&F-DB ChanFunc=[num(ChanFunc)]
@fo me=&F-DB ComSysSIDEFX=[num(ChanFunc)]
@fo me=&STOR-DB GlobalErrObject=[num(ChannelDB)]
@fo me=&STOR-DB ChanFunc=[num(ChannelDB)]
@fo me=&STOR-DB ComSysSIDEFX=[num(ChannelDB)]
@fo me=&FX-DB GlobalErrObject=[num(ComSysSIDEFX)]
@fo me=&FX-DB ChanFunc=[num(ComSysSIDEFX)]
@fo me=&FX-DB ComSysSIDEFX=[num(ComSysSIDEFX)]
@@
@@ Ok, clean up the objects.
@@
@@ Define global error object
@tel/list GlobalErrObject ChanFunc ComSysSIDEFX ChannelDB=ChanSys
@@ Set command flag if needed
@@
@pemit %#=This may give an error if the COMMAND flag is not defined.  Ignore the error.
@set ChanSys=command
@@ 
@pemit %#=Creating default channels.
comcfg/chanadd Newbie=New Player Channel
comcfg/chancolor newbie=[ansi(h,Newbie)]
comcfg/chanadd Public=New Player Channel
comcfg/chancolor public=[ansi(hb,Public)]
@swi/f [isdbref(globalroom())]=1,{@pemit %#=Installing into your globalroom %([name(globalroom())]%([globalroom()][flags(globalroom())]%);@tel/quiet ChanSys=globalroom();@pemit %#=Installation Completed. (type 'comhelp' for help)},{@pemit %#=Either the global room isn't configured or you have no access to it.  You will need to manually place the object into the global room.%rInstallation Completed. (type 'comhelp' for help)}
